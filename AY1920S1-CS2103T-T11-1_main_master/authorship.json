[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d NUSpend"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "https://travis-ci.org/ay1920s1-cs2103t-t11-1/main[image:https://travis-ci.org/ay1920s1-cs2103t-t11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Our unique expense tracker app, NUSpend, is is tailored to students from National University of Singapore."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "It helps users cultivate good financial management habits through tracking their expenses and setting periodical budgets."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "With NUSpend, you can spend smart and save smart."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* This is a desktop application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Original source of the code: AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 7,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        \u0027site-name\u0027: \u0027Expense Tracker\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-T11-1/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 2,
      "-": 153
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "NUSpend was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Anqi Chen"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::anqichen9856.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[https://github.com/anqichen9856[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of Budgeting \u0026 Expense Tracking"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Brian Fung"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::briyanii.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[http://github.com/briyanii[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Role: Developer  +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of GUI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Chong Zi Kang"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::czkay.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[http://github.com/czkay[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of Reminder \u0026 Prediction"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Ryo Chandra Putra Armanda"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::ryoarmanda.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[http://github.com/ryoarmanda[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of Budgeting"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Quek Wei Ping"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::qweiping31415.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[http://github.com/qweiping31415[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of Statistics"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 23,
      "-": 34
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Email us* : You can also reach us at `anqichen@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Purpose \u0026 Scope"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "This document specifies architecture and software design decisions for the app NUSpend."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The intended audience of this document is the developers, designers, and software testers of NUSpend."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Software Overview"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "NUSpend is a desktop CLI application that help users track their expenses."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The App supports many other extensions such as budgeting, planning and reminders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "In particular, it is tailored to students in National University of Singapore who dines frequently in school canteens."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* has a need to track a significant number of expenses"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* lives on a monthly allowance"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* wants to save money"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* has difficulty remembering important dates, such as friends\u0027 birthdays or anniversaries"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* optimized for students in National University of Singapore"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* make prediction for future spending based on extrapolation from past statistics and upcoming important dates"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* customizable categories, budgets and aliases"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* flexible forms of viewing a summary of expenses"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* give input suggestions while typing"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* more convenient time format"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |full-time university student without any stable income |record my expenses |track my spending and practice financial management skills"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |non-money minded person |view a list of all my previous expenses |be better at tracking my expenses"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |user |categorize my expenses by types (e.g. Transport, Food, etc.) |differentiate expenses easily"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |YEP (Youth Expedition Project) organizer who is in charge of logistics for my overseas project |delete a previous expense |I do not keep track of expenses that have been reimbursed by Youth Corps Singapore"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |non-money minded person |save the expenses data locally |still keep track of my expenses even after closing the App"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |foodie who frequently goes out with friends and pays for grab/restaurant bills |quickly find a particular entry by typing a keyword |refer to a previous expense and know how much money my friend needs to pay me back"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |someone who is not good at managing my money |view budget breaking expenses |quickly know which expenses make up a big part of my budget"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |forgetful person |get notified of upcoming birthdays/anniversaries |budget for these special dates"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |lazy person |specify tax rate and let the app calculates the total price for me when entering expense |I can know the after-tax price when ordering in restaurants"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |money-minded user |extrapolate from daily/weekly expenses to monthly expenses |have a rough gauge on future spending and plan budgets accordingly"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |user |manually input my expenses in an external file and import these expenses into the App |track previous expenses that occur before I start using the App"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |user |request for periodic statements |revise and reflect on my past expenses"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |busy person |add repeated expenses by selecting a previous expense and adding as a current expense |save time when using the App"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |financially dependent student |export my past expenses |my parents can see my spending"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |lazy user |let the App predict the tags for my expenses |use automated suggestions provided to me for better categorizaton"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |person working part time/TA-ing/etc |let the App add to my earnings automatically based on salary |track my income as well"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |foreign student on exchange in NUS |input my spending in SGD and have it automatically converted to my local currency |better track my spending in a currency I\u0027m more comfortable with"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |visual person who easily gets confused by a large amount of text and prefers graphic illustrations |view my monthly expenses in pie charts |better understand the weightage of spending in different categories in a more direct and efficient manner"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |user |update details of a past expense |correct erroneous past expenses without having to delete it and add again"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |lazy user |schedule recurring expenses |avoid having to key in the same information all the time. (However, I want to be able to confirm details of the expense.)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |busy person |let the App use the current time for an expense if I do not specify a time |avoid always having to manually key in a time for my expense"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |busy person |enter the time as yesterday, one hour ago, etc |save effort by using convenient and flexible time formats"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |non-money minded person |receive warnings when I’m close to or exceeding my budget |adjust my expenses to prevent overspending"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |careless person who is prone to typos |undo my previous command |I do not enter the wrong amount for my expenses"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |careless person who is prone to typos |redo my previous command |I do not delete expenses by accident"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |non-money minded person |set periodic budgets |discipline my spending"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |non-money minded person |set categorical budgets |exceptional expenses (e.g. healthcare or sponsored expenses) are not tracked under default budget to prevent confusion"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |non-money minded person |let the App suggest some budgeting tips for me |be better at tracking my expenses"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |forgetful person |receive email reminders if I haven’t input my expenses for a few days |do not forget to track my expense"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |someone who spends a lot of time in public spaces in school |easily hide my budgeting information on the application quickly |others could not see the details on my screen"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |busy person |input my expenses by scanning a receipt |can save more time than manually typing in the expenses"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |NUS student, and lazy person |add expense from school canteens by saying e.g. “deck steamed chicken rice” |don\u0027t need to enter the details and prices"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |non-financially independent student |hide some details when exporting expenses |do not share exact details with my parents but instead include them as an anonymous expense"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |non-money minded person |let the App help me make saving plans for future expenses |start saving early"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |user |group certain expenses, e.g. group chicken rice and milo as lunch, but both remain separate entries as well |manage related expenses together"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |advanced CLI user |add aliases to my common inputs |avoid typing the similar things every time"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |user |let the App predict frequent similar expenses and prompt me to enter them |do not miss expenses while I\u0027m not using the App"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |busy student who may need to close the App to settle some other matters |let the App remember what I had typed into the command line last time I closed the App |resume when I reopen the app"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "(For all use cases below, the *System* is `NUSpend` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Use case: Add a budget and switch to it"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "1.  User requests to add a budget and specifies budget name, amount, period and start date"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "2.  NUSpend shows success in creating new budget"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "3.  User requests to switch to this budget by specifying the budget name"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "4.  GUI switches to the budget and sets it as current primary budget for displaying and calculating expenses"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* 1a. User misses any of the necessary parameters: budget name, amount, period or start date"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 1a1. NUSpend shows an error message and reminds the user to complete the parameters."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 1a2. User re-enters the command with new data."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Steps 1a1-1a2 are repeated until the parameters entered are correct and complete."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* 3a. User forgets to input the name of the budget he wants to switch to."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 3a1. NUSpend shows an error message and requests for the budget name."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 3a2. User re-enters the command, specifying the budget name."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* 3b. User enters a budget name that does not correspond to any of the currently existing budgets."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 3b1. NUSpend shows an error message and requests for a correct budget name that exists."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 3b2. User re-enters the command with a new budget name."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Steps 3b1-3b2 are repeated until the budget name entered is an existing one."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Use case: Show reminders"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "1.  User requests to see reminders."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "2.  AddressBook shows a list of reminders."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* 2a. There are no reminders."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "czkay"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d Use case: Add event"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "czkay"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "czkay"
        },
        "content": "1.  User adds an event."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "czkay"
        },
        "content": "2.  AddressBook tells the user that the event has been successfully added."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "czkay"
        },
        "content": "+"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "czkay"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "czkay"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "czkay"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "czkay"
        },
        "content": "* 2a. The event is formatted incorrectly (e.g. the date is invalid)."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "czkay"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "czkay"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "czkay"
        },
        "content": "** 2a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "czkay"
        },
        "content": "* 3a. The same event has been previously stored."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "czkay"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003dIdk why\u003d\u003d"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing Statistics summary"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "1. User requests to view statistics"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "2. NUSpend prompts user for start date"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "3. User enters start date"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "4. NUSpend prompts user for end date"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "5. User enters end date"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "6. NUSpend displays the statistics requested"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* *a. NUSpend detects incorrect date format"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** *a1.NUSpend throws Exception"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* 5a. The user enters a start date, but does not enter an end date"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 5a1. NUSpend displays the statistics 1 month after start date"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* 5b. The user does not enter a start date, but enters an end date"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 5b1. NUSpend displays the statistics 1 month before end date"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing Statistics compare"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "1. User requests to view statistics"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "2. NUSpend prompts user for date 1"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "3. User enters date 1"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "4. NUSpend prompts user for date 2"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "5. User enters date 2"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "6. NUSpend prompts user for period"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "7. User enters period"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "8. NUSpend displays the statistics requested"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* *a. NUSpend detects incorrect date format or missing parameters"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** *a1.NUSpend throws Exception"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d Use case: Adding an alias"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "briyanii"
        },
        "content": "1. User assigns an Alias name for some input."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "briyanii"
        },
        "content": "2. NUSpend confirms that the input is alias name is valid."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "briyanii"
        },
        "content": "3. NUSpend saves the alias to the user\u0027s preferences."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "briyanii"
        },
        "content": "4. NUSpend informs the user that the alias was successfully created."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case Ends."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* 1a. Alias name is invalid."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** 1a1. NUSpend informs the User that the alias name is invalid."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case Ends"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* 2a. An Alias with the same name exists."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** 2a1. NUSpend overwrites the existing Alias with the same name in the User\u0027s preferences."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d Use case: Using an alias"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "briyanii"
        },
        "content": "1. User types alias into CLI."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "briyanii"
        },
        "content": "2. User enters the command"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "briyanii"
        },
        "content": "3. NUSpend attempts to execute the input mapped to the alias."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* 1a. Users enters additional details after alias name"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** 1a1. User enters the command"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** 1a2. NUSpend attempts to execute the input mapped to the alias with the additional details appended."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d Use case: Spending beyond budget"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "briyanii"
        },
        "content": "1. User adds an expense to a budget."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "briyanii"
        },
        "content": "2. NUSpend displays the updated expense list."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "briyanii"
        },
        "content": "3. NUSpend finds that the total amount spent in the budget exceeds the allocated budget amount."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "briyanii"
        },
        "content": "4. NUSpend warns the User that they have overspent."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "czkay"
        },
        "content": ".  Should be able to hold up to 1000 expenses without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "czkay"
        },
        "content": ".  Should be at the least usable for a novice to command line interfaces."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ".  The system should respond within two seconds after user types in a command."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "czkay"
        },
        "content": ".  Data entered must not be volatile (i.e. can only be changed at the user\u0027s command)."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "czkay"
        },
        "content": ".  Past data must be saved permanently unless deleted at the user\u0027s command."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ".  Should adhere to the project scope (e.g. Not required to have digital wallet support)."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ".  Should be able to work without internet connection."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "czkay"
        },
        "content": "[[alias]] Alias::"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "czkay"
        },
        "content": "A user-defined keyword that represents a specific Expense, acting as a quality-of-life replacement for common Expenses."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "czkay"
        },
        "content": "*Budgie*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "czkay"
        },
        "content": "Author: STUCK"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "czkay"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Remembers and approximates frequently entered expenses"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Provides temporary budget accounts for special occasions (i.e. vacationing, sponsored events)"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Pleasing and easily navigable interface due to a relatively small number of features"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "czkay"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Expenses are kept very simple: There is no way to enter the location of the expense or place a tag on it"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Does not link to any financial accounts or digital wallets"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "czkay"
        },
        "content": "*Wally*"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "czkay"
        },
        "content": "Author: Wally Global Inc."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "czkay"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Almost every foreign currency is supported, and can be converted to and from each other"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Each expense can be tagged with an accompanying photo (e.g. a receipt)"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Can set a password"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Can split group payments"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "czkay"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Complex interface due to the large amount of features"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "czkay"
        },
        "content": "*YNAB (You Need A Budget)*"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "czkay"
        },
        "content": "Author: You Need A Budget LLC"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Portions of a budget can be transferred to another easily in cases of underspending/overspending"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Innovative way of budgeting: every single dollar from your income must be assigned a \u0027job\u0027 (e.g. fun money, subscriptions)"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Can set budgeting goals"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Can be rather stressful due to its obsession to categorise every single dollar you earned that month"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "czkay": 63,
      "briyanii": 53,
      "qweiping31415": 78,
      "anqichen9856": 148,
      "-": 404
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d NUSpend - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "NUSpend is for those who *prefer to use a desktop app for tracking expenses*. More importantly, NUSpend is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, NUSpend can get your expense management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ".  Download the latest `NUSpend.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your NUSpend."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *`list`* : lists all expenses"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* **`add`**`d/Chicken Rice p/2.50 t/15-09-2019 1230 c/Food` : adds an expense named `Chicken Rice` to the expense tracker."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* **`delete`**`3` : deletes the 3rd expense shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  e.g. in `add p/PRICE`, `PRICE` is a parameter which can be used as `add p/2.50`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Items in square brackets are optional"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  e.g `p/PRICE [c/CATEGORY]` can be used as`d/Chicken Rice /p2.50 c/Food` or as `d/Chicken Rice /p2.50`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Items with `...` after them can be used multiple times including zero times"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  e.g. `[c/CATEGORY]...` can be used as `[blank]` (i.e. 0 times), `c/Food`, `c/Food c/Tasty`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Parameters can be in any order e.g. `add p/PRICE d/DESCRIPTION`, `add d/DESCRIPTION p/PRICE` are both acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Basic Expense-Related Commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an expense: `add`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Add an expense to the expense tracker"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `add d/DESCRIPTION p/PRICE [t/time] [c/CATEGORY]...`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* An expense can have any number of categories (including 0)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* If a time is not specified, the time property of the expense will be that of the system’s current time."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `add d/Chicken Rice p/2.50 t/15-09-2019 1230 c/Food`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `add d/Buffet p/250 c/Food c/Anniversary Expense`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Using relative time/date input: `yesterday`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The user can specify an expense’s time using relative dates and times."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "If the current date is 12 Sep 2013"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Input: `add d/Chicken Rice p/2.50 t/Yesterday Noon`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result: adds an expense of 2.50 at 11 Sep 2013, 12pm"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all expenses : `list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Shows a list of all expenses in the expense tracker."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Updating an expense : `edit`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Edits an existing expense in the expense tracker."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `edit INDEX [p/PRICE] [d/DESCRIPTION] [t/time] [c/CATEGORY]...`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`edit 2 p/3.50`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Updates the price of the 2nd expense in the current list to 3.50."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Edits the expense at the specified `INDEX`. The index refers to the index number shown in the currently displayed list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* When editing categories, the existing categories of the expense will be removed, i.e adding of categories is not cumulative."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* You can remove an expense from all the categories by typing `c/` without specifying any categories after it. i.e. `edit 1 c/`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* You can set the time of the expense to the system’s current time by typing `t/` without specifying a time."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Locating expenses by name: `find`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Finds expenses whose description contain any of the given keywords."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* The search is case insensitive. e.g `chicken` will match `Chicken`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* The order of the keywords does not matter. e.g. `Puff Curry` will match `Curry Puff`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Only full words will be matched e.g. `chick` will not match `chicken`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Expenses matching at least one keyword will be returned (i.e. OR search). e.g. an expense with description `Chicken rice`, and expense with description `Duck Rice` will both match `rice`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `find rice`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Returns `chicken rice` and `duck rice`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `find chicken taxi schoolfee`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  Returns any expense having description containing `chicken`, `taxi`, or `schoolfee`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an expense : `delete`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Deletes the specified expense from the current list shown in the expense tracker."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Deletes the expense at the specified INDEX."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* The index refers to the index number shown in the currently displayed list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Deletes the 2nd expense in the list of expenses, shown by `list`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "find chicken"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Deletes the 1st expense in the results of the `find` command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Clears all entries from the expense tracker."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Undo the previous command : `undo`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "User can undo the previous command. Only commands that modify the data, e.g. `add` `edit` `delete` `clear`, can be undone."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "undo"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expense no. 5 will not be deleted."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Redo the command that was undone : `redo`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "User can redo the command they have undone."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "undo"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "redo"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expense no. 5 will now be deleted."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Converting any currency to preferred currency : `convert`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Budgeting-Related Commands"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Creating new budgets : `budget`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Creates a new expense budget."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `budget n/BUDGET_NAME a/BUDGET_AMOUNT t/BUDGET_PERIOD d/BUDGET_START_DATE [p/IS_PRIMARY]`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "E.g."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`budget n/General expense a/100 t/1 month d/18-09-2019`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "This will create a new budget “General expense” that is set to $100 per month, starting from 18th September 2019."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Switch current budget : `switchbudget`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Switches currently active budget to another."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `switchbudget n/BUDGET_NAME`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "E.g."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`switchbudget General Expense`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Prediction : `predict`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "User can get a rough estimation of next month\u0027s total expense based on extrapolation from this month\u0027s expenditure. The prediction will take into account important dates that require extra spending in next month."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `predict`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`We predict your next month\u0027s total expenditure to be ...`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Creating an alias for your favourite commands : `alias`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Assign a full paramaterized input to an alias."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `alias a/ALIAS_NAME c/COMMAND_WITH_PARAMETERS`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "E.g."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`alias a/chicken rice c/ add d/ Chicken Rice p/2.50 c/Food`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result creates an alias “chicken rice” for the command which adds an expense of 2.50 under the Food category with a description of “Chicken Rice” at the current system time."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- Note: all white spaces characters will be removed from alias names"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- Note: aliases with names of official commands cannot be made"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- Note: using the same name for an alias will overwrite the existing alias if it exists"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Reminders"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Recording important dates : `remind`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Records an important date, which the expense tracker will remind you of as the date approaches."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `remind EVENT DATE [n DAYS]`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Records the EVENT with the timestamp DATE."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "By default, the expense tracker will remind you of this event when its scheduled time approaches 7 days and below. If the optional parameter `[n DAYS]` is inputted, the tracker will begin reminding you `n` days before the scheduled time."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example: `remind Brian’s birthday 04/06/2020 14 DAYS`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "14 days before 04/06/2020, the expense tracker will begin reminding you of Brian’s birthday."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all reminders : `reminders`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Lists all reminders for important dates that you have inputted."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `reminders`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "reminders"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "You have these important dates coming up!"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Brian’s birthday: 04/06/2020"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Mum’s birthday: 06/06/2020"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expense tracker data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Viewing Statistics"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Summary : `stats`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Produces statistics regarding the user’s expenses."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The statistics include all categories of items, with the number of entries, the total amount spent and the percentage composition of the total expenditure."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `stats [start/START_DATE] [end/END_DATE]`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[where dates are in DD-MM-YYYY format]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- `START_DATE` will be checked to be earlier than `END_DATE`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- If `START_DATE` is specified but `END_DATE` is empty, statistics is calculated from one month after `START_DATE`(or part thereoff)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- If `START_DATE` is empty but `END_DATE` is specified, statistics is calculated from one month before `START_DATE`(or part thereoff)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`stats`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`stats end/12-12-2018`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`stats start/11-11-2018 end/12-12-2018`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Compare : `statscompare`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Produces and displays statistics regarding the user’s finance for 2 time periods. The statistics include all categories of items, the number of entries and the total amount spent and the percentage composition of the total, stated as a difference using second period – first period"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `statscompare start1/START_DATE_1 end1/END_DATE start2/START_DATE_2 end2/END_DATE_2`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- Support similar constraints like basic stats command for 1 period"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- If only 1 valid period is given, then the functionality is similar to `stats START_DATE END_DATE`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`statscompare start1/01-01-2019 end1/01-02-2019 start2/01-01-2019 end2/01-02-2019`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Visualize: `visual`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Generates pie chart for spending in different categories. The pie chart also shows the percentage composition of the total expenditure in text."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `visual [start/START_DATE] [end/END_DATE]`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[where dates are in dd-MM-yyyy format]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- `START_DATE` will be checked to be earlier than `END_DATE`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- If `START_DATE` is specified but `END_DATE` is empty, statistics is calculated from one month after `START_DATE`(or part thereoff)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- If `START_DATE` is empty but `END_DATE` is specified, statistics is calculated from one month before `START_DATE`(or part thereoff)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- If both `START_DATE` and `END_DATE` are empty, statistics is calculated from the start of this month till today."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`visual`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`visual end/12-12-2018`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`visual start/11-11-2018 end/12-12-2018`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "NUSpend data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Email notification `[coming in v2.0]`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Input expenses by scanning a receipt `[coming in v2.0]`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous NUSpend folder."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Add an expense* `add d/DESCRIPTION p/PRICE [t/time] [c/CATEGORY]...` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `add d/Chicken Rice p/2.50 t/15-09-2019 1230 c/Food`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Clear all expenses* : `clear`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Compare statistics* : `statscompare start1/START_DATE_1 end1/END_DATE start2/START_DATE_2 end2/END_DATE_2` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `statscompare start1/01-01-2019 end1/01-02-2019 start2/01-01-2019 end2/01-02-2019`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Create alias* : `alias a/ALIAS_NAME c/COMMAND_WITH_PARAMETERS` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `alias a/chicken rice c/ add d/ Chicken Rice p/2.50 c/Food`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Create new budget* : `budget n/BUDGET_NAME a/BUDGET_AMOUNT t/BUDGET_PERIOD d/BUDGET_START_DATE [p/IS_PRIMARY]` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `budget n/General expense a/100 t/1 month d/18-09-2019`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Currency conversion* : `convert`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Delete an expense* : `delete INDEX` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Edit an expense* : `edit INDEX [p/PRICE] [d/DESCRIPTION] [t/time] [c/CATEGORY]...` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `edit 2 p/3.50`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Exit the app* : `exit`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Find an expense* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `find rice`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *List all expenses* : `list`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *List all reminders* : `reminders`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Prediction* : `predict`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Record important date* : `remind EVENT DATE [n DAYS]` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `remind Brian’s birthday 04/06/2020 14 DAYS`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Switch budget* : `switchbudget n/BUDGET_NAME` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `switchbudget General Expense`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *View statistics* : `stats [start/START_DATE] [end/END_DATE]` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `stats start/11-11-2018 end/12-12-2018`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Visualize* : `visual [start/START_DATE] [end/END_DATE]` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `visual start/11-11-2018 end/12-12-2018`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 267,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "    protected Timekeeper timekeeper;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "        timekeeper \u003d new Timekeeper(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "        logic \u003d new LogicManager(model, storage, timekeeper);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 5,
      "-": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Alias.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a user defined alias which can be used at the start of input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Alias implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"Alias names can only consist of alphanumeric characters\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_INPUT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"Alias inputs must contain at least 1 non-whitespace character\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String INPUT_VALIDATION_REGEX \u003d \"[\\\\s\\\\S]*\\\\S[\\\\s\\\\S]*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String aliasName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Alias(String aliasName, String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireAllNonNull(aliasName, input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidAliasName(aliasName), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidInput(input), MESSAGE_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasName \u003d aliasName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getAliasName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Objects.hash(aliasName, input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(obj instanceof Alias)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Alias other \u003d (Alias) obj;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasName.equals(other.aliasName)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 input.equals(other.input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidAliasName(String aliasName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Pattern.matches(NAME_VALIDATION_REGEX, aliasName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidInput(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Pattern.matches(INPUT_VALIDATION_REGEX, input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return \"Alias: \" + aliasName + \" Input: \" + input;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/AliasMappings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Serializable class that represents the user\u0027s {@code Alias} settings."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: fields are present, immutable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AliasMappings implements Serializable {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Map\u003cString, Alias\u003e aliasesMappings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Constructors"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasMappings() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasesMappings \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AliasMappings(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasMappings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasesMappings \u003d new HashMap\u003c\u003e(aliasMappings.aliasesMappings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Alias getAlias(String aliasName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasesMappings.get(aliasName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns a {@code UserAliasSettings} with an added {@code Alias}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasMappings addAlias(Alias alias) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings aliasMappings \u003d new AliasMappings(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        aliasMappings.aliasesMappings.put(alias.getAliasName(), alias);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasMappings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if an {@code Alias} is mapped to the given {@code String aliasName}, and false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param aliasName The alias name to check if it has a mapped {@code Alias}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return true if an {@code Alias} is mapped to the given {@code String aliasName}, and false otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasExists(String aliasName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasesMappings.containsKey(aliasName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if an alias name is not a reserved command word and false otherwise."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param aliasName The alias name which needs to be checked."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return true if an alias name is not a reserved command word and false otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasNameIsReserved(String aliasName) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        switch (aliasName) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case AliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the Alias\u0027 command word references another Alias\u0027 alias name."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasCommandWordIsAlias(String commandWord) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasesMappings.containsKey(commandWord);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasesMappings.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(obj instanceof AliasMappings)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings other \u003d (AliasMappings) obj;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // contains the same keys, for the keys it contains, it maps to the same inputs"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!aliasesMappings.keySet().equals(other.aliasesMappings.keySet())) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasesMappings"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .keySet()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .allMatch(key -\u003e aliasesMappings.get(key).equals(other.aliasesMappings.get(key)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    List\u003cReminder\u003e getReminders();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenses */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 4,
      "briyanii": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Timekeeper timekeeper;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public LogicManager(Model model, Storage storage, Timekeeper timekeeper) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timekeeper \u003d timekeeper;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText, model.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public List\u003cReminder\u003e getReminders() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return timekeeper.getReminders();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 11,
      "briyanii": 5,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Adds a expense to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the address book. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Chicken Rice \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_PRICE + \"3.50 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_TAG + \"nusDeck \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_TAG + \"chicken\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the address book\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AddCommand(Expense expense) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (model.hasExpense(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 21,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AliasCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Create an alias for common user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AliasCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"alias\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create a shortcut for commonly used Commands.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"Parameters: ALIAS_NAME USER_INPUT [more USER_INPUT]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"Example: findAnimal find rat rats mouse mice cow cows ox oxen tiger tigers\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Alias created: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_RESERVED_NAME \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"%1$s is a reserved command name and cannot be used for an alias name\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_RECURSIVE_WARNING \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"This alias is not allowed because it may possibly be recursive\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Alias toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasCommand(Alias alias) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.toAdd \u003d alias;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // if command_word is reserved"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String aliasName \u003d toAdd.getAliasName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (model.getUserPrefs().aliasNameIsReserved(aliasName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_RESERVED_NAME, aliasName));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // if recursive"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String commandWord \u003d toAdd.getInput().stripLeading().split(\"\\\\s+\")[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (commandWord.equalsIgnoreCase(aliasName)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || commandWord.equalsIgnoreCase(COMMAND_WORD)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || model.getUserPrefs().aliasCommandWordIsAlias(commandWord)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(MESSAGE_RECURSIVE_WARNING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.addUserAlias(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getAliasName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (obj instanceof AliasCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 this.toAdd.equals(((AliasCommand) obj).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Adds a budget to Moolah."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an budget to the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PRICE + \"AMOUNT \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PERIOD + \"PERIOD\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_DESCRIPTION + \"school related expenses \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PRICE + \"300 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_START_DATE + \"01-10 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PERIOD + \"month\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budget added:\\n %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"This budget already exists in Moolah\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Budget toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        toAdd \u003d budget;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (model.hasBudget(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.addBudget(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.setPrimary(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || (other instanceof BudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 toAdd.equals(((BudgetCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Deletes a expense identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Edits the details of an existing expense in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_PRICE + \"3512.123 \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the address book.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!expenseToEdit.isSameExpense(editedExpense) \u0026\u0026 model.hasExpense(editedExpense)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Description updatedDescription \u003d editExpenseDescriptor.getDescription().orElse(expenseToEdit.getDescription());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Price updatedPrice \u003d editExpenseDescriptor.getPrice().orElse(expenseToEdit.getPrice());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editExpenseDescriptor.getTags().orElse(expenseToEdit.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Expense(updatedDescription, updatedPrice, updatedTags, expenseToEdit.getUniqueIdentifier());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public EditExpenseDescriptor() {}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, price, tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 61,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Adds an event to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"Parameters: \" // need to change later"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Chicken Rice \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_PRICE + \"3.50 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_TAG + \"nusDeck \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_TAG + \"chicken\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the tracker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public EventCommand(Event event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || (other instanceof EventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 toAdd.equals(((EventCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Finds and lists all expenses in address book whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all expenses whose descriptions contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public FindCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Lists all expenses in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemindersCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Lists all reminders to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class RemindersCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminders\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all reminders\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.util.UniqueIdentifierGenerator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_PRICE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expense \u003d new Expense("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                description, price, tagList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                UniqueIdentifierGenerator.generateRandomUniqueIdentifier());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new AddCommand(expense);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 14,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.RemindersCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param readOnlyUserPrefs read only user preferences to check for aliases"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Command parseCommand(String userInput, ReadOnlyUserPrefs readOnlyUserPrefs) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case AliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new AliasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new BudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case RemindersCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return new RemindersCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return new EventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // check if alias exists"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (readOnlyUserPrefs.hasAlias(commandWord)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Alias alias \u003d readOnlyUserPrefs.getAlias(commandWord);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return parseCommand(alias.getInput() + \" \" + arguments, readOnlyUserPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 12,
      "czkay": 6,
      "anqichen9856": 3,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AliasCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AliasCommandParser implements Parser\u003cAliasCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] splitArgs \u003d trimmedArgs.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Alias alias \u003d ParserUtil.parseAlias(splitArgs[0], splitArgs[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new AliasCommand(alias);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Parses input arguments and creates a new BudgetCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class BudgetCommandParser implements Parser\u003cBudgetCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * and returns a BudgetCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_START_DATE, PREFIX_PERIOD, PREFIX_PRICE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_START_DATE, PREFIX_PERIOD, PREFIX_PRICE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Price amount \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        LocalDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Period period \u003d ParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget budget \u003d new Budget(description, amount, startDate, period);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new BudgetCommand(budget);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final Prefix PREFIX_PERIOD \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final Prefix PREFIX_TIMESTAMP \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "czkay": 1,
      "anqichen9856": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            editExpenseDescriptor.setDescription("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            editExpenseDescriptor.setPrice("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .ifPresent(editExpenseDescriptor::setTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new EditCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 18,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class EventCommandParser implements Parser\u003cEventCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public EventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_TIMESTAMP); // PREFIX_TAG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_TIMESTAMP)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Timestamp timestamp \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Event event \u003d new Event(description, price, timestamp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new EventCommand(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] descriptionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(descriptionKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Parses a {@code String timestamp} into a {@code Timestamp}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws ParseException if the given {@code timestamp} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static Timestamp parseTimestamp(String timestamp) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(timestamp);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String trimmedTimestamp \u003d timestamp.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!Timestamp.isValidTimestamp(trimmedTimestamp)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(Timestamp.MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new Timestamp(trimmedTimestamp);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses {@code String aliasName} and {@code String input} into a user defined {@code Alias}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the given {@code aliasName} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Alias parseAlias(String aliasName, String input) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Alias.isValidAliasName(aliasName)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(Alias.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Alias.isValidInput(input)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(Alias.MESSAGE_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Alias(aliasName, input);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses {@code String date} into a {@code LocalDate}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid (not in MM-d format)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int currentYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            DateTimeFormatter formatterWithoutYear \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    .appendPattern(\"dd-MM\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    .parseDefaulting(ChronoField.YEAR, currentYear)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    .toFormatter(Locale.ENGLISH);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            LocalDate parsedDate \u003d LocalDate.parse(trimmedDate, formatterWithoutYear);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                DateTimeFormatter formatterWithYear \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                LocalDate parsedDate \u003d LocalDate.parse(trimmedDate, formatterWithYear);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                return parsedDate;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            } catch (DateTimeParseException e1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                throw new ParseException(Timestamp.MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses {@code String period} into a {@code Period}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the given {@code period} is invalid."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static Period parsePeriod(String period) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String trimmedPeriod \u003d period.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        switch (trimmedPeriod) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return Period.ofWeeks(1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return Period.ofMonths(1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"year\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return Period.ofYears(1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(Timestamp.MESSAGE_CONSTRAINTS_PERIOD);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 35,
      "czkay": 8,
      "anqichen9856": 54,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.UniqueBudgetList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.UniqueEventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueExpenseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Duplicates are not allowed (by .isSameExpense comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final UniqueExpenseList expenses;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final UniqueBudgetList budgets;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * avoid duplication among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Creates an AddressBook using the Expenses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.budgets.setBudgets(budgets);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setPrimary(Budget budget) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.setPrimary(budget);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        setBudgets(newData.getBudgetList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //// expense-level operations"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if an expense with the same identity as {@code expense}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * exists in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds an expense to the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense must not already exist in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void addExpense(Expense p) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses.add(p);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget primaryBudget \u003d budgets.getPrimaryBudget();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (primaryBudget \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        boolean expenseDateWithinBudget \u003d p.getDate().isBefore(primaryBudget.getEndDate())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 (p.getDate().isAfter(primaryBudget.getStartDate())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    || p.getDate().isEqual(primaryBudget.getStartDate()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (expenseDateWithinBudget) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            primaryBudget.addExpense(p);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * expense in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if a budget with the same identity as {@code budget}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * exists in Moolah."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budgets.contains(budget);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds a budget to Moolah."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * The budget must not already exist in Moolah."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.add(budget);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if an event with the same identity as {@code event}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * exists in the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 expenses.equals(((AddressBook) other).expenses));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 26,
      "briyanii": 36,
      "anqichen9856": 48,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI SETTINGS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ALIAS SETTINGS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Return\u0027s the user prefs\u0027 alias mappings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    AliasMappings getAliasMappings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the user prefs\u0027 alias mappings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void setAliasMappings(AliasMappings aliasMappings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Add a user defined alias to the user prefs\u0027 alias mappings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void addUserAlias(Alias alias);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADDRESS BOOK SETTINGS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADDRESS BOOK ACTIONS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * exists in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code expense} must not already exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * existing expense in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    boolean hasBudget(Budget budget);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void addBudget(Budget budget);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void setPrimary(Budget budget);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czkay"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "czkay"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "czkay"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 42,
      "czkay": 16,
      "anqichen9856": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.addressBook.getExpenseList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasMappings getAliasMappings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return userPrefs.getAliasMappings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setAliasMappings(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasMappings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userPrefs.setAliasMappings(aliasMappings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void addUserAlias(Alias alias) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userPrefs.addUserAlias(alias);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return addressBook.hasExpense(expense);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        addressBook.removeExpense(target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        addressBook.addExpense(expense);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        addressBook.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return addressBook.hasBudget(budget);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        addressBook.addBudget(budget);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setPrimary(Budget budget) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        addressBook.setPrimary(budget);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return addressBook.hasEvent(event);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        addressBook.removeEvent(target);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "czkay"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "czkay"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        addressBook.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "czkay"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 filteredExpenses.equals(other.filteredExpenses)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 38,
      "czkay": 32,
      "anqichen9856": 11,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * This list will not contain any duplicate expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 2,
      "briyanii": 4,
      "anqichen9856": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    AliasMappings getAliasMappings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Alias getAlias(String aliasName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean hasAlias(String aliasName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean aliasNameIsReserved(String aliasName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean aliasCommandWordIsAlias(String commandWord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 12,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Timekeeper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Compares system time with upcoming Events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Timekeeper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final LocalDate SYSTEM_DATE \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final long THRESHOLD \u003d 7;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private ObservableList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timekeeper(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public List\u003cReminder\u003e getReminders() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Optional\u003cReminder\u003e potentialReminder \u003d createReminderIfValid(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (potentialReminder.isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "                reminders.add(potentialReminder.get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Dummy."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param event dummy."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static Optional\u003cReminder\u003e createReminderIfValid(Event event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        LocalDate timestamp \u003d event.getTimestamp().timestamp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "        long daysLeft \u003d SYSTEM_DATE.until(timestamp, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String totalTimeDifference \u003d String.format(\"%d days\", daysLeft);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return (isUrgent(daysLeft)) ? Optional.of(new Reminder(event, totalTimeDifference)) : Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static boolean isUrgent(long daysLeft) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return daysLeft \u003c THRESHOLD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        setAliasMappings(newUserPrefs.getAliasMappings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasMappings getAliasMappings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasMappings;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setAliasMappings(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasMappings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasMappings \u003d aliasMappings;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Add a user defined {@code Alias} to the user prefs\u0027 {@code AliasMappings}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param alias"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void addUserAlias(Alias alias) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasMappings \u003d aliasMappings.addAlias(alias);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Alias getAlias(String aliasName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this.aliasMappings.getAlias(aliasName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean hasAlias(String aliasName) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this.aliasMappings.aliasExists(aliasName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the {@code String aliasName} is a reserved command word, and false otherwise."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasNameIsReserved(String aliasName) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this.aliasMappings.aliasNameIsReserved(aliasName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the {@code String commandWord} of an {@code Alias} is an alias name mapped to an"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * existing {@code Alias}, and false otherwise."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasCommandWordIsAlias(String commandWord) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(commandWord);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this.aliasMappings.aliasCommandWordIsAlias(commandWord);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 aliasMappings.equals(o.aliasMappings);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, aliasMappings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 52,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a Budget in Moolah."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Period period;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Price amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final List\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private boolean isPrimary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget(Description description, Price amount, LocalDate startDate, Period period) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(description, startDate, period, amount);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.endDate \u003d startDate.plus(period);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.isPrimary \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Period getPeriod() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return period;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Price getAmount() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public List\u003cExpense\u003e getExpenses() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addExpense(Expense e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.add(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Checks whether the budget is exceeded."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isExceeded() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            sum \u003d sum + expenses.get(i).getPrice().getAsDouble();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return sum \u003e amount.getAsDouble();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isPrimary() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return isPrimary;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setPrimary() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        isPrimary \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setNotPrimary() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        isPrimary \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if both budgets have the same description, amount, start date and period."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isSameBudget(Budget otherBudget) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (otherBudget \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return otherBudget !\u003d null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.getPeriod().equals(getPeriod());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return otherBudget.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.getPeriod().equals(getPeriod())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.isPrimary() \u003d\u003d isPrimary()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.getExpenses().equals(getExpenses());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Objects.hash(description, startDate, period, amount);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        builder.append(\"|| Description: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\" Period: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(getPeriod())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\" Start date: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\" End date: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\"||\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/UniqueBudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A list of budgets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A budget is considered unique by comparing using {@code Budget#isSameBudget(Budget)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * As such, adding and updating of budgets use Budget#isSameBudget(Budget) for equality so"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * as to ensure that the budget being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * the UniqueBudgetList. However, the removal of a budget uses Budget#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * as to ensure that the budget with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * @see Budget#isSameBudget(Budget)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class UniqueBudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if the list contains an equivalent budget as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean contains(Budget toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBudget);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds a budget to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * The budget must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void add(Budget toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets(UniqueBudgetList replacement) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!budgetsAreUnique(budgets)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        internalList.setAll(budgets);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setPrimary(Budget budget) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(budget);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Budget b \u003d internalList.get(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (b.isPrimary() \u003d\u003d true) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                b.setNotPrimary();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budget.setPrimary();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget getPrimaryBudget() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget primaryBudget \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Budget b \u003d internalList.get(i);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (b.isPrimary() \u003d\u003d true) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                primaryBudget \u003d b;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return primaryBudget;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ObservableList\u003cBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || (other instanceof UniqueBudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueBudgetList) other).internalList));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if {@code budgets} contains only unique budgets."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private boolean budgetsAreUnique(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (int i \u003d 0; i \u003c budgets.size() - 1; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            for (int j \u003d i + 1; j \u003c budgets.size(); j++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                if (budgets.get(i).isSameBudget(budgets.get(j))) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/exceptions/DuplicateBudgetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Signals that the operation will result in duplicate Budgets (Budgets are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DuplicateBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DuplicateBudgetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(\"Operation would result in duplicate budgets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a Expense\u0027s description in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"Descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\s]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public final String fullDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        fullDescription \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .containsWordIgnoreCase(expense.getDescription().fullDescription, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Represents a Expense in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Timestamp timestamp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    // private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Event(Description description, Price price, Timestamp timestamp) { // Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireAllNonNull(description, price, timestamp);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // this.tags.addAll(tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp getTimestamp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return timestamp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //     * if modification is attempted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if both expenses of the same description have at least one other identity field that is the same."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * This defines a weaker notion of equality between two expenses."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 (otherEvent.getPrice().equals(getPrice()))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 (otherEvent.getTimestamp().equals(getTimestamp()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if both expenses have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 otherEvent.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "                // \u0026\u0026 otherEvent.getTags().equals(getTags())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 (otherEvent.getTimestamp().equals(getTimestamp()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return Objects.hash(description, price, timestamp); // , tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "        builder.append(\"|| Description: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(\" Timestamp: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(getTimestamp());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // .append(\" Tags: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "        builder.append(\"||\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a Expense in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final UniqueIdentifier uniqueIdentifier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Expense(Description description, Price price, Set\u003cTag\u003e tags, UniqueIdentifier uniqueIdentifier) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireAllNonNull(description, price, tags, uniqueIdentifier);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public UniqueIdentifier getUniqueIdentifier() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return uniqueIdentifier;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if both expenses of the same unique identifier."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * This defines a weaker notion of equality between two expenses."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean isSameExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 otherExpense.getUniqueIdentifier().equals(getUniqueIdentifier());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if both expenses have the same unique identifier and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return otherExpense.getUniqueIdentifier().equals(getUniqueIdentifier())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 otherExpense.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 otherExpense.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Objects.hash(description, price, tags, uniqueIdentifier);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        builder.append(\"Expense: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(\" [Tags: \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        builder.append(\"]\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 108,
      "anqichen9856": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Price.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a Expense\u0027s price in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"Prices should only contain numeric characters, which can be followed by at most\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" 1 period or comma followed by the numbers representing the cents\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+([,.]\\\\d+)?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        value \u003d price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public double getAsDouble() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Double.parseDouble(value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 54,
      "anqichen9856": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A reminder of an upcoming task that the user had inputted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private String totalTimeDifference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Reminder(Event event, String totalTimeDifference) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.totalTimeDifference \u003d totalTimeDifference;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Formats the reminder into a readable form for the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The reminder message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \"You have %s left to complete the task: %s!\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "                totalTimeDifference, event.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Timestamp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Represents a Expense\u0027s description in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTimestamp(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Timestamp {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_DATE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            \"Timestamps must be in the format dd-MM[-yyyy]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_PERIOD \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            \"Input period is not week/month/year\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public final LocalDate timestamp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param rawTimestamp A valid description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp(String rawTimestamp) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(rawTimestamp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        checkArgument(isValidTimestamp(rawTimestamp), MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "        timestamp \u003d LocalDate.parse(rawTimestamp, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static boolean isValidTimestamp(String test) { // TBI"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "            LocalDate.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return timestamp.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || (other instanceof Timestamp // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 timestamp.equals(((Timestamp) other).timestamp)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return timestamp.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 57,
      "anqichen9856": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/UniqueEventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A list of expenses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A expense is considered unique by comparing using {@code Expense#isSameExpense(Expense)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": " * As such, adding and updating of expenses uses Expense#isSameExpense(Expense) for equality so"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": " * as to ensure that the expense being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": " * the UniqueExpenseList. However, the removal of a expense uses Expense#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": " * as to ensure that the expense with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new DuplicateEventException(); // rmb to add DuplicateEventException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    IMPLEMENT AFTER WK 7"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        if (!target.isSameExpense(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    } IMPLEMENT AFTER WK 7"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    IMPLEMENT AFTER WK 7"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    } IMPLEMENT AFTER WK 7"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "czkay"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "czkay"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "czkay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "czkay": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/UniqueExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A list of expenses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A expense is considered unique by comparing using {@code Expense#isSameExpense(Expense)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * As such, adding and updating of expenses uses Expense#isSameExpense(Expense) for equality so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * as to ensure that the expense being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * the UniqueExpenseList. However, the removal of a expense uses Expense#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * as to ensure that the expense with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * @see Expense#isSameExpense(Expense)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class UniqueExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpense);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!target.isSameExpense(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses(UniqueExpenseList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!expensesAreUnique(expenses)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof UniqueExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueExpenseList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if {@code expenses} contains only unique expenses."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private boolean expensesAreUnique(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenses.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (expenses.get(i).isSameExpense(expenses.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 138,
      "anqichen9856": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/UniqueIdentifier.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a Expense\u0027s unique identifier in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUniqueIdentifier(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class UniqueIdentifier {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"A unique identifier should begin with the prefix \\\u0027Expense@\\\u0027, followed by a 36 character\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" Universally Unique Identifier which consits of a sequence of up of hex digits (4 chars each)\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" and 4 “-” symbols. More specifically a sequence of \u003c8 hex digits\u003e, \u003c4 hex digit\u003e,\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" \u003c4 hex digits\u003e, \u003c4 hex digits\u003e, and \u003c12 hex digits\u003e with a dash in between each.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String UNIQUE_IDENTIFIER_PREFIX \u003d \"Expense@\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String UUID_VALIDATION_REGEX \u003d \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}+-[0-9a-f]{4}-[0-9a-f]{12}\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d UNIQUE_IDENTIFIER_PREFIX + UUID_VALIDATION_REGEX;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code UniqueIdentifier}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param uniqueIdentifier A valid unique identifier."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public UniqueIdentifier(String uniqueIdentifier) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(uniqueIdentifier);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidUniqueIdentifier(uniqueIdentifier), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        value \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if a given string is a valid unique identifier."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidUniqueIdentifier(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof UniqueIdentifier // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 value.equals(((UniqueIdentifier) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/DuplicateEventException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Signals that the operation will result in duplicate Expenses (Expenses are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/DuplicateExpenseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Signals that the operation will result in duplicate Expenses (Expenses are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DuplicateExpenseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DuplicateExpenseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(\"Operation would result in duplicate expenses\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/ExpenseNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/util/UniqueIdentifierGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.model.expense.UniqueIdentifier.UNIQUE_IDENTIFIER_PREFIX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueIdentifier;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class to generate random unique identifiers for an {@code Expense}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class UniqueIdentifierGenerator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Generates a random unique identifier consisting of a version 4 universally unique identifier (UUID)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * prefixed with \u0027Expense@\u0027 e.g. Expense@13f213ea-0012-678c-c301-12ca22v21344."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static UniqueIdentifier generateRandomUniqueIdentifier() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueIdentifier uniqueIdentifier \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new UniqueIdentifier(UNIQUE_IDENTIFIER_PREFIX + UUID.randomUUID().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return uniqueIdentifier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.util.UniqueIdentifierGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Expense[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"Chickens\"), new Price(\"30\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    getTagSet(\"friends\"), UniqueIdentifierGenerator.generateRandomUniqueIdentifier()),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"Chicken Rice\"), new Price(\"2.50\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    getTagSet(\"nusDeck\", \"oldFriends\"), UniqueIdentifierGenerator.generateRandomUniqueIdentifier()),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"Popcorn Chicken\"), new Price(\"12\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    getTagSet(\"fairprice\", \"frozen\"), UniqueIdentifierGenerator.generateRandomUniqueIdentifier()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"David Li\"), new Price(\"15000\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                getTagSet(\"family\"), UniqueIdentifierGenerator.generateRandomUniqueIdentifier()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"Invite only Chicken Event\"), new Price(\"1000\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                getTagSet(\"chickenNetworking\"), UniqueIdentifierGenerator.generateRandomUniqueIdentifier()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"Chicken Rice extra Chicken\"), new Price(\"15\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                getTagSet(\"nusDeck\"), UniqueIdentifierGenerator.generateRandomUniqueIdentifier())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            sampleAb.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 22,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final String rawTimestamp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "    // private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "                              @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "                              @JsonProperty(\"timestamp\") String rawTimestamp) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.rawTimestamp \u003d rawTimestamp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "        rawTimestamp \u003d source.getTimestamp().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //        final List\u003cTag\u003e expenseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //            expenseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (rawTimestamp \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!Timestamp.isValidTimestamp(rawTimestamp)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException(Timestamp.MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Timestamp modelTimestamp \u003d new Timestamp(rawTimestamp);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(expenseTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new Event(modelDescription, modelPrice, modelTimestamp);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 100,
      "anqichen9856": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueIdentifier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String uniqueIdentifier;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                              @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                              @JsonProperty(\"uniqueIdentifier\") String uniqueIdentifier) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueIdentifier \u003d source.getUniqueIdentifier().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final List\u003cTag\u003e expenseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            expenseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (uniqueIdentifier \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, UniqueIdentifier.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!UniqueIdentifier.isValidUniqueIdentifier(uniqueIdentifier)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException(UniqueIdentifier.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final UniqueIdentifier modelUniqueIdentifier \u003d new UniqueIdentifier(uniqueIdentifier);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(expenseTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Expense(modelDescription, modelPrice, modelTags, modelUniqueIdentifier);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"Expenses list contains duplicate expense(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given expenses."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "                                       @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (addressBook.hasExpense(expense)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            addressBook.addExpense(expense);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 14,
      "briyanii": 11,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private HBox priceColumn;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        index.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        description.setText(expense.getDescription().fullDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        price.setText(\"$\" + expense.getPrice().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expense.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return index.getText().equals(card.index.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 20,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenseListPanelPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Displays Reminders of the user\u0027s upcoming Events."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void displayReminders() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // should not be formatting Reminders to Strings here, fix later"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cReminder\u003e reminders \u003d logic.getReminders();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "czkay"
        },
        "content": "        StringBuilder remindersMessage \u003d new StringBuilder(\"These are your upcoming events:\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (Reminder reminder: reminders) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "czkay"
        },
        "content": "            remindersMessage.append(\"\\n\" + reminder.toString());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // resultDisplay.setFeedbackToUser(\"hi\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "czkay"
        },
        "content": "        resultDisplay.setFeedbackToUser(remindersMessage.toString());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 18,
      "briyanii": 6,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.awt.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 2,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "            mainWindow.displayReminders();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 1,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"SOMETIMES\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"80\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"80\" percentWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cVBox GridPane.columnIndex\u003d\"0\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" \u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "              \u003cLabel fx:id\u003d\"index\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                  \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                  \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "              \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "              \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cHBox fx:id\u003d\"priceColumn\" id\u003d\"price-column\" GridPane.columnIndex\u003d\"1\" minHeight\u003d\"105\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" text\u003d\"\\$price\" minHeight\u003d\"105\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 41
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "  \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "      \u003cminWidth\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_COMPUTED_SIZE\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "      \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "  \u003c/ListView\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cfx:root maximized\u003d\"true\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "      \u003cVBox minWidth\u003d\"160\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cVBox fx:id\u003d\"expenseList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "          \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 3,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/AliasMappingsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_ADD_WITH_ARGUMENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_A_TO_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class AliasMappingsTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void aliasExists() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        aliasMappings.addAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        aliasMappings.aliasExists(ALIAS_A_TO_B.getAliasName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void aliasNameIsReserved() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasNameIsReserved(\"add\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasNameIsReserved(\"alias\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasNameIsReserved(\"delete\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasNameIsReserved(\"edit\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasNameIsReserved(\"exit\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasNameIsReserved(\"find\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasNameIsReserved(\"help\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasNameIsReserved(\"list\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(aliasMappings.aliasNameIsReserved(\"somethingelse\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void aliasCommandWordIsAlias() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // returns true after alias with that name is added, false before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(new AliasMappings().aliasCommandWordIsAlias(\"a\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new AliasMappings().addAlias(ALIAS_A_TO_B)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .aliasCommandWordIsAlias(ALIAS_A_TO_B.getAliasName()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings empty \u003d new AliasMappings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings empty2 \u003d new AliasMappings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings oneAlias \u003d empty.addAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings oneAlias2 \u003d empty2.addAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings oneAlias3 \u003d empty.addAlias(new Alias(\"a\", \"b\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings oneAlias4 \u003d new AliasMappings().addAlias(ALIAS_ADD_WITH_ARGUMENTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different empty -\u003e true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(empty, empty2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different empty add same -\u003e true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(oneAlias, oneAlias2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same empty add similar -\u003e true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(oneAlias, oneAlias3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different alias inside -\u003e false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(empty, oneAlias);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(oneAlias, oneAlias4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/AliasTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_A_TO_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class AliasTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_ALIAS_NAME_1 \u003d \"name\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_ALIAS_NAME_2 \u003d \"nAm3\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String INVALID_ALIAS_NAME \u003d \"n@#é\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_INPUT \u003d \"  7n1293jmj98(*@##*ybC (@*8 @9n wkdnqwdk   \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String WHITE_SPACE \u003d \"     \\n \\t  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //same alias"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(ALIAS_A_TO_B, ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //same inputs"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(new Alias(VALID_ALIAS_NAME_1, VALID_INPUT), new Alias(VALID_ALIAS_NAME_1, VALID_INPUT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //null false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(ALIAS_A_TO_B, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //not instance false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(ALIAS_A_TO_B, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidAliasName_validAliasName_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Alias.isValidAliasName(VALID_ALIAS_NAME_1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Alias.isValidAliasName(VALID_ALIAS_NAME_2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidAliasName_invalidAliasName_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Alias.isValidAliasName(INVALID_ALIAS_NAME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Alias.isValidAliasName(WHITE_SPACE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidInput_validInput_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Alias.isValidInput(VALID_INPUT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidInput_invalidInput_returnFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Alias.isValidInput(WHITE_SPACE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final Index fifthExpenseIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(fifthExpenseIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Timekeeper timekeeper \u003d new Timekeeper(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        logic \u003d new LogicManager(model, storage, timekeeper);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //                new JsonAddressBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //                        temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        Timekeeper timekeeper \u003d new Timekeeper(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        logic \u003d new LogicManager(model, storage, timekeeper);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    // Execute add command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        String addCommand \u003d AddCommand.COMMAND_WORD + DESCRIPTION_DESC_CHICKEN + PRICE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        Expense expectedExpense \u003d new ExpenseBuilder(CHICKEN).withTags().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        expectedModel.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 4,
      "czkay": 21,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // No addCommand should not be the same as another addCommand, odds are unlikely because of use of UUID"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseInList \u003d model.getAddressBook().getExpenseList().get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandFailure(new AddCommand(expenseInList), model, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExpense).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validExpense);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExpense(validExpense);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_EXPENSE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense alice \u003d new ExpenseBuilder().withDescription(\"Alice\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense bob \u003d new ExpenseBuilder().withDescription(\"Bob\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void setAliasMappings(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public AliasMappings getAliasMappings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void addUserAlias(Alias alias) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setPrimary(Budget budget) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * A Model stub that contains a single expense."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private class ModelStubWithExpense extends ModelStub {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ModelStubWithExpense(Expense expense) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return this.expense.isSameExpense(expense);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return expensesAdded.stream().anyMatch(expense::isSameExpense);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 58,
      "czkay": 6,
      "anqichen9856": 16,
      "-": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AliasCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_A_TO_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_B_TO_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.AliasTestUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AliasCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasCommand validAliasCommandOne \u003d new AliasCommand(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasCommand validAliasCommandTwo \u003d new AliasCommand(ALIAS_B_TO_C);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(validAliasCommandOne.equals(validAliasCommandOne));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same alias -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasCommand validAliasCommandOneCopy \u003d new AliasCommand(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(validAliasCommandOne.equals(validAliasCommandOneCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(validAliasCommandOne.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(validAliasCommandOne.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different alias -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(validAliasCommandOne.equals(validAliasCommandTwo));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_aliasNameIsReservedCommandWord_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasCommand command \u003d new AliasCommand(AliasTestUtil.ALIAS_NAME_ADD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_aliasCommandWordIsAlias_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasCommand command \u003d new AliasCommand(AliasTestUtil.ALIAS_TO_ALIAS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_aliasCommandIsValid_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.addUserAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new AliasCommand(ALIAS_A_TO_B), model,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(AliasCommand.MESSAGE_SUCCESS, ALIAS_A_TO_B.getAliasName()), expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_DESCRIPTION_CHICKEN \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_DESCRIPTION_TRANSPORT \u003d \"Taxi to work\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_PRICE_CHICKEN \u003d \"11111.11\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_PRICE_TRANSPORT \u003d \"222,22222\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_TAG_CLAIMABLE \u003d \"toClaimFromWork\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_TAG_DISCOUNTED \u003d \"usedCouponCode\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_UNIQUE_IDENTIFIER \u003d \"Expense@12341234-1234-1234-1234-123412341234\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DESCRIPTION_DESC_CHICKEN \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CHICKEN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DESCRIPTION_DESC_TRANSPORT \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String PRICE_DESC_CHICKEN \u003d \" \" + PREFIX_PRICE + VALID_PRICE_CHICKEN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String PRICE_DESC_TRANSPORT \u003d \" \" + PREFIX_PRICE + VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String TAG_DESC_CLAIMABLE \u003d \" \" + PREFIX_TAG + VALID_TAG_DISCOUNTED;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String TAG_DESC_DISCOUNTED \u003d \" \" + PREFIX_TAG + VALID_TAG_CLAIMABLE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in descriptions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"James\u0026\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u0027a\u0027 not allowed in prices"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"911a\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_CHICKEN;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_TRANSPORT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DESC_CHICKEN \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_CHICKEN)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_CHICKEN)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withTags(VALID_TAG_DISCOUNTED).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DESC_TRANSPORT \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_TRANSPORT)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withTags(VALID_TAG_CLAIMABLE, VALID_TAG_DISCOUNTED).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * - the address book, filtered expense list and selected expense in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final String[] splitDescription \u003d expense.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitDescription[0])));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 42,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showNoExpense(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                outOfBoundIndex.getZeroBased()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c model.getAddressBook().getExpenseList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void showNoExpense(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(model.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 30,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TRANSPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CLAIMABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ExpenseBuilder expenseInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d expenseInList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withTags(VALID_TAG_CLAIMABLE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withTags(VALID_TAG_CLAIMABLE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.setExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, new EditExpenseDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseInFilteredList \u003d model"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .getFilteredExpenseList()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(expenseInFilteredList)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TRANSPORT).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Editing an expense to have the same details as another should not result in failure"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_invalidExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_invalidExpenseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getExpenseList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_TRANSPORT).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, DESC_CHICKEN);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor copyDescriptor \u003d new EditExpenseDescriptor(DESC_CHICKEN);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EXPENSE, copyDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EXPENSE, DESC_CHICKEN)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EXPENSE, DESC_TRANSPORT)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 63,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExpenseDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TRANSPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CLAIMABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class EditExpenseDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptorWithSameValues \u003d new EditExpenseDescriptor(DESC_CHICKEN);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(DESC_CHICKEN.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(DESC_CHICKEN.equals(DESC_CHICKEN));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(DESC_TRANSPORT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_CHICKEN)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_CHICKEN).withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_CHICKEN).withTags(VALID_TAG_CLAIMABLE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CHICKEN_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ENTERTAINMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FASHION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_zeroKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void execute_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"the Chicken Movie\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(Arrays.asList(CHICKEN_RICE, ENTERTAINMENT, FASHION), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 24,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CLAIMABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DISCOUNTED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DISCOUNTED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // addCommand should never return a same command as another, so cannot check if the command is same as expected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_TRANSPORT + PRICE_DESC_TRANSPORT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // missing price prefix"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_TRANSPORT + VALID_PRICE_TRANSPORT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_TRANSPORT + VALID_PRICE_TRANSPORT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                INVALID_DESCRIPTION_DESC + PRICE_DESC_TRANSPORT"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        + TAG_DESC_DISCOUNTED + TAG_DESC_CLAIMABLE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DESCRIPTION_DESC_TRANSPORT + INVALID_PRICE_DESC"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        + TAG_DESC_DISCOUNTED + TAG_DESC_CLAIMABLE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_TRANSPORT + PRICE_DESC_TRANSPORT"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_DISCOUNTED, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + PRICE_DESC_TRANSPORT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_TRANSPORT + PRICE_DESC_TRANSPORT"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        + TAG_DESC_DISCOUNTED + TAG_DESC_CLAIMABLE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 34,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.AliasTestUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final AddressBookParser parser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final ReadOnlyUserPrefs readOnlyUserPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AddressBookParserTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userPrefs.setAliasMappings(AliasTestUtil.VALID_ALIAS_MAPPINGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        readOnlyUserPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // parseCommand_add should return the same command as another addCommand even with the same arguments"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseCommand_alias() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasCommand aliasCommand \u003d (AliasCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AliasCommand.COMMAND_WORD + \" \" + \"a b\", readOnlyUserPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(aliasCommand, new AliasCommand(AliasTestUtil.ALIAS_A_TO_B));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, readOnlyUserPrefs) instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", readOnlyUserPrefs) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased(), readOnlyUserPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + ExpenseUtil.getEditExpenseDescriptorDetails(descriptor),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                readOnlyUserPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EXPENSE, descriptor), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, readOnlyUserPrefs) instanceof ExitCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", readOnlyUserPrefs) instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")), readOnlyUserPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(new FindCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, readOnlyUserPrefs) instanceof HelpCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", readOnlyUserPrefs) instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, readOnlyUserPrefs) instanceof ListCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\", readOnlyUserPrefs) instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            -\u003e parser.parseCommand(\"\", readOnlyUserPrefs));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\", readOnlyUserPrefs));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 46,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AliasCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AliasCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AliasCommandParser parser \u003d new AliasCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // missing alias name and input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // missing input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"nothing\", expectedMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid aliasname"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"#asd@## nothing\", Alias.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"name input\", new AliasCommand(new Alias(\"name\", \"input\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"name input input\", new AliasCommand(new Alias(\"name\", \"input input\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHICKEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CLAIMABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DISCOUNTED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHICKEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHICKEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CLAIMABLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DISCOUNTED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_CHICKEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DESCRIPTION_DESC_CHICKEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"0\" + DESCRIPTION_DESC_CHICKEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"1\" + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS); // invalid price"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid price followed by valid email"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser, \"1\" + INVALID_PRICE_DESC + VALID_DESCRIPTION_CHICKEN, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // valid price followed by invalid price. The test case for invalid price followed by valid price"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"1\" + PRICE_DESC_TRANSPORT + INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expense} being edited,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"1\" + TAG_DESC_CLAIMABLE + TAG_DESC_DISCOUNTED + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"1\" + TAG_DESC_CLAIMABLE + TAG_EMPTY + TAG_DESC_DISCOUNTED, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"1\" + TAG_EMPTY + TAG_DESC_CLAIMABLE + TAG_DESC_DISCOUNTED, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"1\" + INVALID_DESCRIPTION_DESC + INVALID_PRICE_DESC"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        + INVALID_DESCRIPTION_DESC + VALID_PRICE_CHICKEN,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_TRANSPORT + TAG_DESC_DISCOUNTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                + DESCRIPTION_DESC_CHICKEN + TAG_DESC_CLAIMABLE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHICKEN)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withTags(VALID_TAG_CLAIMABLE, VALID_TAG_DISCOUNTED).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_CHICKEN;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHICKEN).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // price"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withPrice(VALID_PRICE_CHICKEN).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CLAIMABLE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withTags(VALID_TAG_DISCOUNTED).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_CHICKEN + TAG_DESC_CLAIMABLE"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                + PRICE_DESC_CHICKEN + TAG_DESC_CLAIMABLE + PRICE_DESC_TRANSPORT + TAG_DESC_DISCOUNTED;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withTags(VALID_TAG_DISCOUNTED, VALID_TAG_CLAIMABLE)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PRICE_DESC + PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PRICE_DESC + PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 82,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"J4()\\\\|\\\\\\\\|nyVV@1k3r\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_PRICE \u003d \",1234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Johnny Walker\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_PRICE \u003d \"12.3456\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_ALIAS_NAME_1 \u003d \"name\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_ALIAS_INPUT_1 \u003d \"input\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_ALIAS_NAME_1 \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_ALIAS_NAME_2 \u003d \"@#*j\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_ALIAS_INPUT_1 \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parsePrice_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePrice((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parsePrice_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePrice(INVALID_PRICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parsePrice_validValueWithoutWhitespace_returnsPrice() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(VALID_PRICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parsePrice_validValueWithWhitespace_returnsTrimmedPrice() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String priceWithWhitespace \u003d WHITESPACE + VALID_PRICE + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(priceWithWhitespace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void parseAlias_validInput_returnsAlias() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Alias expectedAlias \u003d new Alias(VALID_ALIAS_NAME_1, VALID_ALIAS_INPUT_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(ParserUtil.parseAlias(VALID_ALIAS_NAME_1, VALID_ALIAS_INPUT_1), expectedAlias);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void parseAlias_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // non alphanumeric name"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias(INVALID_ALIAS_NAME_1, VALID_ALIAS_INPUT_1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // space in name"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                VALID_ALIAS_NAME_1 + WHITESPACE + VALID_ALIAS_NAME_1,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                VALID_ALIAS_INPUT_1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // empty name"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                VALID_ALIAS_INPUT_1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // white space input"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                VALID_ALIAS_NAME_1,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                WHITESPACE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // both invalid"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                INVALID_ALIAS_NAME_2,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                WHITESPACE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 72,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CLAIMABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getExpenseList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void resetData_withDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Two expenses with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(ANNIVERSARY).withTags(VALID_TAG_CLAIMABLE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e newExpenses \u003d Arrays.asList(ANNIVERSARY, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newExpenses);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasExpense(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hasExpense_expenseNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(addressBook.hasExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hasExpense_expenseInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        addressBook.addExpense(ANNIVERSARY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(addressBook.hasExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //public void hasExpense_expenseWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    addressBook.addExpense(ANNIVERSARY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    Expense editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_CLAIMABLE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    assertTrue(addressBook.hasExpense(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getExpenseList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * A stub ReadOnlyAddressBook whose expenses list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        private final ObservableList\u003cBudget\u003e budgets \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddressBookStub(Collection\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "            // this.events.setAll(events);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 36,
      "czkay": 5,
      "anqichen9856": 6,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BUSAN_TRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpense(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hasExpense_expenseNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(modelManager.hasExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hasExpense_expenseInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        modelManager.addExpense(ANNIVERSARY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(modelManager.hasExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withExpense(ANNIVERSARY).withExpense(BUSAN_TRIP).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] keywords \u003d ANNIVERSARY.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        modelManager.updateFilteredExpenseList(new DescriptionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        modelManager.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 17,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setAliasMappings_nullAliasMappings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAliasMappings(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 5,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Keywords match price, but does not match description"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12345\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice\").withPrice(\"12345\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Description.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long descriptions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHICKEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CLAIMABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DISCOUNTED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UNIQUE_IDENTIFIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TRANSPORT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expense.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.isSameExpense(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different price -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different description -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different tag -\u003e return true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withTags(VALID_TAG_CLAIMABLE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //different price, tag, and description -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_CHICKEN)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHICKEN)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withTags(VALID_TAG_DISCOUNTED).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same everything except different unique identifier -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withUniqueIdentifier(VALID_UNIQUE_IDENTIFIER).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense aliceCopy \u003d new ExpenseBuilder(ANNIVERSARY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.equals(aliceCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.equals(ANNIVERSARY));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(TRANSPORT));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(ANNIVERSARY).withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY).withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY).withTags(VALID_TAG_CLAIMABLE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 55,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/PriceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid prices"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312,\")); // end with comma"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312.\")); // end with period"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\".9312\")); // begin with period"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\",9312\")); // begin with comma"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9,3.12\")); // multiple commas"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9.31.2\")); // multiple periods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9,.312\")); // period and comma"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"-9123\")); // negative"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // valid prices"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"0\")); // price is 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"91\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"93121534\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"931,21534\")); // comma"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"931.21534\")); // period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"93121534\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"124293842033123\")); // long prices"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/UniqueExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class UniqueExpenseListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final UniqueExpenseList uniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void contains_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void contains_expenseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(uniqueExpenseList.contains(ANNIVERSARY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void contains_expenseInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(ANNIVERSARY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void add_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.add(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void add_duplicateExpense_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.add(ANNIVERSARY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(null, ANNIVERSARY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(ANNIVERSARY, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.setExpense(ANNIVERSARY, ANNIVERSARY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_editedExpenseIsSameExpense_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.setExpense(ANNIVERSARY, ANNIVERSARY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedUniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //TODO: include some sort of expense ID for expense equality"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //public void setExpense_editedExpenseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    Expense editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_CLAIMABLE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    uniqueExpenseList.setExpense(ANNIVERSARY, editedAlice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    expectedUniqueExpenseList.add(editedAlice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_editedExpenseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.setExpense(ANNIVERSARY, TRANSPORT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedUniqueExpenseList.add(TRANSPORT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_editedExpenseHasNonUniqueIdentity_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(TRANSPORT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpense(ANNIVERSARY, TRANSPORT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void remove_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.remove(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void remove_expenseDoesNotExist_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.remove(ANNIVERSARY));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void remove_existingExpense_removesExpense() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.remove(ANNIVERSARY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_nullUniqueExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((UniqueExpenseList) null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_uniqueExpenseList_replacesOwnListWithProvidedUniqueExpenseList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedUniqueExpenseList.add(TRANSPORT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.setExpenses(expectedUniqueExpenseList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((List\u003cExpense\u003e) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e expenseList \u003d Collections.singletonList(TRANSPORT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.setExpenses(expenseList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedUniqueExpenseList.add(TRANSPORT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_listWithDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e listWithDuplicateExpenses \u003d Arrays.asList(ANNIVERSARY, ANNIVERSARY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpenses(listWithDuplicateExpenses));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            -\u003e uniqueExpenseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BUSAN_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueIdentifier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_UNIQUE_IDENTIFIER \u003d \"Expense1245\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BUSAN_TRIP.getDescription().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_PRICE \u003d BUSAN_TRIP.getPrice().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BUSAN_TRIP.getTags().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_UNIQUE_IDENTIFIER \u003d BUSAN_TRIP.getUniqueIdentifier().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(BUSAN_TRIP);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(BUSAN_TRIP, expense.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new JsonAdaptedExpense(INVALID_DESCRIPTION, VALID_PRICE, VALID_TAGS, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new JsonAdaptedExpense(null, VALID_PRICE, VALID_TAGS, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, INVALID_PRICE, VALID_TAGS, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_nullPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, null, VALID_TAGS, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE, invalidTags, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expense::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_invalidUniqueIdentifier_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE, VALID_TAGS, INVALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d UniqueIdentifier.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_nullUniqueIdentifier_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE, VALID_TAGS, null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, UniqueIdentifier.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 55,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.HALLOWEEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.INVESTMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void readAddressBook_invalidExpenseAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidExpenseAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void readAddressBook_invalidAndValidExpenseAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidExpenseAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        original.addExpense(HALLOWEEN);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        original.removeExpense(ANNIVERSARY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        original.addExpense(INVESTMENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 11,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Path TYPICAL_EXPENSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExpensesAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Path INVALID_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpenseAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Path DUPLICATE_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExpenseAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_typicalExpensesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENSES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddressBook typicalExpensesAddressBook \u003d TypicalExpenses.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(addressBookFromFile, typicalExpensesAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_invalidExpenseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENSE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_duplicateExpenses_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXPENSE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_EXPENSE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withExpense(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Adds a new {@code Expense} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AddressBookBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        addressBook.addExpense(expense);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AliasTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHICKEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class representing {@code AliasMappings} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AliasTestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_LIST_SHORTCUT \u003d new Alias(\"ls\", ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_ADD_WITH_ARGUMENTS \u003d new Alias("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"addchicken\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            FindCommand.COMMAND_WORD + DESCRIPTION_DESC_CHICKEN + PRICE_DESC_CHICKEN);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_FIND_SHORTCUT_INCOMPLETE \u003d new Alias (\"f\", FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // for recursive"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_A_TO_B \u003d new Alias(\"a\", \"b\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_B_TO_C \u003d new Alias(\"b\", \"c\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_C_TO_A \u003d new Alias(\"c\", \"a\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_TO_ALIAS \u003d new Alias(\"d\", AliasCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // for alias is reserved"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_ADD \u003d new Alias(AddCommand.COMMAND_WORD, \"a\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_ALIAS \u003d new Alias(AliasCommand.COMMAND_WORD, \"a\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_CLEAR \u003d new Alias(ClearCommand.COMMAND_WORD, \"a\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_DELETE \u003d new Alias(DeleteCommand.COMMAND_WORD, \"a\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_EDIT \u003d new Alias(EditCommand.COMMAND_WORD, \"a\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_EXIT \u003d new Alias(ExitCommand.COMMAND_WORD, \"a\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_FIND \u003d new Alias(FindCommand.COMMAND_WORD, \"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_HELP \u003d new Alias(HelpCommand.COMMAND_WORD, \"a\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_LIST \u003d new Alias(ListCommand.COMMAND_WORD, \"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final AliasMappings VALID_ALIAS_MAPPINGS \u003d new AliasMappings()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .addAlias(ALIAS_LIST_SHORTCUT)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .addAlias(ALIAS_ADD_WITH_ARGUMENTS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .addAlias(ALIAS_FIND_SHORTCUT_INCOMPLETE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .addAlias(ALIAS_A_TO_B)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .addAlias(ALIAS_B_TO_C);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExpenseDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.descriptor \u003d new EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setDescription(expense.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setPrice(expense.getPrice());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setTags(expense.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code Description} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code Price} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setPrice(new Price(price));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenseDescriptor}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueIdentifier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Alices Birthday\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"20\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DEFAULT_UNIQUE_IDENTIFIER \u003d \"Expense@00000000-0000-0000-0000-000000000001\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private UniqueIdentifier uniqueIdentifier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueIdentifier \u003d new UniqueIdentifier(DEFAULT_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        description \u003d expenseToCopy.getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        price \u003d expenseToCopy.getPrice();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(expenseToCopy.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueIdentifier \u003d expenseToCopy.getUniqueIdentifier();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code Description} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code Price} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code UniqueIdentifier} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder withUniqueIdentifier(String uniqueIdentifier) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.uniqueIdentifier \u003d new UniqueIdentifier(uniqueIdentifier);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Expense(description, price, tags, uniqueIdentifier);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an add command string for adding the {@code expense}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String getAddCommand(Expense expense) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + expense.getDescription().fullDescription + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        sb.append(PREFIX_PRICE + expense.getPrice().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expense.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(PREFIX_DESCRIPTION).append(description.fullDescription).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.getPrice().ifPresent(price -\u003e sb.append(PREFIX_PRICE).append(price.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the middle index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the last index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the expense in the {@code model}\u0027s expense list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Expense getExpense(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return model.getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenses.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHICKEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CLAIMABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DISCOUNTED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class containing a list of {@code Expense} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense ANNIVERSARY \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Alices Birthday\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"20\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withTags(\"AnniversaryAndHoliday\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000001\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense BUSAN_TRIP \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Busan Trip\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"1300\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withTags(\"Travel\", \"Korea\", \"Food\", \"Transport\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000002\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense CHICKEN_RICE \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Chicken Rice extra Chicken\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"3.50\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withTags(\"nusDeck\", \"Favourite\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000003\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense DRINKS \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Whiskey and Coke\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"50\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withTags(\"Party\", \"AnniversaryAndHoliday\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000004\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense ENTERTAINMENT \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Marvel Movie Marathon\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"75\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withTags(\"Entertainment\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000005\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense FASHION \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Clothes for the New Year\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"88.88\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000006\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense GROCERIES \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Groceries for September meal preps\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"125.35\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000007\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense HALLOWEEN \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"HalloweenHorrorNight\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"60\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withTags(\"AnniversaryAndHoliday\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000008\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense INVESTMENT \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Property investment\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"1200000\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000009\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense CHICKEN \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CHICKEN)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(VALID_PRICE_CHICKEN)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withTags(VALID_TAG_DISCOUNTED)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-00000000000a\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense TRANSPORT \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_TRANSPORT)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withTags(VALID_TAG_CLAIMABLE, VALID_TAG_DISCOUNTED)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-00000000000b\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private TypicalExpenses() {} // prevents instantiation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical expenses."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            ab.addExpense(expense);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ANNIVERSARY, BUSAN_TRIP, CHICKEN_RICE, DRINKS, ENTERTAINMENT, FASHION, GROCERIES));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 3,
      "-": 9
    }
  },
  {
    "path": "test.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "test file"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1
    }
  }
]
