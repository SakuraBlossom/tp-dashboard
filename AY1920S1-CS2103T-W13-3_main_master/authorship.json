[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckb055"
        },
        "content": "\u003d StudyBuddy (Level 1)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W13-3/main[image:https://travis-ci.org/se-edu/addressbook-level3.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level3?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level3/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckb055"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* StudyBuddy is a desktop app to aid our studies."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* It is intended for *students in the School of Computing* at the *National University of Singapore*."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* Being highly familiar working with CLI, Computing Students can greatly benefit from the app to manage their studies efficiently and faster than traditional GUI apps."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckb055"
        },
        "content": "* This project is built upon the AddressBook-Level3 project created by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ckb055": 7,
      "Sahilgat": 1,
      "-": 30
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "StudyBuddy was developed by the https://github.com/AY1920S1-CS2103T-W13-3[W13-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Lim Yu Rong, Samuel"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::sam-limyr.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "{empty}[http://github.com/Sam-limyr[github]] [\u003c\u003csamuel#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Responsibilities: FiveNotes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Chen Kaibin"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::ckb055.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "{empty}[http://github.com/ckb055[github]] [\u003c\u003ckaibin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Responsibilities: Tagging Implementation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Jasmine Yeo Jia Min"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::jaesimin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "{empty}[http://github.com/jaesimin[github]] [\u003c\u003cjasmine#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Responsibilities: FiveCheat"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Chan Jun Ren"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::chanjunren.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "{empty}[http://github.com/chanjunren[github]] [\u003c\u003cjunren#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Responsibilities: FiveFlash question modes"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "\u003d\u003d\u003d Sahil S/O Sanjeev Gathani"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "image::sahilgat.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "{empty}[http://github.com/Sahilgat[github]] [\u003c\u003csahil#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "Responsibilities: FiveFlash tagging and editing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "Sam-limyr": 23
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* *Email us* : You can also reach our team lead at `limyr.samuel@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 2,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* is a computer science student in NUS"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* is a visual learner that benefits from using flashcards"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "* can benefit from better organization of notes"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "*Value proposition*: integrate flashcards and note compilers for CS students better than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |have as much information on hand as possible |get all the information I have collected and tagged as part of my revision and ensure that I have all the necessary information at hand."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |save time in creating cheatsheet | spend more time on revision"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |tailor the information I have in my cheatsheet |choose which types of tags I want to include in my cheatsheet."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |familiarise with some common programs from the pre-set flashcards in the question bank |learn more useful tips and snippets of information"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |quickly store tutorial questions for revision |just store a screenshot of the question for future reference"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |lighten the weight of my bag |cure my back pain from carrying a heavy bag and still store my notes conveniently."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |find my notes efficiently for reference |write as much notes as possible during studies without worries"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user who constantly misplace notes |keep myself more organized |effectively see what notes are missing"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |sort and skim through long lists of notes quickly |take notes during class without missing out important pointers"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |take charge of my learning by having multiple “filters” or “levels” to my learning |be a proactive learner"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user who is forgetful |practice spaced retention |better memorize and recall the topics"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |better understand or memorize the topics |improve my results"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |university educator teaching multiple modules |easily categorize and organize the notes I create for my students |easily search by the tags for relevant notes"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |make cheatsheets from exams |organize and collate the best pointers to be made into a cheatsheet"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |creatively create and implement notes |be more effective with my studies"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |not take break for too long |be effective with my revision using the pomodoro technique"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |have suggestions on what to do during breaks | be more productive and on-track with tasks"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |make sure that my notes doesn’t miss out important points |collate and compare my notes with my friends’ efficiently"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |be reminded at appropriate times to revise my work |revise regularly and consistently"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |disseminate information efficiently |save the work amongst different teammates"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |better understand or memorize the topics |improve my results"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |connect different parts of questions together | easily link concepts together"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |share notes with my friends and for them to share notes with me, for ease of discussion |be able to study with others"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |answer the questions within a certain time frame |boost my confidence and proficiency in a subject"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |keep track of the harder questions |revise more effectively"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |university educator |keep track of my students\u0027 progress and evaluate who are the stronger/weaker students so they can help each other |help my students do well in their studies"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |university educator |distribute the flashcards I create to my students so they can use them to practice |help my students better memorise and recall my class content"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |university educator |give my students quizzes during lecture using the flashcards | make sure that they will not fall asleep during lecture."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`*` |user |download flashcards from online sources |save time for other revisions"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`*` |user |create notes without papers | save the earth"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "(For all use cases below, the *System* is the `StudyBuddy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d *User story 1:*"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "As a student who is busy with revision and has no time to create a cheatsheet, the cheatsheet"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "generation feature will help me save time on creating cheatsheets and let me spend more time on revision."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 – Create a cheatsheet"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Preconditions: StuddyBuddy application is opened"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser navigates to cheetsheat section."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to create new cheatsheet."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "3.\tStuddyBuddy asks user for new cheatsheet’s title."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4.\tUser inputs new cheatsheet’s title."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "5.\tStuddyBuddy asks user for new cheatsheet’s module."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "6.\tUser inputs new cheatsheet’s module."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "7.\tStuddyBuddy asks for new cheatsheet’s tags."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "8.\tUser inputs new cheatsheet’s tags."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 – List cheatsheets"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Preconditions: StuddyBuddy application is opened"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser navigates to cheetsheat section."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to list all cheatsheet."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "3.\tStudyBuddy displays all cheatsheets."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 – Edit a cheatsheet"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Preconditions: StudyBuddy application is opened, User knows cheatsheet ID"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser navigates to cheetsheat section."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to edit cheatsheet."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "3.\tStudyBuddy asks for cheatsheet ID for cheatsheet to be edited."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4.\tUser inputs cheatsheet ID."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "5.\tStudyBuddy asks for parameters to be edited."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "6.\tUser inputs perimeters to be edited."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "7.\tStudyBuddy displays edited cheatsheet."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 – View a cheatsheet"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Preconditions: StudyBuddy application is opened, User knows cheatsheet ID"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser navigates to cheetsheat section."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to view cheatsheet."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "3.\tStudyBuddy asks for cheatsheet ID for cheatsheet to be viewed."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4.\tUser inputs cheatsheet ID."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "5.\tStudyBuddy displays cheatsheet."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: User story 1"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser _creates cheatsheet (UC01)_."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser _views cheatsheet (UC04)_."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* 2a. User chooses to edit cheatsheet."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2a1. User _edits cheatsheet (UC03)_."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Fix indent}"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d User story 2:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "As a student who finds it very cumbersome to store tutorial questions that I would like to revise, I can make use of the flashcard function to just store a screenshot of the question for future reference."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: UC05 – Create a flashcard from image"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Software system: StudyBuddy, OS"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Preconditions: StudyBuddy application is opened"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser finds a tutorial question he/she would like to revise."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser takes screenshot of tutorial question."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "3.\tOS asks user where screenshot should be saved."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4.\tUser saves screenshot in designated StudyBuddy image folder with custom name."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "5.\tUser opens StudyBuddy application."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "6.\tUser navigates to flashcard section."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "7.\tUser chooses to create new flashcard from image source."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "8.\tStudyBuddy asks user for file name."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "9.\tUser inputs file name."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "10.\tStudyBuddy asks user for flashcard’s answer."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "11.\tUser inputs flashcard’s answer."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "12.\tStudyBuddy asks user for flashcard’s title."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "13.\tUser inputs flashcard’s title."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "14.\tStudyBuddy asks user for flashcard’s module."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15.\tUser inputs flashcard’s module."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "16.\tStudyBuddy displays created flashcard."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* 15a. User wants to input additional flashcard hint."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15a1. User inputs flashcard’s hint."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Todo markup indent}"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case resumes from step 16."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* 15b. User wants to input additional flashcard tags."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15a2. User inputs flashcard’s tags."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Todo markup indent}"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case resumes from step 16."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "* 15c. User wants to input additional hint and tags."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15c1. User inputs flashcard’s hint."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "15c2. User inputs flashcard’s tags."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Todo markup indent}"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case resumes from step 16."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 – Start \u003c\u003ctime-trial,time trial\u003e\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser navigates to flashcard section."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser chooses to start time trial."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "3.\tStudyBuddy asks user for time per flashcard."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "4.\tUser inputs time per flashcard."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "5.\tStudyBuddy asks user for tags to select flashcards for inclusion."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "6.\tUser inputs tags."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "7.\tStudyBuddy starts time trial with specified parameters."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "\u003d\u003d\u003d Use case: User story 2"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "1.\tUser _creates flashcards from image (UC05)_ with tag “tutorial questions”."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "2.\tUser _starts time trial (UC06)_ with tag “tutorial questions”."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "+"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "{Todo delete later}"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ckb055"
        },
        "content": ".  A flashcard cannot have more than 10 tags."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ckb055"
        },
        "content": ".  The product is not required to confirm if the user has answered the flashcard correctly. Instead, the product lets the user checks the answer and determine himself/herself if he/she has answered it correctly."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ckb055"
        },
        "content": ".  The in-built flashcard library is expected to be updated annually, to follow the curriculum of NUS computing modules."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ckb055"
        },
        "content": ".  The command-line syntax should prioritise user-friendliness."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "[[flash-card]] FlashCard::"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "A titled digital \u0027card\u0027 that contains a question (image or text), answer, as well as it\u0027s relevant tags."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "[[cheat-sheet]] Cheatsheet::"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "A document that contains the notes the user has specified during creation"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "[[time-trial]] Time-Trial::"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "A mode of answering flashcards in which you must provide the answer within a deisgnated time period."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chanjunren": 10,
      "jaesimin": 57,
      "ckb055": 4,
      "Sahilgat": 219,
      "-": 412,
      "Sam-limyr": 4
    }
  },
  {
    "path": "docs/OriginalDG.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jaesimin": 427
    }
  },
  {
    "path": "docs/OriginalUG.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d AddressBook Level 3 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "AddressBook Level 3 (AB3) is for those who *prefer to use a desktop app for managing contacts*. More importantly, AB3 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jaesimin": 178
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d StudyBuddy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":source-highlighter: rouge"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "By: `Team AY1920S1-CS2103T-W13-3`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddy Level 1 is for students in the School of Computing at NUS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "that prefer to use a desktop app to help their studies."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "StudyBuddy is also optimized for those who prefer to work with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "a Command Line Interface (CLI) while still having the benefits of a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Graphical User Interface (GUI). Being highly familiar working with CLI,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Computing Students can greatly benefit from the app to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "manage their studies efficiently and faster than traditional GUI apps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003cNOT IN DRAFT\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Command Format / Rules"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Things noted here are standardization of the User Guide."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "These points are absolute, unless stated otherwise in the specific section(s)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "****"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* All commands are written in ENGLISH with no weird symbols."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "E.g. `add \u003ct/TITLE\u003e` -\u003e `TITLE` is a parameter which can be used as `add t/Midterm notes`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Items in square brackets are optional."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "E.g `t/TITLE [t/TAG]` can be used as `t/Midterm note t/exam` or as `t/Midterm`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Items with `...`​ after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "E.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* All flashcards, notes, cheatsheets objects will be given a unique `id` on creation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* All flashcards, notes, cheatsheets objects can have a maximum of 5 `TAG` each."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* All `MODULE` parameters are a `TAG`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* In EDITING (`edit`):"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    ** All optional fields provided, except `t/TAG`, will overwrite their relevant fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    ** `t/TAG` optional field, will be added to the flashcard, if they do not already exist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* In DELETING (`delete`), Confirmation reply of `y` or `n` has to be given, else no objects is deleted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    ** `y` indicates `YES` and notes will be deleted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    ** `n` indicates `NO` and notes will not be deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Any indexes (`id`) must be positive integer (e.g. 1, 2, 3, ...)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "The indexes refers to the index number shown in the displayed list of objects (e.g. flashcards, notes, cheatsheets, tags)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Only exact matches of any searches will be returned."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "E.g. \"noted\" will return \"noted\" but not \"note\" or \"notes\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* All searches are case insensitive."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "E.g. \u0027cs2103t\u0027 will match \u0027CS2103T\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Global Commands"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Getting into FiveFlash function: `ff`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Brings the user to the FiveFlash section, regardless of where the user is."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: ff"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Getting into FiveNotes function: `fn`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Brings the user to the FiveNotes section, regardless of where the user is."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: fn"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Getting into FiveCheat function: `fc`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Brings the user to the FiveCheat section, regardless of where the user is."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: fc"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Listing tags: `tag list`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Lists all the tags available in the application."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: tag list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Editing tags: `tag edit`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Replaces the existing tag with \u003cTAG_ID\u003e with \u003cNEW_TAG_NAME\u003e in the application."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: tag edit id/TAG_ID n/NEW_TAG_NAME"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Deleting tags: `tag delete`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Deletes all tags from the application."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: tag delete [-c]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `-c` is flagged, all contents tagged to the all tags are deleted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Viewing Help: `help`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Views the help session of all the functionality."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: help [-fc] [-fn] [-ff]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Only ONE of the optional fields can be provided in one command. E.g."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    ** Correct commands: \"help\", \"help -fc\", \"help -fn\", \"help -ff\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    ** Wrong commands: \"help -fc -fn\", \"help -fc -fn -ff\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `fc` flagged, returns the help section of the \u0027FiveCheat\u0027 feature."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `fn` flagged, returns the help section of the \u0027FiveNotes\u0027 feature."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `ff` flagged, returns the help section of the \u0027FiveFlash\u0027 feature."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d FiveFlash"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Creating flashcards: `new`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "1. Creates a new flashcard from user input question \u003cQUESTION\u003e and answer \u003cANSWER\u003e."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: new q/QUESTION a/ANSWER t/TITLE m/MODULE [h/HINT] [tag/TAG]..."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "2. Creates a new flashcard from file input \u003cFILE_NAME\u003e and answer \u003cANSWER\u003e."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: new f/\u003cFILE_NAME\u003e a/ANSWER t/TITLE m/MODULE [h/HINT] [tag/TAG]..."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* File must be in specified directory."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* File input must be of type jpg."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Viewing flashcards: `view`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Displays flashcard \u003cFLASHCARD_ID\u003e to user without answer."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: view id/FLASHCARD_ID [-h] [-a] [-tag]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* `-h`, `-a` or `-tag` can be used after entering view flashcard mode to view flashcard\u0027s hint, answer or tags respectively."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* View page displays flashcard title, module and question by default."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Editing flashcards: `edit`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits flashcard \u003cFLASHCARD_ID\u003e by changing any field of the flashcard."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: edit id/FLASHCARD_ID [m/MODULE] [q/NEW_QUESTION] [f/FILE_NAME] [a/ANSWER] [t/TITLE] [h/HINT] [tag/TAG]..."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Listing flashcards: `list`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Lists all flashcards."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: list [tag/TAG]..."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If more than one tag is specified, lists only flashcards which satisfy all specified tags."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Deleting flashcards: `delete`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Deletes the flashcard with \u003cFLASHCARD_ID\u003e or flashcard(s) with specified tag(s)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: delete [id/FLASHCARD_ID] [tag/TAG]..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one of the optional fields must be specified."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Time Trial: `time`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Starts a time trial for flashcards with tag \u003cTAG\u003e for \u003cTIME\u003e seconds per flashcard."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: time [time/TIME] [tag/TAG]..."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one tag must be specified."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If more than one tag is specified, selects only flashcards which satisfy all specified tags."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* Default \u003cTIME\u003e will be 30 seconds, if not specified."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d FiveNotes"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Creating notes: `new`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Creates a notes with empty content, unless specified, under \u003cMODULE\u003e section."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: new m/MODULE [t/NOTE_TITLE] [c/NOTE_CONTENT] [tag/TAG]..."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Editing notes: `edit`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits the specified note\u0027s title or content or tag(s)."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: edit id/NOTE_ID [t/TITLE] [c/NOTE_CONTENT] [tag/TAG]..."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one of the optional fields must be specified."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Deleting notes: `delete`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "1. Deletes notes with specified \u003cMODULE\u003e or specified note with \u003cNOTE_ID\u003e or all notes."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: delete [m/MODULE] [id/NOTE_ID] [-a]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one of the optional fields must be specified."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `a` is flagged, all notes will be deleted."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "2. Deletes specified tag(s) of note with \u003cNOTE_ID\u003e."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: delete id/NOTE_ID [tag/TAG]..."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one tag must be specified."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Viewing notes: `view`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Views the note with \u003cNOTE_ID\u003e."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: view id/NOTE_ID"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Listing notes: `list`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "1. Lists all notes found in the user\u0027s notes."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: list [-m] [-t]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `-m` flagged, lists all modules found in notes."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `-t` flagged, lists all titles found in notes."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "2. Lists all notes from \u003cMODULE\u003e."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: list m/MODULE [-t]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `-t` flagged, lists all titles found in notes."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d FiveCheat"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Creating cheatsheets: `new`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Creates a new cheatsheet with \u003cTITLE\u003e and \u003cMODULE\u003e."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: new t/TITLE m/MODULE [tag/TAG]..."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Editing cheatsheets: `edit`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "Edits cheatsheet\u0027s content with \u003cCHEATSHEET_ID\u003e, unless optional fields are specified."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: edit id/CHEATSHEET_ID [t/TITLE] [m/MODULE] [tag/TAG]..."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Deleting cheatsheets: `delete`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "1. Deletes cheatsheets with specified \u003cMODULE\u003e or specified cheatsheet with \u003cCHEATSHEET_ID\u003e or all cheatsheets."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: delete [m/MODULE] [id/CHEATSHEET_ID] [-a]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one of the optional fields must be specified."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `-a` flagged, all cheatsheets will be deleted."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "2. Deletes specified tag(s) of cheatsheet with \u003cCHEATSHEET_ID\u003e."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "    Format: delete id/CHEATSHEET_ID [tag/TAG]..."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* At least one tag must be specified."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d\u003d Listing cheatsheets: `list`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "1. Lists all cheatsheets found in the user\u0027s notes."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: list [-m] [-t]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `-m` flagged, lists all modules found in the user\u0027s cheatsheets."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `-t` flagged, lists all titles found in the user\u0027s cheatsheets."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "2. Lists all cheatsheets from \u003cMODULE\u003e."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "   Format: list m/MODULE [-t]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "* If `-t` flagged, lists all titles found in the user\u0027s cheatsheets."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003cNOT INCLUDED IN DRAFT\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*Q*: Do I need to create a new tag before using the tag? +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "*A*: No, you do not need to. Tags, if not exist, are automatically created."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003cNOT INCLUDED IN DRAFT\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Mock-up User Interface"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UiMockUp1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::UiMockUp2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "\u003d\u003d Draft Workflow (To-be-removed)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jaesimin"
        },
        "content": "image::WorkflowDraft.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jaesimin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jaesimin": 199,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTE_DISPLAYED_INDEX \u003d \"The note index provided is invalid!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_NOTES_LISTED_OVERVIEW \u003d \"%1$d notes listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_MATCHING_NOTE_FOUND \u003d \"Note matching the title exists.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_NO_MATCHING_NOTE_FOUND \u003d \"No note with that title exists!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "Sam-limyr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if the {@code sentence} matches the {@code phrase}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *   Ignores case, but a full phrase match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *       matchesPhraseIgnoreCase(\"ABc def\", \"ABc def\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *       matchesPhraseIgnoreCase(\"ABc def\", \"aBc dEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *       matchesPhraseIgnoreCase(\"ABc def\", \"ABc\") \u003d\u003d false //not a full phrase match"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param phrase cannot be null, cannot be empty, must be a single phrase"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static boolean matchesPhraseIgnoreCase(String sentence, String phrase) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(phrase);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String preppedPhrase \u003d phrase.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        checkArgument(!preppedPhrase.isEmpty(), \"Phrase parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return preppedPhrase.equalsIgnoreCase(preppedSentence);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "Sam-limyr": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of notes */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "Sam-limyr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return model.getFilteredNoteList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "Sam-limyr": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_note\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to the list of notes. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_CONTENT + \"CONTENT \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TITLE + \"Pipelining Definition \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_CONTENT + \"Pipelining is a process where a processor runs multiple instructions simultaneously, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"each at different stages of the processor. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TAG + \"CS2100 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + PREFIX_TAG + \"Pipelining\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New note added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This note title already exists in FiveNotes.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Note toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates an AddNoteCommand to add the specified {@code Note}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public AddNoteCommand(Note note) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        toAdd \u003d note;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (model.hasNote(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.addNote(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof AddNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddNoteCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Deletes a note identified using it\u0027s displayed index from the note list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_note\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \": Deletes the note identified by the index number used in the displayed note list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted Note: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DeleteNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note noteToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof DeleteNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ListNoteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_note\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all notes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.TitleMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Finds and lists all notes in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ViewNoteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view_note\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all notes whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" pipeline potato\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final TitleMatchesKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ViewNoteCommand(TitleMatchesKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new CommandResult(model.getFilteredNoteList().isEmpty()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ? Messages.MESSAGE_NO_MATCHING_NOTE_FOUND"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                : Messages.MESSAGE_MATCHING_NOTE_FOUND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof ViewNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 predicate.equals(((ViewNoteCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class AddNoteCommandParser implements Parser\u003cAddNoteCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public AddNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CONTENT, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note note \u003d new Note(title, content);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new AddNoteCommand(note);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.ListNoteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return new AddNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return new DeleteNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        case ListNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "Sam-limyr": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"ti/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "Sam-limyr": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeleteNoteCommandParser implements Parser\u003cDeleteNoteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DeleteNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return new DeleteNoteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses a {@code String title} into a {@code Content}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String trimmedContent \u003d title.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new Title(trimmedContent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses a {@code String name} into a {@code Content}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 124,
      "Sam-limyr": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.UniqueNoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final UniqueNoteList notes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notes \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the contents of the note list with {@code notes}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code notes} must not contain duplicate notes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.notes.setNotes(notes);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        setNotes(newData.getNoteList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return notes.contains(note);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Adds a note to the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note must not already exist in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the given note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(editedNote);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notes.setNote(target, editedNote);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void removeNote(Note key) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        notes.remove(key);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return notes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "Sam-limyr": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    Predicate\u003cNote\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    boolean hasNote(Note note);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Deletes the given note."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note must exist in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void deleteNote(Note target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Adds the given note."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code note} must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the given note {@code target} with {@code editedNote}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in FiveNotes."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void setNote(Note target, Note editedNote);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /** Returns an unmodifiable view of the filtered note list */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Updates the filter of the filtered note list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void updateFilteredNoteList(Predicate\u003cNote\u003e predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedNote}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The person identity of {@code editedNote} must not be the same as another existing person in FiveNotes."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void setPerson(Person target, Person editedNote);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "Sam-limyr": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final FilteredList\u003cNote\u003e filteredNotes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(this.addressBook.getNoteList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return addressBook.hasNote(note);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        addressBook.removeNote(target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        addressBook.addNote(note);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        addressBook.setNote(target, editedNote);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Note} backed by the internal list of"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 filteredNotes.equals(other.filteredNotes);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 150,
      "Sam-limyr": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns an unmodifiable view of the notes list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * This list will not contain any duplicate notes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    ObservableList\u003cNote\u003e getNoteList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "Sam-limyr": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Content.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents a Note\u0027s content in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            \"Note contents should not be blank!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The first character of the note content must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\S.*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public final String fullContent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Constructs a {@code content}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param content A valid note content."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        fullContent \u003d content;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if a given string is a valid note content."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return fullContent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 fullContent.equals(((Content) other).fullContent)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return fullContent.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents a Note in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final Content content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Note() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.title \u003d new Title(\"sample title\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.content \u003d new Content(\"sample content\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Note(Title title, Content content) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireAllNonNull(title, content);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if both notes of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * This defines a weaker notion of equality between two notes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean isSameNote(Note otherNote) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (otherNote \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return otherNote !\u003d null \u0026\u0026 otherNote.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if both notes have the same identity and data fields."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * This defines a stronger notion of equality between two notes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!(other instanceof Note)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note otherNote \u003d (Note) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return otherNote.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 otherNote.getContent().equals(getContent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return Objects.hash(title, content);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        builder.append(\"Title: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .append(\"\\nContent: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .append(getContent());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents a Note\u0027s title in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public final String fullTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Constructs a {@code title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        fullTitle \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return fullTitle;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 fullTitle.equals(((Title) other).fullTitle)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return fullTitle.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/TitleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Tests that a {@code Note}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cNote\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean test(Note note) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(note.getTitle().fullTitle, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/TitleMatchesKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Tests that a {@code Note}\u0027s {@code Title} matches any of the keyphrases given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class TitleMatchesKeywordsPredicate implements Predicate\u003cNote\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final String keyphrase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public TitleMatchesKeywordsPredicate(String keyphrase) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.keyphrase \u003d keyphrase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean test(Note note) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return StringUtil.matchesPhraseIgnoreCase(note.getTitle().fullTitle, keyphrase);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof TitleMatchesKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                \u0026\u0026 keyphrase.equals(((TitleMatchesKeywordsPredicate) other).keyphrase)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/UniqueNoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.exception.DuplicateNoteTitleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.exception.NoteNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * A list of notes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * A note is considered unique by comparing using {@code Note#isSameNote(Note)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * notes uses Note#isSameNote(Note) for equality so as to ensure that the note being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * unique in terms of identity in the UniqueNoteList. However, the removal of a note uses Note#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * as to ensure that the note with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * @see Note#isSameNote(Note)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class UniqueNoteList implements Iterable\u003cNote\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if the list contains an equivalent note as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean contains(Note toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameNote);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Adds a note to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void add(Note toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new DuplicateNoteTitleException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!target.isSameNote(editedNote) \u0026\u0026 contains(editedNote)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new DuplicateNoteTitleException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        internalList.set(index, editedNote);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Removes the equivalent note from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The note must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void remove(Note toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNotes(UniqueNoteList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Replaces the contents of this list with {@code notes}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code notes} must not contain duplicate notes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        requireAllNonNull(notes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!notesAreUnique(notes)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new DuplicateNoteTitleException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        internalList.setAll(notes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ObservableList\u003cNote\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Iterator\u003cNote\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                || (other instanceof UniqueNoteList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueNoteList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns true if {@code notes} contains only unique notes."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private boolean notesAreUnique(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notes.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                if (notes.get(i).isSameNote(notes.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exception/DuplicateNoteTitleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DuplicateNoteTitleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DuplicateNoteTitleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(\"Operation would result in duplicate notes!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exception/NoteNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(\"No note with that title exists!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        private final Person note;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelStubWithPerson(Person note) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasPerson(Person note) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return this.note.isSamePerson(note);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * A Model stub that always accept the note being added."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasPerson(Person note) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return personsAdded.stream().anyMatch(note::isSamePerson);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addPerson(Person note) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            personsAdded.add(note);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 180,
      "Sam-limyr": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class AddNoteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void constructor_nullNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddNoteCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_noteAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelStubAcceptingNoteAdded modelStub \u003d new ModelStubAcceptingNoteAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note validNote \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        CommandResult commandResult \u003d new AddNoteCommand(validNote).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(String.format(AddNoteCommand.MESSAGE_SUCCESS, validNote), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(Arrays.asList(validNote), modelStub.notesAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void constructor_noteTitleOfOnlyWhiteSpace_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withTitle(\"\").build());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withTitle(\" \").build());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withTitle(\"  \").build());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void constructor_noteContentOfOnlyWhiteSpace_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withContent(\"\").build());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withContent(\" \").build());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NoteBuilder().withContent(\"  \").build());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_duplicateNote_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note validNote \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(validNote);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithNote(validNote);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(CommandException.class, AddNoteCommand.MESSAGE_DUPLICATE_NOTE, ("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            ) -\u003e addNoteCommand.execute(modelStub));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note sucks \u003d new NoteBuilder().withTitle(\"Pipelining sucks\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note rocks \u003d new NoteBuilder().withTitle(\"Pipelining rocks\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        AddNoteCommand addSucksCommand \u003d new AddNoteCommand(sucks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        AddNoteCommand addRocksCommand \u003d new AddNoteCommand(rocks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(addSucksCommand.equals(addSucksCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        AddNoteCommand addSucksCommandCopy \u003d new AddNoteCommand(sucks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(addSucksCommand.equals(addSucksCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(addSucksCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(addSucksCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(addSucksCommand.equals(addRocksCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private class ModelStubWithNote extends ModelStub {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        private final Note note;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelStubWithNote(Note note) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return this.note.isSameNote(note);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * A Model stub that always accept the note being added."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private class ModelStubAcceptingNoteAdded extends ModelStub {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final ArrayList\u003cNote\u003e notesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return notesAdded.stream().anyMatch(note::isSameNote);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            notesAdded.add(note);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 239
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the note at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static void showNoteAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note note \u003d model.getFilteredNoteList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        final String[] splitTitle \u003d note.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.updateFilteredNoteList(new TitleContainsKeywordsPredicate(Arrays.asList(splitTitle[0])));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(1, model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 128,
      "Sam-limyr": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showNoteAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_NOTE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNoteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * {@code DeleteNoteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeleteNoteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNoteList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note noteToDelete \u003d model.getFilteredNoteList().get(INDEX_FIRST_NOTE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        expectedModel.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandSuccess(deleteNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredNoteList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note noteToDelete \u003d model.getFilteredNoteList().get(INDEX_FIRST_NOTE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        expectedModel.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        showNoNote(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandSuccess(deleteNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_NOTE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getNoteList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteFirstNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteSecondNoteCommand \u003d new DeleteNoteCommand(INDEX_SECOND_NOTE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(deleteFirstNoteCommand.equals(deleteFirstNoteCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        DeleteNoteCommand deleteFirstNoteCommandCopy \u003d new DeleteNoteCommand(INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(deleteFirstNoteCommand.equals(deleteFirstNoteCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(deleteFirstNoteCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(deleteFirstNoteCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(deleteFirstNoteCommand.equals(deleteSecondNoteCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private void showNoNote(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model.updateFilteredNoteList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(model.getFilteredNoteList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showNoteAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListNoteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ListNoteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        model \u003d new ModelManager(getTypicalNoteList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandSuccess(new ListNoteCommand(), model, ListNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST_NOTE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandSuccess(new ListNoteCommand(), model, ListNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MATCHING_NOTE_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_MATCHING_NOTE_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.POTATO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.TitleMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewNoteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ViewNoteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNoteList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalNoteList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        TitleMatchesKeywordsPredicate firstPredicate \u003d new TitleMatchesKeywordsPredicate(\"first\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        TitleMatchesKeywordsPredicate secondPredicate \u003d new TitleMatchesKeywordsPredicate(\"second\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewNoteFirstCommand \u003d new ViewNoteCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewNoteSecondCommand \u003d new ViewNoteCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(viewNoteFirstCommand.equals(viewNoteFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand viewNoteFirstCommandCopy \u003d new ViewNoteCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(viewNoteFirstCommand.equals(viewNoteFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(viewNoteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(viewNoteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(viewNoteFirstCommand.equals(viewNoteSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_emptyKeywords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        TitleMatchesKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e model.updateFilteredNoteList(predicate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_partialKeywordsMatch_noNoteFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_MATCHING_NOTE_FOUND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        TitleMatchesKeywordsPredicate predicate \u003d preparePredicate(\"pipe\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand command \u003d new ViewNoteCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        expectedModel.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredNoteList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_excessKeywordsMatch_noNoteFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_MATCHING_NOTE_FOUND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        TitleMatchesKeywordsPredicate predicate \u003d preparePredicate(\"sample title pipelining definition\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand command \u003d new ViewNoteCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        expectedModel.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredNoteList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void execute_exactKeywordsMatchWrongLetterCase_oneNoteFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String expectedMessage \u003d MESSAGE_MATCHING_NOTE_FOUND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        TitleMatchesKeywordsPredicate predicate \u003d preparePredicate(\"potatoes\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ViewNoteCommand command \u003d new ViewNoteCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        expectedModel.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(Collections.singletonList(POTATO), model.getFilteredNoteList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleMatchesKeywordsPredicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private TitleMatchesKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new TitleMatchesKeywordsPredicate(userInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        private final ObservableList\u003cNote\u003e notes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            return notes;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "Sam-limyr": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/NoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void toString_exists_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note note \u003d new Note();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(note.toString(), \"Title: sample title\\nContent: sample content\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void toString_format_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Note note \u003d new Note(new Title(\"this is a title\"), new Content(\"this is a content\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(note.toString(), \"Title: this is a title\\nContent: this is a content\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void requireNonNull_noTitleProvided_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(java.lang.IllegalArgumentException.class, () -\u003e new Note(new Title(\"title\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                new Content(\"\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NoteBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * A utility class to help with building Note objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NoteBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Pipeline Definition\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"Pipelining is a process where a processor simultaneously runs \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            + \"multiple instructions\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Content phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        phone \u003d new Content(DEFAULT_CONTENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Initializes the NoteBuilder with the data of {@code noteToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder(Note noteToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        title \u003d noteToCopy.getTitle();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        phone \u003d noteToCopy.getContent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        // tags \u003d new HashSet\u003c\u003e(noteToCopy.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Sets the {@code Title} of the {@code Note} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Note} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Sets the {@code Content} of the {@code Note} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NoteBuilder withContent(String phone) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.phone \u003d new Content(phone);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Note build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new Note(title, phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Index INDEX_FIRST_NOTE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Index INDEX_SECOND_NOTE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Index INDEX_THIRD_NOTE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Sam-limyr": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalNotes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class TypicalNotes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Note SAMPLE \u003d new NoteBuilder().withTitle(\"Sample Title\").withContent(\"Sample Content\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Note PIPELINE \u003d new NoteBuilder().withTitle(\"Pipelining Definition\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withContent(\"Pipelining is the process of making a single processor run multiple instructions \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    + \"simultaneously.\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Note POTATO \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            new NoteBuilder().withTitle(\"Potatoes\").withContent(\"I really like potatoes.\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private TypicalNotes() {} // prevents instantiation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical notes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static AddressBook getTypicalNoteList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (Note note : getTypicalNotes()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            ab.addNote(note);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public static List\u003cNote\u003e getTypicalNotes() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SAMPLE, PIPELINE, POTATO));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 53
    }
  }
]
