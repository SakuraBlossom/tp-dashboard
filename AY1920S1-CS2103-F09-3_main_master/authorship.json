[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "\u003d CS ModBuddy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "image::docs/images/title.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "image::images/title.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103-F09-3/main[image:https://travis-ci.com/AY1920S1-CS2103-F09-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/20e37f4d4e58492388ec4572c072cd91[\"Codacy code quality\", link\u003d\"https://www.codacy.com/manual/andyylam/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S1-CS2103-F09-3/main\u0026utm_campaign\u003dBadge_Grade\"],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-F09-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-F09-3/main/badge.svg?branch\u003dmaster[Coverage]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "Study planning is tough. We students waste precious time putting our study plan together, poring through modules to see"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "if they fit our graduation requirements. And for a year one, all of this can be especially overwhelming."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "With ModBuddy, study planning is made easy. Our application is created for incoming CS undergraduates in NUS to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "plan their studies across all semesters. As a user, you may:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* View your entire study plan at one glance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* Add and remove modules easily across semesters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* Check if your plan meets graduation requirements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* The original source of our code is the AddressBook-Level3 project, created by the https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3,
      "yaaanch": 8,
      "halfwhole": 11,
      "-": 24
    }
  },
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andyylam": 9
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 40
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                      VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 61
    }
  },
  {
    "path": "bin/main/view/PersonListCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 36
    }
  },
  {
    "path": "bin/main/view/PersonListPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "-": 7
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 9
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 12
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 6
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "CS ModBuddy was developed by the CS2103-F09-3 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "We are a team of Year 2 Computer Science undergraduates based in the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d Ong Yan Chun"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "image::yaaanch.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "{empty}[https://github.com/yaaanch[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Responsibilities: UX Expert"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d Liu Zechu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "image::liuzechu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "{empty}[https://github.com/LiuZechu[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Responsibilities: Code Quality + Scheduling and Tracking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d Chow Yi Wai"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "image::chowyiwai.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "{empty}[https://github.com/chowyiwai[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Responsibilities: Documentation + Deliverables and Deadlines"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d Andy Lam"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "image::andyylam.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "{empty}[https://github.com/andyylam[github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Responsibilities: Integration + Intellij Expert"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d Lim Zi Wei"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "image::halfwhole.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "{empty}[https://github.com/halfwhole[github]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Responsibilities: Testing + Git Expert"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 26,
      "-": 31
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F09-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* *Email us*. You can also reach us at through the emails below:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** Andy Lam `andy.lam@u.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** Chow Yi Wai `yiwai.chow@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** Liu Ze Chu `zechu.liu@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** Lim Zi Wei `zwlim@u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** Ong Yan Chun `yanchun@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "andyylam": 7,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003d CSmodbuddy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "image::title.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "By: `Team CS2103-F09-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Undergraduate CS student studying in NUS"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Needs to manage his/her study plans and module planning"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Needs to see whether his/her study plans are feasible "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Functionality is not offered by any other existing application."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Tailored to needs of NUS CS undergraduate students."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Users will be able to check all the problems (e.g. graduation requirements, prerequisite for modules) with their current study plan with ModBuddy through a desktop application."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Have multiple study plans, and move semesters around quickly with a CLI."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Version control for saving history of study plans, ensuring that mistakes or past study plans are recoverable."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* Suits users who are able to type fast and can manage their study plan faster."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |student | add modules to the planner |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |student | remove modules from the planner |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |student | search a module based on module code |"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |student | declare my focus area |"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |student | ensure that my modules can fulfill my focus area requirements |"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |student who wants to graduate | know whether I will fulfill my graduation requirements with my current study plan | I can graduate on time"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` | user |check a module’s prerequisites |I can confirm I’ve satisfied them in previous semesters before taking the module this semester"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` | user | set my current semester|"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` | foolish user |be warned if any part of my study plan is not feasible|"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |indecisive user |move modules across semesters|I can change the order at which I plan to take my modules"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |forgetful user |view which modules I have already taken |I know what modules I do not have to take anymore"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |Year 1 user |view the core modules |I know which modules I should take first"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |new user |view help instructions |I know how to use the application easily"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |clumsy user |be greeted with helpful error messages when I enter commands or their arguments wrongly|"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* * *` |meticulous student|create multiple versions of study plan|I can toggle between them and choose the most suitable one when circumstances change"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|Year 1 user|view which modules can be S/U-ed|I can prioritise those modules to be taken in Year 1"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|user with friends|download a copy of my study plan|I can share it with others."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|user|check the total number of MCs in my module plan this semester|I know if I need to take more modules or if I’m overloading."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|foolish user| undo my previous command|I can restore the previous state whenever I make mistakes."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|Year 1 user|start out with a default module plan|I have an idea of what modules are recommended to be taken in which semesters"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|ambitious student|to block out a semester|I can plan for SEP/NOC/industrial attachment."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|lazy student|see a brief description/name of a module|I don’t have to memorise all the module codes"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|student|search a module based on keywords|"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|diligent student|tag my modules so as to classify them better|"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|student|fill my study plan with UEs too|"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|student|rename UEs as their actual names|"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|visual user|be able to visualise my modules in a GUI|"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|experienced user| chain my commands together so that I can be more efficient|"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|student who admires beauty| see different colours|"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|forgetful student|attach more information to each semester|I will remember why I plan my modules this way"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|fickle user|combine different semesters from different study plans into one new study plan (move semesters around)| I don’t have to repeat."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|student who wants to be a TA|indicate I will be TA-ing a module in a given semester|"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`* *`|CS student with extra programmes| I want to verify that my study plan allows me to graduate with all the different requirements I have|"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`*` |overachiever| I want to see how joining one of these Turing/von Neumann programmes affects my study plan|"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`*` |student who wants to be a TA| indicate I will be TA-ing a module in a given semester|"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`*` |CS student with extra programmes| I want to verify that my study plan allows me to graduate with all the different requirements I have|"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`*` |CS student with friends| I want to plan modules with my friends | we can take the same modules every semester"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`*` |student who cares about grades| I want to be able to analyse my CAP per module, semester, year and overall| I can be more aware of my grades"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`*` |user who admires beauty| I want to set each module with a color 1-8 | I can customise the look of my study plan"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`*` |user who admires beauty| I want to change the color theme | I can customise the look of my study plan"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "andyylam"
        },
        "content": "|`*` |experienced user who admires beauty| I want to change specific colors with hex code | I can customise the look of my study plan"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "andyylam"
        },
        "content": "(For all use cases below, the *System* is the `ModBuddy` and the *Actor* is the `Student`, unless specified otherwise)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 - Create study plan"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "andyylam"
        },
        "content": "1. User chooses to create a study plan."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "andyylam"
        },
        "content": "2. User enters the requested description."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "andyylam"
        },
        "content": "3. ModBuddy displays the new study plan."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* 2a. User chooses not to enter a description."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** 2a1. ModBuddy creates a new study plan with a default description."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** 2a2. Use case resumes from step 4."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 - Add module"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "andyylam"
        },
        "content": "1. Student requests to add a module to a particular semester."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "andyylam"
        },
        "content": "2. ModBuddy displays changes to study plan."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* 1a. ModBuddy detects that the module entered does not exist."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** 1a1. ModBuddy prompts Student to enter a correct module code"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** 1a2. User enters new module. "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 - Commit a study plan"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "andyylam"
        },
        "content": "1. Student requests to save the current version of the study plan"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "andyylam"
        },
        "content": "2. ModBuddy confirms that the version has been saved."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* 1a. ModBuddy detects that there have been no changes to the study plan from the previous commit."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** 1a1. ModBuddy informs Student that the current version has already been saved."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 - Tag a module"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "andyylam"
        },
        "content": "1. Student requests to tag a module"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "andyylam"
        },
        "content": "2. ModBuddy requests student to enter a tag name."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "andyylam"
        },
        "content": "3. ModBuddy displays changes to study plan."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "andyylam"
        },
        "content": "+"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* 1a. ModBuddy detects that the module entered does not exist."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** 1a1. ModBuddy prompts Student to enter a correct module code"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** 1a2. User enters new module."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "andyylam"
        },
        "content": "+"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "andyylam"
        },
        "content": "+"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* 2a. ModBuddy detects that the module already has the tag."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** 2a1. ModBuddy does not add a new tag."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "andyylam"
        },
        "content": "+"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d Use case: UC05 - Correct modules without a prerequisite"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "andyylam"
        },
        "content": "1. ModBuddy highlights a module in red because its prerequisites have not been fulfilled."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "andyylam"
        },
        "content": "2. Student checks the prerequisites of the module."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "andyylam"
        },
        "content": "3. ModBuddy displays all a module’s prerequisites that have yet to be fulfilled in previous semesters."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "andyylam"
        },
        "content": "4. Student adds the unfulfilled module prerequisite to a selected previous semester."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "andyylam"
        },
        "content": "5. ModBuddy un-highlights the module now that its prerequisites have been fulfilled."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "andyylam"
        },
        "content": "+"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* 1a. Student decides not to take the module."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "andyylam"
        },
        "content": "** 1a1. Student removes the module from the semester."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "andyylam"
        },
        "content": "+"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* 3a. ModBuddy suggests suitable semesters where the student can take the untaken prerequisites."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "andyylam"
        },
        "content": "+"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 - Chaining commands"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "andyylam"
        },
        "content": "1. User chooses to chain multiple commands"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "andyylam"
        },
        "content": "2. User inputs the multiple commands."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "andyylam"
        },
        "content": "3. ModBuddy displays the changes as specified."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "andyylam"
        },
        "content": "+"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "andyylam"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* 2a. User chooses to chain different commands with ‘\u0026\u0026’."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* 2b. User chooses to chain same commands with multiple arguments."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  Should be able to hold up to 10 study plans, each containing at least 40 modules, without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  Should allow a user with above average typing speed for regular English text (i.e. not code, not system admin commands) to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  Should allow a user to accomplish all of the tasks without an Internet connection."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  The module information should be applicable to all NUS Computer Science students without additional programmes (such as Double Degree Programmes)."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  Should allow a user who is relatively familiar with CS module codes to manipulate modules faster using module codes than using module names."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  The response to any use action should become visible within 1 second."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  The user interface should be intuitive enough for users who are not IT-savvy"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  The source code should be open source."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  The product should be free for all NUS CS undergraduate students."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "andyylam"
        },
        "content": ".  Should warn the user that the developers will not be held liable for any failure to graduate within normal candidature period due to the use of the product."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[active-study-plan]] Active study plan::"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "The study plan that is currently editable by various commands. Also known as the active plan for short."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[CLI]] CLI::"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Abbreviation for Command Line Interface, which is a text-based user interface used to view and manage information"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "related to study plans in our application."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[command]] Command::"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "An instruction that the user enters into the text input field of our application. A valid command will result"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "in a successful operation on viewing or manipulating the study plan(s)."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[commit]] Commit::"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A version of a study plan that the user saves to a local file. The user may opt to view or revert to a particular"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "version of any study plan."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[core-module]] Core module::"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A core module is compulsory for all students in the NUS Computer Science course in order to fulfill the graduation"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "requirements. Such modules include:"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Computer Science Foundation"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS1101S Programming Methodology"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS1231S Discrete Structures"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS2030 Programming Methodology II"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS2040S Data Structures and Algorithms"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS2100 Computer Organisation"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS2103T Software Engineering"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS2105 Introduction to Computer Networks"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS2106 Introduction to Operating Systems"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS3230 Design and Analysis of Algorithms"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** IT Professionalism"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* IS1103/X IS Innovations in Organisations and Society"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* CS2101 Effective Communication for Computing Professionals"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* ES2660 Communicating in the Information Age"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Mathematics \u0026 Sciences"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* MA1521 Calculus for Computing"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* MA1101R Linear Algebra I"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* ST2334 Probability and Statistics"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* One Science Module"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[co-requisite]] Co-requisite::"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Co-requisites are modules that are to be taken concurrently."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[CS]] CS::"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Abbreviation for Computer Science, the study of processes that interact with data and that can be represented"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "as data in the form of programs. In particular, CS here refers to the course for Bachelor of Computing in Computer"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Science (with Honours) offered by School of Computing (SoC), National University of Singapore (NUS)."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[current-semester]] Current Semester::"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "The semester in which the user is currently taking modules. All modules taken in and before the current semester are locked"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "and uneditable. The user may manipulate modules after the current semester."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[default-study-plan]] Default study plan::"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "The recommended study plan for a CS freshman, pre-populated with core modules arranged in their recommended semesters of"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "study."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[elective]] Elective::"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Refer to UE."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[feasibility]] Feasibility::"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "The feasibility of a study plan, or part of a study plan, refers to whether the following conditions are met:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** All modules are taken after their prerequisites have been taken."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** All modules are not taken together with any of their respective preclusions."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** The user, by following this study plan, satisfies their graduation requirements and will be able to graduate without"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "extending their candidature in NUS."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[focus-area]] Focus area::"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "CS modules are organised into Focus Areas of coherent modules according to technical areas of study."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A CS Focus Area is satisfied by completing 3 modules from the Area Primaries, with at least one module at 4000-level or"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "above. CS Foundation Modules (CFM) that appear in the Area Primaries can be counted as one of the 3 modules towards"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "satisfying a Focus Area. In this case, a student has to read just two other modules in the Area Primaries to satisfy"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "the Focus Area. The ten Focus Areas are listed below:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Algorithms \u0026 Theory"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Artificial Intelligence"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Computer Graphics and Games"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Computer Security"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Database Systems"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Multimedia Information Retrieval"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Networking and Distributed Systems"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Parallel Computing"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Programming Languages"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Software Engineering"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[graduation]] Graduation::"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "To graduate from NUS CS means to complete all the stipulated requirements within the user\u0027s candidature period,"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "and finish their studies with a Bachelor\u0027s degree."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[GUI]] GUI::"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Abbreviation for the Graphical User Interface, which allows users to interact with electronic devices through"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "graphical icons and visual indicators as opposed to a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[leave-of-absence]] Leave of Absence::"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Also known as LOA for short. During LOA, students will temporarily stop taking NUS modules for an extended period"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "of time, usually one semester. Students may be granted leave of absence for the following reasons:"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Medical reasons"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Academic reasons"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** Personal reasons"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[major]] Major::"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "An academic major is the academic discipline to which an undergraduate student formally commits. A student who"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "successfully completes all modules required for the major qualifies for an undergraduate degree."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[minor]] Minor::"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A Minor programme is a coherent course of study providing significant depth in a certain area outside that of the Major,"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "within or outside the student\u0027s department.The modular credit (MC) requirement for a Minor programme should be at least"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "24MCs, of which up to 8MCs may be used to meet the requirements for both the Minor and a Major or another Minor subject"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "to the agreement of the particular department(s), faculty/faculties or programme(s) hosting the Minor."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[modular-credits]] Modular credits::"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "The undergraduate and graduate curricula are based on a modular system. Under this system, workloads are expressed"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "in terms of Modular Credits (MCs), and academic performance is measured by grade points on a 5-point scale."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[module]] Module::"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A module (colloquially _mod_) is a class of a specific topic that generally runs for an entire semester. Each module carries a stipulated"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "number of Modular Credits and requires weekly contact hours for students."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[module-code]] Module code::"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Each module of study has a unique module code consisting of a two- or three-letter prefix that denotes the discipline,"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "and four digits, the first of which indicates the level of the module (e.g., 1000 indicates a Level 1 module and 2000,"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "a Level 2 module). Modules offered by the Department of Computer Science generally start with CS."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[nus-overseas-colleges]] NUS Overseas Colleges::"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "The NUS Overseas Colleges Programme, or NOC for short, is an internship programme with strong emphasis on technology"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "entrepreneurship. Selected candidates will spend either 6 or 12 months with a high-tech start-up and take"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "entrepreneurship courses at a designated partner university. NOC students will be full-time interns and"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "part-time students."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[nus]] NUS::"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "The National University of Singapore (NUS) is the first autonomous research university in Singapore."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "NUS is a comprehensive research university, offering a wide range of disciplines, including the sciences,"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "medicine and dentistry, design and environment, law, arts and social sciences, engineering, business,"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "computing and music at both the undergraduate and postgraduate levels. Computer Science (CS) is one of the"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "undergraduate programmes offered by NUS."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[preclusion]] Preclusion::"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A module may also specify certain preclusions. These are modules that have similar emphases and may not be taken"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "together with that particular module."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[prerequisite]] Prerequisite::"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Pre-requisites indicate the base of knowledge on which the subject matter of a particular module will be built."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Before taking a module, a student should complete any pre-requisite module(s) listed for that particular module."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Where pre-requisites are specified, equivalent modules will also be accepted. If in doubt, students should consult"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "the module instructor or the Department academic advisor regarding the acceptable equivalent modules."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[semester]] Semester::"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "An academic year in NUS consists of two regular semesters, each spanning 13 weeks excluding the recess and reading"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "weeks. In our application, a semester is defined as a regular semester (as opposed to special semesters)."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[student]] Student::"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Our application is specifically targeted to students who study Computer Science (CS) in the School of"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Computing in the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[student-exchange-programme]] Student exchange programme::"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "The NUS Student Exchange Programme, or SEP for short, provides students with the opportunity to study in an overseas partner"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "university, usually for a semester or two, with approval of the School, to further enhance their learning experience."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Students from either partner university pay fees only at their home institution while on exchange."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[study-plan]] Study plan::"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A study plan is an academic plan detailing all modules that a student plans to take in all the semesters in their"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "candidature in NUS. One study plan comprises 8 semesters of modules. The user may have multiple alternative study plans."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[tag]] Tag::"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A module can be added a tag or multiple tags, which include the following:"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** core module"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** UE"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "** focus area"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "etc"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[UE]] UE::"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "UE stands for Unrestricted Elective. Unrestricted Electives enable students to pursue their academic interests and aspirations."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Students may also use Unrestricted Electives to satisfy partially or wholly the requirements of other programmes."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "As long as the appropriate prerequisites are met, students can satisfy the Unrestricted Electives requirement by taking"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "modules from any of the Departments/Faculties at any level. The limit on the number of Level-1000 modules to be counted"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "towards fulfilment of graduation requirements is 60 MCs for 160-MC programmes. In CS, a student needs to"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "fulfill at least 32 MCs of UEs before graduation."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[valid-module]] Valid module::"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A module is said to be valid if its prerequisites have been fulfilled and none of its preclusions are being"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "taken at the same time as the student takes that particular module."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[[year-of-study]] Year of study::"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "A student\u0027s year refers to whether the student is in their first (Y1), second (Y2), third (Y3), fourth (Y4), or fifth (Y5)"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "year of undergraduate studies in NUS."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// [appendix]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// \u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// [NOTE]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// \u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// . Initial launch"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// .. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// .. Double-click the jar file +"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// . Saving window preferences"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// .. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// .. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// _{ more test cases ... }_"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// \u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// . Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// .. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// .. Test case: `delete 1` +"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// .. Test case: `delete 0` +"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// .. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    Expected: Similar to previous."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// _{ more test cases ... }_"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// \u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// . Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// .. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// _{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "andyylam": 197,
      "yaaanch": 3,
      "LiuZechu": 179,
      "-": 360
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003d CSmodbuddy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F09-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "image::title.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "CS ModBuddy is for those who *prefer to use a desktop app for planning their modules*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "More importantly, CS ModBuddy is *optimized for those who prefer to work with a Command Line Interface* (CLI)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "If you can type fast, CS ModBuddy can get your module planning done faster than traditional GUI apps."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ".  Download the latest `csModBuddy.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your module plan."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add SEMESTER MODULE_CODE`, `SEMESTER`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "is a parameter which can be used as `add y1s1 cs1101s`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* Items in square brackets are optional e.g `newplan [TITLE]` can be used as `newplan`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "or as `newplan Algo and Graphics`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* Items with ... after them can be used multiple times e.g. `TAG_NAME...` can be used as `core`, `core completed`, etc."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d Storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a new study plan: `newplan`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Creates a new study plan with an optional title. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `newplan [TITLE]` +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `newplan noc half year`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `newplan minor in maths`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a study plan: `removeplan`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Deletes a study plan with a given index. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `removeplan PLAN_NUMBER` +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `removeplan 4`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Commiting edits to a study plan: `commit`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Saves changes to a study plan with a short commit message +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `commit SHORT_MESSAGE` +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `commit planned until y2s2`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `commit haven’t added UEs`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Checking commit history: `history`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Shows all commit history of the current study plan. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing a commit: `viewcommit`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Shows the version of the current study plan for a particular commit.This does not discard the commits after the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "specified commit. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `viewcommit COMMIT_NUMBER` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `viewcommit 1.1`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `This allows the user to view commit 1 of study plan 1.`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Reverting to a commit: `revert`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Reverts to the version of the current study plan for a particular commit. This discards all the commits after the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "specified commit. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `revert COMMIT_NUMBER` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `revert 1.1` +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "This allows the user to revert to commit 1 of study plan 1, discarding all commits after 1.1 (e.g. 1.2 and 1.3)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing another study plan: `viewplan`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Shows the study plan with a given index. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `viewplan PLAN_NUMBER` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `viewplan 3` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "This allows the user to view the study plan with an index of 3."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Setting another study plan as active: `activate`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Replaces the current study plan with the specified study plan as the active one. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `activate PLAN_NUMBER` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `activate 2`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Moving a semester to a study plan: `move`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Moves a semester of modules to another study plan with a specified index. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "This is the same command as 3.4 (`move MODULE SEM_SRC SEM_DEST`). The parser will handle the different"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "command interpretation."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `move SEMESTER SOURCE_PLAN DESTINATION_PLAN` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `move y2s2 1 3`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `move y3s1 2 1`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a semester from a study plan: `remove`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Deletes a semester of modules in the current active study plan, after which the semester will contain no modules. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "This is the same command as 3.2 (`remove SEMESTER MODULE`). The parser will handle the different command"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "interpretation."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `remove SEMESTER` +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `remove y2s2`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing description of a module: `description`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Shows a short textual description of a particular module. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `description MODULE_CODE` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `description cs2103`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Editing the title of current study plan: `title`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Changes the title of the current active study plan. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `title PLAN_TITLE` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "* `title Algo and Graphics`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "\u003d\u003d\u003d\u003d Setting default study plan: `default`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Generates a study plan with pre-populated modules according to the recommended study plan for a year one student. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Format: `default`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003d\u003d\u003d Help and handling the GUI"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003d\u003d\u003d\u003d General Help: `help`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "Provides a list of possible commands the user can type. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003d\u003d\u003d\u003d Help for a specific command: `help`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Provides help for a specific command. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Format: `help COMMAND` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "* `help newplan`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003d\u003d\u003d\u003d Autocompleting: `tab`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Autocompletes command/module code if there is only one option left. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Shows a dropdown for selection if there is more than one option left. This is done through the tab key."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003d\u003d\u003d\u003d Expanding a semester: `expand`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Expands a semester so that more details can be seen. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Format: `expand SEMESTER` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "* `expand y1s1`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003d\u003d\u003d\u003d Collapsing a semester: `collapse`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Collapses a semester so that most details are hidden. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Format: `collapse SEMESTER` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "* `collapse y1s1`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d Command Line Interface"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Assigning a module to a given semester: `addmodule`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Assigns the specified module to a given semester of the current study plan. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format:  `add SEMESTER MODULE ...` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `add y1s1 CS1101s`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `add y2s2 CS3244 CS3245 CS3233`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `add y1s1 ue`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `add y1s2 ue:GER1000`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Removing a module from a given semester. `remove`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Removes the specified module to a given semester of the current study plan. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format: `remove SEMESTER MODULE ...` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `remove y1s1 CS1101S`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `remove y2s2 CS3244`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Naming a UE from a semester. `nameue`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Names a UE from the given semester with the given module name. This feature is purely for aesthetic purposes and has no functional implications."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format: `nameue SEMESTER NAME` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `nameue y1s1 GER1000`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Moving a module from one semester to another. `move`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Moves a given module from a source semester to a destination semester, as specified. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format: `move MODULE SEMESTER_SRC SEMESTER_DEST` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `move CS3243 y2s1 y2s2`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Setting the current semester. `setcurrent`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Sets the given semester as the current one. Semesters before the specified semester will be locked and therefore modules cannot be added or removed from them. +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format: `setcurrent SEMESTER` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `setcurrent y1s2`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Blocking off the given semester: `block`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Block off the given semester, for reasons such as exchange, LOA, etc. +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format:  `block SEMESTER [REASON]`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Undo-ing the previous command: `undo`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Undo the previous command. The state of the application will revert back to that before the previous command. This command cannot undo itself. +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Redo-ing the previous undone command: `redo`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Redo the previous undone command. The state of the application will revert back to that before the undo. This command cannot redo itself. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format:  `redo`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Declaring a focus area: `declarefocusarea`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Declares the given focus area as one of the focus areas of the study plan. This means that the requirements of the focus area has to be met to be eligible for graduation. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format: `declarefocusarea FOCUS_AREA`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003d\u003d\u003d\u003d Chaining commands"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Chain commands together for greater efficiency. The commands, if different, are separated by a ‘\u0026\u0026’. ‘\u0026\u0026’ is not needed if the command is the same. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Format: `COMMAND_1 \u0026\u0026 COMMAND_2 \u0026\u0026 …` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andyylam"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `addmodule y1s1 CS1101S CS1231 MA1521`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andyylam"
        },
        "content": "* `movemodule CS2105 y2s1 y2s2 \u0026\u0026 addmodule CS2106 y2s2`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d Data classification and management"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing default tags : `viewdefaulttags`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows all default tag types. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `viewdefaulttags`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "List of default tags:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `Completed` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "_Completed_ modules are modules that are in any semester before the *current semester*."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `Core` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "_Core_ modules are *Computer Science Foundation* modules that count towards *Programme Requirements*."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `S/U-able` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "_S/U-able_ modules are modules that permit the *Satisfactory/Unsatisfactory option*."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `UE` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "_UE_ modules are *Unrestricted Elective* modules."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `ULR` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "_ULR_ modules are modules that count towards *University Level Requirements*."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `FOCUS_AREA_NAME:P` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "_P_ modules are modules that count towards Focus Area Primaries for _FOCUS_AREA_NAME_."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `FOCUS_AREA_NAME:E` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "_E_ modules are modules that count towards Focus Area Electives for _FOCUS_AREA_NAME_."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing all tags : `viewalltags`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows all tag types. +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `viewalltags`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Creating new tags : `newtag`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Creates a new tag type that can be used to keep track of other types of modules. +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `newtag TAG_NAME`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "If a tag with the specified `TAG_NAME` already exists, no new tag will be created."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `newtag exchange` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Adds a tag called _exchange_ that can be used to tag modules that are to be taken during an overseas exchange."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Renaming an existing tag : `renametag`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Renames a tag. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `renametag ORIGINAL_TAG_NAME NEW_TAG_NAME`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Only user-created tags can be renamed, i.e. default tag cannot be renamed."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `renametag exchange sep` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Renames the tag name from _exchange_ to _sep_."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Tagging modules : `tag`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Attaches a tag to a module. +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `tag MODULE_CODE TAG_NAME`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "If a tag with the given `TAG_NAME` does not exist, a new tag will automatically be created and tagged to the specified module."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `tag cs3230 exchange` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Attaches the tag with name _exchange_ to _CS3230_."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Removing a tag from a module: `removetag`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Removes a tag from a module. +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `removetag MODULE_CODE TAG_NAME`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `removetag cs3230 exchange`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Removing a tag from all modules: `removeall`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Removes a tag from all modules that it is attached to. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `removeall TAG_NAME`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `removeall exchange`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting tags: `deletetag`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Deletes a tag completely and removes it from any module that it is attached to. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `deletetag TAG_NAME`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Only user-created tags can be deleted, i.e. default tag cannot be deleted."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `deletetag exchange`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing modules with specific tags : `viewtagged`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows all modules attached to all the specified tags. +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `viewtagged TAG_NAME ...`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `viewtagged completed` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows all modules that are tagged as _completed_."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `viewtagged core completed` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows all modules that are tagged as _core_ and _completed_."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing tags for a specific module : `viewtags`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows all tags attached to the specified module. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format `viewtags MODULE_CODE`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `viewtags cs2030`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Finding modules using the module code : `findmod`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows which semester the specified module is located at. +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `findmod MODULE_CODE`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `findmod cs1101s`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `findmod cs2103`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Finding module code using keywords : `getmodcode`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows module codes of all modules with names that contain the specified keywords. +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `getmodcode KEYWORDS`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `getmodcode algorithms`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `getmodcode programming`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing prerequisites of a module : `prereq`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows all prerequisite modules for the specified module. +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `prereq MODULE_CODE`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `prereq cs2040`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing total completed MCs : `mcs`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows the current total MCs for all *completed* modules. +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `mcs`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing focus area : `viewfocusarea`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows the focus area that the user has previously declared. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `viewfocusarea`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing modules that can be taken in a given semester : `validmods`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Shows all the modules that can be taken in a given semester based on whether prerequisites have been met. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Format: `validmods SEMESTER`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "* `validmods y2s1`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "\u003d\u003d\u003d Verification"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "\u003d\u003d\u003d\u003d Error messages"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "Displays a useful error message if the input is invalid. For example, it should highlight wrong commands, wrong numbers of arguments, or arguments in the wrong format."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "\u003d\u003d\u003d\u003d Checking a study plan\u0027s feasibility"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "Shows details about what requirements are left to be fulfilled,"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "such as modules that remain to be taken or prerequisites that have yet to be satisfied. +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "Format: `check [AREA]`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* `check` -- checks all graduation requirements by default +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* `check core` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* `check focus` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* `check prereq` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* `check mc` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* `check MODULE` -- checks if the module is valid, listing issues with its prerequisites +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "* `check SEMESTER` -- checks if all modules in the semester are valid"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "\u003d\u003d\u003d\u003d Displays"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "Highlights a module in red if it doesn\u0027t satisfy any of its prerequisites, displaying these required modules as tags."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "The study plan will have a tick or cross beside it, which shows if the entire plan is feasible."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 147,
      "andyylam": 43,
      "yaaanch": 26,
      "LiuZechu": 106,
      "halfwhole": 24,
      "-": 91
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "andyylam": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.storage.JsonModulePlannerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.storage.JsonModulesInfoStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.storage.ModulePlannerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.storage.ModulesInfoStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ModulePlanner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlannerStorage modulePlannerStorage \u003d new JsonModulePlannerStorage(userPrefs.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulesInfoStorage modulesInfoStorage \u003d new JsonModulesInfoStorage(config.getModulesInfoFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulesInfo modulesInfo \u003d initModulesInfo(modulesInfoStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        // TODO: modulesInfo is not used from here on out -- use it with ModelManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        // These show how the module information could be used for verification"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        modulesInfo.verify(\"CS4248\", Arrays.asList(\"CS3243\", \"ST2334\")); // true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        modulesInfo.verify(\"CS4248\", Arrays.asList(\"CS3245\", \"ST2334\")); // true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        modulesInfo.verify(\"CS4248\", Arrays.asList(\"CS3243\", \"ST2131\")); // false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        storage \u003d new StorageManager(modulePlannerStorage, userPrefsStorage, modulesInfoStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, modulesInfo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s module planner and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * The data from the sample module planner will be used instead if {@code storage}\u0027s module planner is not found,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * or an empty module planner will be used instead if errors occur when reading {@code storage}\u0027s module planner."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, ModulesInfo modulesInfo) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Optional\u003cReadOnlyModulePlanner\u003e modulePlannerOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ReadOnlyModulePlanner initialData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modulePlannerOptional \u003d storage.readModulePlanner(modulesInfo);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (!modulePlannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ModulePlanner\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            initialData \u003d modulePlannerOptional.orElseGet(() -\u003e SampleDataUtil.getSampleModulePlanner(modulesInfo));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with a sample ModulePlanner\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            initialData \u003d SampleDataUtil.getSampleModulePlanner(modulesInfo);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with a sample ModulePlanner\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            initialData \u003d SampleDataUtil.getSampleModulePlanner(modulesInfo);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new ModelManager(initialData, userPrefs, modulesInfo);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ModulePlanner\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns a {@code ModulesInfo} using the file at {@code storage}\u0027s modules info file path."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    protected ModulesInfo initModulesInfo(ModulesInfoStorage storage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        Path prefsFilePath \u003d storage.getModulesInfoPath();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        logger.info(\"Using modules info file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulesInfo initializedModulesInfo;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            Optional\u003cModulesInfo\u003e prefsOptional \u003d storage.readModulesInfo();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            initializedModulesInfo \u003d prefsOptional.orElse(new ModulesInfo());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            logger.warning(\"ModulesInfo file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                    + \"Will proceed without modules information\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            initializedModulesInfo \u003d new ModulesInfo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting without modules information\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            initializedModulesInfo \u003d new ModulesInfo();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return initializedModulesInfo;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        logger.info(\"Starting ModulePlanner \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Module Planner ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 15,
      "andyylam": 3,
      "LiuZechu": 5,
      "halfwhole": 38,
      "-": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private Path modulesInfoFilePath \u003d Paths.get(\"data/modules_cs.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public Path getModulesInfoFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return modulesInfoFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halfwhole": 5,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return \"Width : \" + windowWidth + \"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                + \"Height : \" + windowHeight + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                + \"Position : \" + windowCoordinates;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX \u003d \"The study plan index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_STUDYPLANS_LISTED_OVERVIEW \u003d \"%1$d study plans listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 2,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the ModulePlanner."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @see seedu.address.model.Model#getModulePlanner()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    ReadOnlyModulePlanner getModulePlanner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "     * Returns the current active StudyPlan."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    StudyPlan getActiveStudyPlan();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of study plans"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    ObservableList\u003cStudyPlan\u003e getFilteredStudyPlanList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the user prefs\u0027 module planner file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    Path getModulePlannerFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 8,
      "andyylam": 4,
      "yaaanch": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.ModulePlannerParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final ModulePlannerParser modulePlannerParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlannerParser \u003d new ModulePlannerParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Command command \u003d modulePlannerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            storage.saveModulePlanner(model.getModulePlanner());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ReadOnlyModulePlanner getModulePlanner() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return model.getModulePlanner();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public StudyPlan getActiveStudyPlan() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        return model.getActiveStudyPlan();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ObservableList\u003cStudyPlan\u003e getFilteredStudyPlanList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return model.getFilteredStudyPlanList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return model.getModulePlannerFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 13,
      "yaaanch": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 6,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Module Planner as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDYPLANS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Lists all study plans in the module planner to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all study plans\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        model.updateFilteredStudyPlanList(PREDICATE_SHOW_ALL_STUDYPLANS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cli/AddModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Adds module to a semester"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmodule\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \": Assigns the specified module to a given semester of the current study plan.\\n. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module %1$s added to %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the semester\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final SemesterName sem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public AddModuleCommand(String moduleCode, SemesterName sem) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(sem);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.sem \u003d sem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (model.semesterHasModule(this.moduleCode, this.sem)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        model.addModule(moduleCode, sem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, moduleCode, sem));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 sem.equals(((AddModuleCommand) other).sem)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((AddModuleCommand) other).moduleCode));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cli/BlockCurrentSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Blocks the current semester with a specified reason"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class BlockCurrentSemesterCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"block\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \": Block off the given semester, for reasons such as exchange, LOA, etc.\\n. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Semester %1$s blocked\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final SemesterName sem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final String reason;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public BlockCurrentSemesterCommand(SemesterName sem, String reason) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(sem);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.sem \u003d sem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        model.blockSemester(sem, reason);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sem));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || (other instanceof BlockCurrentSemesterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 sem.equals(((BlockCurrentSemesterCommand) other).sem));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cli/DeleteModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Removes a module from a semester"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \":Removes the specified module to a given semester of the current study plan.\\n. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module %1$s removed from %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MODULE_DOES_NOT_EXIST \u003d \"This module does not exist in the semester\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final SemesterName sem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public DeleteModuleCommand(String moduleCode, SemesterName sem) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(sem);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.sem \u003d sem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!model.semesterHasModule(this.moduleCode, this.sem)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new CommandException(MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        model.removeModule(moduleCode, sem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, moduleCode, sem));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 sem.equals(((DeleteModuleCommand) other).sem)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((DeleteModuleCommand) other).moduleCode));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andyylam": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cli/NameUeFromSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Names a UE from a given semester, e.g. UE -\u003e GER1000"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class NameUeFromSemesterCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"nameue\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \": Names a UE from the given semester with the given module name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \"This feature is purely for aesthetic purposes and has no functional implications.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \"MODULE_CODE\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module %1$s added to %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the semester\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final SemesterName sem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public NameUeFromSemesterCommand(String moduleCode, SemesterName sem) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(sem);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.sem \u003d sem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (model.semesterHasUe(this.sem)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        model.renameUeInSemester(sem, moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, moduleCode, sem));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || (other instanceof NameUeFromSemesterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 sem.equals(((NameUeFromSemesterCommand) other).sem)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((NameUeFromSemesterCommand) other).moduleCode));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cli/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.commands.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        model.redoStudyPlan();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        model.updateStudyPlan(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cli/SetCurrentSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Sets a semester as the current semester"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class SetCurrentSemesterCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setcurrent\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \": Sets the given semester as the current one. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \"Semesters before the specified semester will be locked and therefore modules cannot\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \" be added or removed from them.\\n \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Semester %1$s has been set as the current semester\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final SemesterName sem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public SetCurrentSemesterCommand(SemesterName sem) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(sem);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.sem \u003d sem;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        model.setSemester(sem);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sem));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || (other instanceof SetCurrentSemesterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 sem.equals(((SetCurrentSemesterCommand) other).sem));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cli/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.commands.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        model.undoStudyPlan();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        model.updateStudyPlan(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/datamanagement/CreateTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Creates a new tag."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class CreateTagCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"newtag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Creates a new tag type. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + PREFIX_TAG + \"TAG_NAME \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"newtag t/exchange\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag created: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_NAME \u003d UserTag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates an {@code CreateTagCommand} to create a tag with the given name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CreateTagCommand(String tagName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!UserTag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TAG_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan activeStudyPlan \u003d model.getActiveStudyPlan();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList uniqueTagList \u003d activeStudyPlan.getTags();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (uniqueTagList.getMapTags().containsKey(tagName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UserTag toCreate \u003d new UserTag(tagName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueTagList.addTag(toCreate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toCreate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 62,
      "andyylam": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/datamanagement/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Finds and lists all studyPlans in module planner whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //todo modify"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all studyPlans whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        model.updateFilteredStudyPlanList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                String.format(Messages.MESSAGE_STUDYPLANS_LISTED_OVERVIEW, model.getFilteredStudyPlanList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 7,
      "andyylam": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/datamanagement/RemoveTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Removes a {@code Tag} from a {@code Module}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class RemoveTagCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removetag\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Removes the specified tag from the specified module \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"MODULE_CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"TAG_NAME \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"remove CS3230 exchange\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag removed %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"This module does not have the specified tag\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_INVALID_DEFAULT_TAG_MODIFICATION \u003d \"Default tags cannot be removed\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates an {@code RemoveTagCommand} to move a tag with the given name from the specified module."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param tagName    The name of the tag."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param moduleCode The module code of the module from which the tag is to be deleted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public RemoveTagCommand(String tagName, String moduleCode) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireAllNonNull(tagName, moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan activeStudyPlan \u003d model.getActiveStudyPlan();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        HashMap\u003cString, Module\u003e moduleHashMap \u003d activeStudyPlan.getModules();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Module targetModule \u003d moduleHashMap.get(moduleCode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        boolean matches \u003d checkMatch(targetModule, tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!matches) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_TAG_NOT_FOUND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList uniqueTagList \u003d activeStudyPlan.getTags();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        HashMap\u003cString, Tag\u003e tagHashMap \u003d uniqueTagList.getMapTags();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Tag toDelete \u003d tagHashMap.get(tagName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (toDelete.isDefault()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DEFAULT_TAG_MODIFICATION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        targetModule.getTags().remove((UserTag) toDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Checks if there are any tags attached to the current module that has the given tag name."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param currentModule The module with an existing list of tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param tagName       The name of the tag that is to be checked."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return True if the module has a tag with the given name."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private boolean checkMatch(Module currentModule, String tagName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList tags \u003d currentModule.getTags();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            boolean match \u003d tag.getTagName().equals(tagName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (match) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 92,
      "andyylam": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/datamanagement/RenameTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.exceptions.InvalidTagModificationException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Renames a tag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class RenameTagCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"renametag\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Renames the tag with the specified original name \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"with the specified new name. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"ORIGINAL_TAG_NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"NEW_TAG_NAME \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"rename exchange SEP\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag renamed %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"A tag with the given tag name cannot be found\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_INVALID_DEFAULT_TAG_MODIFICATION \u003d \"Default tags cannot be renamed\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final String originalTagName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final String newTagName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates an {@code RenameTagCommand} to rename a tag with the given original name to the given new name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param originalTagName The original name of the tag."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param newTagName      The new name of the tag."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public RenameTagCommand(String originalTagName, String newTagName) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireAllNonNull(originalTagName, newTagName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.originalTagName \u003d originalTagName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.newTagName \u003d newTagName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan activeStudyPlan \u003d model.getActiveStudyPlan();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList uniqueTagList \u003d activeStudyPlan.getTags();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        UserTag toRename;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            toRename \u003d (UserTag) getTagToRename(uniqueTagList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        } catch (TagNotFoundException e1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_TAG_NOT_FOUND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        } catch (InvalidTagModificationException e2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DEFAULT_TAG_MODIFICATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        toRename.rename(newTagName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRename));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Tag getTagToRename(UniqueTagList uniqueTagList) throws TagNotFoundException,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            InvalidTagModificationException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        boolean tagExists \u003d uniqueTagList.getMapTags().containsKey(originalTagName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!tagExists) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Tag targetTag \u003d uniqueTagList.getMapTags().get(originalTagName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (targetTag.isDefault()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new InvalidTagModificationException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return targetTag;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 76,
      "andyylam": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/datamanagement/TagModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Adds a tag to a module."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class TagModuleCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Adds the specified tag to the specified module. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + PREFIX_TAG + \"TAG_NAME \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"tag CS3230 t/exchange\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TAG_ADDED \u003d \"New tag created: %1$s \\n\" + \"Tag added to module \\n%2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag added to module \\n%1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_EXISTING_TAG \u003d \"This tag is already attached to this module\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CODE \u003d \"The provided module code is invalid\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private boolean newTagCreated \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates an {@code TagModuleCommand} to add a tag with the given name to the module of the given module code."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public TagModuleCommand(String tagName, String moduleCode) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireAllNonNull(tagName, moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan activeStudyPlan \u003d model.getActiveStudyPlan();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList uniqueTagList \u003d activeStudyPlan.getTags();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Tag toAdd \u003d getTagToAdd(uniqueTagList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            module \u003d getTargetModule(activeStudyPlan);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        } catch (ModuleNotFoundException exception) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (moduleContainsTag(module, toAdd)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTING_TAG);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        module.addTag(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (newTagCreated) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_TAG_ADDED, toAdd, module));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, module));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private boolean moduleContainsTag(Module module, Tag tag) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return module.getTags().contains(tag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Module getTargetModule(StudyPlan activeStudyPlan) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        HashMap\u003cString, Module\u003e moduleHashMap \u003d activeStudyPlan.getModules();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cString\u003e moduleNames \u003d moduleHashMap.keySet();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (String moduleName : moduleNames) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            Module currentModule \u003d moduleHashMap.get(moduleName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (currentModule.getModuleCode().toString().equals(moduleCode)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                return currentModule;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Tag getTagToAdd(UniqueTagList uniqueTagList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        boolean tagExists \u003d uniqueTagList.getMapTags().containsKey(tagName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Tag toAdd;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!tagExists) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            toAdd \u003d createNewTag(tagName, uniqueTagList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            Tag existingTag \u003d uniqueTagList.getMapTags().get(tagName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            toAdd \u003d existingTag;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates a new tag with the given tag name and adds it to the {@code UniqueTaglist}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param tagName       The name of the tag."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param uniqueTagList The list that the tag is to be added to."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return The tag that was created."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private UserTag createNewTag(String tagName, UniqueTagList uniqueTagList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UserTag toCreate \u003d new UserTag(tagName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueTagList.addTag(toCreate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        newTagCreated \u003d true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return toCreate;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 124,
      "andyylam": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/datamanagement/ViewAllTagsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Shows all tags in the active study plan."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class ViewAllTagsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewalltags\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Shows all tags in the study plan. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"viewalltags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All tags shown %1$s.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates an {@code ViewAllTagsCommand} to show all tags in the active study plan."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ViewAllTagsCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan activeStudyPlan \u003d model.getActiveStudyPlan();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList uniqueTagList \u003d activeStudyPlan.getTags();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, uniqueTagList));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/datamanagement/ViewDefaultTagsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.DefaultTag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Shows all default tags."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class ViewDefaultTagsCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewdefaulttags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Shows all default tags. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"viewdefaulttags\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All default tags shown %1$s.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates an {@code ViewDefaultTagsCommand} to show all default tags in the active study plan."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ViewDefaultTagsCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan activeStudyPlan \u003d model.getActiveStudyPlan();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList uniqueTagList \u003d activeStudyPlan.getTags();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cDefaultTag\u003e defaultTags \u003d getDefaultTags(uniqueTagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, defaultTags));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Set\u003cDefaultTag\u003e getDefaultTags(UniqueTagList uniqueTagList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Iterator\u003cTag\u003e tagIterator \u003d uniqueTagList.iterator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cDefaultTag\u003e defaultTags \u003d new HashSet\u003cDefaultTag\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        while (tagIterator.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            Tag currentTag \u003d tagIterator.next();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (currentTag.isDefault()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                defaultTags.add((DefaultTag) currentTag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return defaultTags;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/datamanagement/ViewTaggedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Shows all modules attached to specific tags."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class ViewTaggedCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewtagged\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Shows all modules attached to specific tags. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"TAG_NAME... \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"viewtagged core completed\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All modules with the specified tags shown %1$s.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final String[] tagNames;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates an {@code ViewTaggedCommand} to show all modules with the specified tags."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ViewTaggedCommand(String... tagNames) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.tagNames \u003d tagNames;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan activeStudyPlan \u003d model.getActiveStudyPlan();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        HashMap\u003cString, Module\u003e moduleHashMap \u003d activeStudyPlan.getModules();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cModule\u003e allMatchingModules \u003d getAllMatchingModules(moduleHashMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, allMatchingModules));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Set\u003cModule\u003e getMatchingModules(String tagName, HashMap\u003cString, Module\u003e moduleHashMap) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cString\u003e moduleNames \u003d moduleHashMap.keySet();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cModule\u003e matchingModules \u003d new HashSet\u003cModule\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (String moduleName : moduleNames) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            Module currentModule \u003d moduleHashMap.get(moduleName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            boolean matches \u003d checkMatch(currentModule, tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (matches) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                matchingModules.add(currentModule);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return matchingModules;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Set\u003cModule\u003e getAllMatchingModules(HashMap\u003cString, Module\u003e moduleHashMap) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cModule\u003e allMatchingModules \u003d new HashSet\u003cModule\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (String tagName : tagNames) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            Set\u003cModule\u003e matchingModules \u003d getMatchingModules(tagName, moduleHashMap);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (allMatchingModules.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                allMatchingModules.addAll(matchingModules);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                allMatchingModules \u003d allMatchingModules.stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                        .filter(matchingModules::contains)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                        .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return allMatchingModules;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Checks if there are any tags attached to the current module that has the given tag name."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param currentModule The module with an existing list of tags."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param tagName       The name of the tag that is to be checked."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return True if the module has a tag with the given name."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private boolean checkMatch(Module currentModule, String tagName) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList tags \u003d currentModule.getTags();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            boolean match \u003d tag.getTagName().equals(tagName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (match) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 100,
      "andyylam": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/datamanagement/ViewTagsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Shows all tags attached to a specific module."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class ViewTagsCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewtags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Shows all tags attached to a specific module. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"MODULE CODE \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"viewtags CS3230\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All tags for the module shown %1$s.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CODE \u003d \"The provided module code is invalid\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates an {@code ViewTagsCommand} to show all tags attached to the given module."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ViewTagsCommand(String moduleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan activeStudyPlan \u003d model.getActiveStudyPlan();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            module \u003d getTargetModule(activeStudyPlan);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        } catch (ModuleNotFoundException exception) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList tags \u003d module.getTags();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tags));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Module getTargetModule(StudyPlan activeStudyPlan) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        HashMap\u003cString, Module\u003e moduleHashMap \u003d activeStudyPlan.getModules();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cString\u003e moduleNames \u003d moduleHashMap.keySet();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (String moduleName : moduleNames) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            Module currentModule \u003d moduleHashMap.get(moduleName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (currentModule.getModuleCode().toString().equals(moduleCode)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                return currentModule;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gui/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/storage/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Clears the module planner."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module planner has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        model.setModulePlanner(new ModulePlanner());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 3,
      "andyylam": 3,
      "halfwhole": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/storage/CommitStudyPlanEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.logic.commands.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Commits current active study plan with a commit message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class CommitStudyPlanEditCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"commit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Commits the current active studyPlan.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            + \"commit message \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            + \"NOC halfyear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"study plan commited: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMMIT \u003d \"This commit already exists in the commit list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final String commitMessage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Creates a CommitStudyPlanEditCommand to commit with the specified {@code commitMessage}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public CommitStudyPlanEditCommand(String commitMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(commitMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.commitMessage \u003d commitMessage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        //        if (model.hasStudyPlan(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        //            throw new CommandException(MESSAGE_DUPLICATE_STUDYPLAN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        model.commitActiveStudyPlan(commitMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, commitMessage));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                || (other instanceof CommitStudyPlanEditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                \u0026\u0026 commitMessage.equals(((CommitStudyPlanEditCommand) other).commitMessage));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/storage/CreateStudyPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Creates a new studyPlan."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class CreateStudyPlanCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"newplan\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new studyPlan.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"PLAN_TITLE \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"newplan NOC halfyear\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New studyPlan added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDYPLAN \u003d \"This studyPlan already exists in the module planner\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final String studyPlanName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates an CreateStudyPlanCommand to add the specified {@code StudyPlan}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public CreateStudyPlanCommand(String studyPlanName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(studyPlanName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlanName \u003d studyPlanName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        ModulesInfo modulesInfo \u003d model.getModulesInfo();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan studyPlanToAdd \u003d new StudyPlan(new Title(studyPlanName), modulesInfo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (model.hasStudyPlan(studyPlanToAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDYPLAN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        model.addStudyPlan(studyPlanToAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, studyPlanName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                || (other instanceof CreateStudyPlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                \u0026\u0026 studyPlanName.equals(((CreateStudyPlanCommand) other).studyPlanName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 44,
      "andyylam": 3,
      "LiuZechu": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/storage/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Deletes a study plan identified using it\u0027s displayed index from the module planner."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removeplan\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \": Deletes the study plan identified by the index number used in the displayed study plan list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDYPLAN_SUCCESS \u003d \"Deleted StudyPlan: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MESSAGE_NO_MORE_STUDYPLAN \u003d \"You don\u0027t have any study plan currently. Create now!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        List\u003cStudyPlan\u003e lastShownList \u003d model.getFilteredStudyPlanList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e StudyPlan.getTotalNumberOfStudyPlans()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan studyPlanToDelete \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (StudyPlan studyPlan : lastShownList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (studyPlan.getIndex() \u003d\u003d targetIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                studyPlanToDelete \u003d studyPlan;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (studyPlanToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        model.deleteStudyPlan(studyPlanToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // if the deleted study plan is active, the first study plan in the list will be made active automatically"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (model.getActiveStudyPlan().equals(studyPlanToDelete)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            boolean isSuccessful \u003d model.activateFirstStudyPlan();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (!isSuccessful) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                return new CommandResult(MESSAGE_NO_MORE_STUDYPLAN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDYPLAN_SUCCESS, studyPlanToDelete));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 8,
      "andyylam": 3,
      "LiuZechu": 23,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/storage/EditTitleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.studyplan.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Edits the title of an existing studyPlan in the module planner."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class EditTitleCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO: implement this entire class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"title\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Edits the title of the study plan \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"PLAN_TITLE \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"title Algo and Graphics\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the studyPlan identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            + \"by the index number used in the displayed studyPlan list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDYPLAN_SUCCESS \u003d \"Edited StudyPlan: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDYPLAN \u003d \"This studyPlan already exists in the module planner.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final EditStudyPlanDescriptor editStudyPlanDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param //index                   of the studyPlan in the filtered studyPlan list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param //editStudyPlanDescriptor details to edit the studyPlan with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public EditCommand(Index index, EditStudyPlanDescriptor editStudyPlanDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(editStudyPlanDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.editStudyPlanDescriptor \u003d new EditStudyPlanDescriptor(editStudyPlanDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        List\u003cStudyPlan\u003e lastShownList \u003d model.getFilteredStudyPlanList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlanToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedStudyPlan \u003d createEditedStudyPlan(studyPlanToEdit, editStudyPlanDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!studyPlanToEdit.isSameStudyPlan(editedStudyPlan) \u0026\u0026 model.hasStudyPlan(editedStudyPlan)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDYPLAN);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        model.setStudyPlan(studyPlanToEdit, editedStudyPlan);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        model.updateFilteredStudyPlanList(PREDICATE_SHOW_ALL_STUDYPLANS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDYPLAN_SUCCESS, editedStudyPlan));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CommandResult(\"this is just a temporary holder\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Creates and returns a {@code StudyPlan} with the details of {@code studyPlanToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * edited with {@code editStudyPlanDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static StudyPlan createEditedStudyPlan(StudyPlan studyPlanToEdit,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    EditStudyPlanDescriptor editStudyPlanDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assert studyPlanToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Name updatedName \u003d editStudyPlanDescriptor.getName().orElse(studyPlanToEdit.getName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Phone updatedPhone \u003d editStudyPlanDescriptor.getPhone().orElse(studyPlanToEdit.getPhone());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Email updatedEmail \u003d editStudyPlanDescriptor.getEmail().orElse(studyPlanToEdit.getEmail());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Address updatedAddress \u003d editStudyPlanDescriptor.getAddress().orElse(studyPlanToEdit.getAddress());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cUserTag\u003e updatedTags \u003d editStudyPlanDescriptor.getTags().orElse(studyPlanToEdit.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new StudyPlan(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                \u0026\u0026 editStudyPlanDescriptor.equals(e.editStudyPlanDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Stores the details to edit the studyPlan with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * corresponding field value of the studyPlan."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static class EditTitleStudyPlanDescriptor {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // TODO: implement this entire class"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        private Set\u003cUserTag\u003e tags;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        public EditTitleStudyPlanDescriptor() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public EditTitleStudyPlanDescriptor(EditTitleStudyPlanDescriptor toCopy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void setTags(Set\u003cUserTag\u003e tags) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public Optional\u003cSet\u003cUserTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (!(other instanceof EditStudyPlanDescriptor)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            EditStudyPlanDescriptor e \u003d (EditStudyPlanDescriptor) other;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 81,
      "andyylam": 10,
      "-": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/verification/CheckCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.commands.verification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Checks if requirements are met for the study plan."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class CheckCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"check\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            + \": Checks if requirements are met for your study plan.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            + \"Parameters: MODULE (must be a valid module code)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2040S\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public CheckCommand(String moduleCode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        String result \u003d model.getModuleInformation(this.moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            throw new CommandException(\"Module not found!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (!(other instanceof CheckCommand)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        CheckCommand e \u003d (CheckCommand) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return moduleCode.equals(e.moduleCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3,
      "halfwhole": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * commands"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final Prefix PREFIX_SEMESTER \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModulePlannerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.AddModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.BlockCurrentSemesterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.DeleteModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.NameUeFromSemesterCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.SetCurrentSemesterCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.datamanagement.CreateTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.datamanagement.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.datamanagement.TagModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.gui.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.commands.storage.CommitStudyPlanEditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.commands.storage.CreateStudyPlanCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.commands.storage.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.verification.CheckCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.cli.AddModuleParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.cli.BlockCurrentSemesterParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.cli.DeleteModuleFromSemesterParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.cli.NameUeFromSemesterParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.cli.SetCurrentSemesterParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.datamanagement.CreateTagCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.datamanagement.FindCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.datamanagement.TagModuleCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.parser.storage.CommitStudyPlanEditsParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.parser.storage.CreateStudyPlanCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.parser.storage.DeleteStudyPlanParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.verification.CheckCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class ModulePlannerParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return new AddModuleParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case BlockCurrentSemesterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return new BlockCurrentSemesterParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return new DeleteModuleFromSemesterParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case NameUeFromSemesterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return new NameUeFromSemesterParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case SetCurrentSemesterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return new SetCurrentSemesterParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        case CheckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return new CheckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        case CommitStudyPlanEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return new CommitStudyPlanEditsParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        case CreateStudyPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return new CreateStudyPlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return new DeleteStudyPlanParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        case CreateTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return new CreateTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        case TagModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return new TagModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 11,
      "andyylam": 27,
      "LiuZechu": 16,
      "halfwhole": 3,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMESTER \u003d \"Semester is not valid.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"Module specified is not valid.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Parses {@code semester} into an {@code SemesterName} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws ParseException if specified semester is not valid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static SemesterName parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String trimmedSemester \u003d semester.trim().toUpperCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!trimmedSemester.matches(\"Y\\\\dS\\\\w?\\\\d\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        int year \u003d Character.getNumericValue(trimmedSemester.charAt(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        int sem \u003d Character.getNumericValue(trimmedSemester.charAt(trimmedSemester.length() - 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (trimmedSemester.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return SemesterName.getEnum(year, sem);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return SemesterName.getSpecialTermEnum(year, sem);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Checks whether or not the module is valid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws ParseException if specified module is not valid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static String parseModule(String module) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // TODO: Check module against megaList to ensure that it is valid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return module.toUpperCase().trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Parses a raw {@code String tagName} into a formatted tagName."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @throws ParseException if the given {@code tagName} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static String parseTag(String tagName) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String trimmedTagName \u003d tagName.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTagName)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return trimmedTagName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static Set\u003cString\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        final Set\u003cString\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 9,
      "andyylam": 22,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cli/AddModuleParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.parser.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class AddModuleParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * and returns an AddModuleCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        SemesterName semesterName \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String moduleCode \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new AddModuleCommand(moduleCode, semesterName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cli/BlockCurrentSemesterParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.parser.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.BlockCurrentSemesterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Parses input arguments and creates a new BlockCurrentSemesterCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class BlockCurrentSemesterParser implements Parser\u003cBlockCurrentSemesterCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BlockCurrentSemesterCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * and returns an BlockCurrentSemesterCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public BlockCurrentSemesterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String[] tokens \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String reason \u003d tokens.length \u003e\u003d 3 ? String.join(\" \","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                Arrays.copyOfRange(tokens, 3, tokens.length)) : \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    BlockCurrentSemesterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        SemesterName semesterName \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new BlockCurrentSemesterCommand(semesterName, reason);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cli/DeleteModuleFromSemesterParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.parser.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.DeleteModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Parses input arguments and creates a new DeleteModuleCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DeleteModuleFromSemesterParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * and returns an DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        SemesterName semesterName \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String moduleCode \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new DeleteModuleCommand(moduleCode, semesterName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cli/NameUeFromSemesterParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.parser.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.NameUeFromSemesterCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Parses input arguments and creates a new NameUEFromSemesterCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class NameUeFromSemesterParser implements Parser\u003cNameUeFromSemesterCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NameUEFromSemesterCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * and returns an NameUEFromSemesterCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public NameUeFromSemesterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String[] tokens \u003d args.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || tokens.length !\u003d 2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || tokens[1].isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    NameUeFromSemesterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        SemesterName semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String ueName \u003d tokens[1].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new NameUeFromSemesterCommand(ueName, semester);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cli/SetCurrentSemesterParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.parser.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.cli.SetCurrentSemesterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Parses input arguments and creates a new SetCurrentSemesterCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class SetCurrentSemesterParser implements Parser\u003cSetCurrentSemesterCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCurrentSemesterCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * and returns an SetCurrentSemesterCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public SetCurrentSemesterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    SetCurrentSemesterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        SemesterName semesterName \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new SetCurrentSemesterCommand(semesterName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/datamanagement/CreateTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.parser.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.datamanagement.CreateTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Parses input arguments and creates a new CreateTagCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class CreateTagCommandParser implements Parser\u003cCreateTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateTagCommand and returns an"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * CreateTagCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public CreateTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                    CreateTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String tagName \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new CreateTagCommand(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/datamanagement/DeleteTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.cli.DeleteTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new DeleteTagCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the DeleteTagCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an DeleteTagCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public DeleteTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    DeleteTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new DeleteTagCommand(tag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/datamanagement/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.parser.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.datamanagement.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * FindCommand and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 1,
      "andyylam": 7,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/datamanagement/RemoveTagFromAllCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.cli.RemoveTagFromAllCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new RemoveTagFromAllCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class RemoveTagFromAllCommandParser implements Parser\u003cRemoveTagFromAllCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the RemoveTagFromAllCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an RemoveTagFromAllCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public RemoveTagFromAllCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    RemoveTagFromAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new RemoveTagFromAllCommand(tag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/datamanagement/RemoveTagFromModuleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.cli.RemoveTagFromModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new RemoveTagFromModuleCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class RemoveTagFromModuleCommandParser implements Parser\u003cRemoveTagFromModuleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the RemoveTagFromModuleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an RemoveTagFromModuleCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public RemoveTagFromModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_TAG)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    RemoveTagFromModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String module \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new RemoveTagFromModuleCommand(module, tag);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/datamanagement/TagModuleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.parser.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.datamanagement.TagModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Parses input arguments and creates a new TagModuleCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class TagModuleCommandParser implements Parser\u003cTagModuleCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagModuleCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * and returns an TagModuleCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public TagModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_TAG)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                    TagModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String moduleCode \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String tagName \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new TagModuleCommand(tagName, moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/datamanagement/ViewModuleTagsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.cli.ViewModuleTagsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new ViewModuleTagsCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class ViewModuleTagsCommandParser implements Parser\u003cViewModuleTagsCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the ViewModuleTagsCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an ViewModuleTagsCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public ViewModuleTagsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    ViewModuleTagsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String module \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new ViewModuleTagsCommand(module, tag);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/datamanagement/ViewPrerequisitesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.datamanagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.cli.ViewPrerequisitesCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new ViewPrerequisitesCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class ViewPrerequisitesCommandParser implements Parser\u003cViewPrerequisitesCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the ViewPrerequisitesCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an ViewPrerequisitesCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public ViewPrerequisitesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    ViewPrerequisitesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String module \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new ViewPrerequisitesCommand(module);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/gui/CollapseSemesterParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new CollapseSemesterCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class CollapseSemesterParser implements Parser\u003cCollapseSemesterCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the CollapseSemesterCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an CollapseSemesterCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public CollapseSemesterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    CollapseSemesterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        SemesterName semesterName \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new CollapseSemesterCommand(semesterName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/gui/ExpandSemesterParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new ExpandSemesterCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class ExpandSemesterParser implements Parser\u003cExpandSemesterCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the ExpandSemesterCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an ExpandSemesterCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public ExpandSemesterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    ExpandSemesterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        SemesterName semesterName \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new ExpandSemesterCommand(semesterName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/gui/SpecificHelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.SpecificHelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new SpecificHelpCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class SpecificHelpCommandParser implements Parser\u003cSpecificHelpCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * SpecificHelpCommand and returns an SpecificHelpCommand object for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public SpecificHelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String commandName \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (commandName.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SpecificHelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new SpecificHelpCommand(commandName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/ActivateStudyPlanParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.ActivateStudyPlanCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new CreateStudyPlanCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class ActivateStudyPlanParser implements Parser\u003cActivateStudyPlanCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * ActivateStudyPlanCommand and returns an ActivateStudyPlanCommand object for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public ActivateStudyPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!trimmedArgs.matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivateStudyPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        int studyPlanIndex \u003d Integer.parseInt(trimmedArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new ActivateStudyPlanCommand(studyPlanIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/CommitStudyPlanEditsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.commands.storage.CommitStudyPlanEditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Parses input arguments and creates a new CommitStudyPlanEditCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class CommitStudyPlanEditsParser implements Parser\u003cCommitStudyPlanEditCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * CommitStudyPlanEditCommand and returns an CommitStudyPlanEditCommand object for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public CommitStudyPlanEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        String commitName \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (commitName.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CommitStudyPlanEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new CommitStudyPlanEditCommand(commitName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/CreateStudyPlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.commands.storage.CreateStudyPlanCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Parses input arguments and creates a new CreateStudyPlanCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class CreateStudyPlanCommandParser implements Parser\u003cCreateStudyPlanCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * CreateStudyPlanCommand and returns an CreateStudyPlanCommand object for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public CreateStudyPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        String studyPlanName \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (studyPlanName.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateStudyPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new CreateStudyPlanCommand(studyPlanName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "LiuZechu": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/DeleteSemesterFromStudyPlanParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new DeleteSemesterFromStudyPlanCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class DeleteSemesterFromStudyPlanParser implements Parser\u003cDeleteSemesterFromStudyPlanCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the DeleteSemesterFromStudyPlanCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an DeleteSemesterFromStudyPlanCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public DeleteSemesterFromStudyPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    DeleteSemesterFromStudyPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        SemesterName semesterName \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new DeleteSemesterFromStudyPlanCommand(semesterName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/DeleteStudyPlanParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.commands.storage.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Parses input arguments and creates a new DeleteStudyPlanParser object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class DeleteStudyPlanParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * DeleteStudyPlanCommand and returns an DeleteStudyPlanCommand object for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (!trimmedArgs.matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Index studyPlanIndex \u003d Index.fromZeroBased(Integer.parseInt(trimmedArgs));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new DeleteCommand(studyPlanIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/EditStudyPlanTitleParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.EditStudyPlanTitleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.studyplan.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new EditStudyPlanTitleCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class EditStudyPlanTitleParser implements Parser\u003cEditStudyPlanTitleCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * EditStudyPlanTitleCommand and returns an EditStudyPlanTitleCommand object for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public EditStudyPlanTitleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String studyPlanName \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (studyPlanName.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudyPlanTitleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new EditStudyPlanTitleCommand(new Title(studyPlanName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/MoveSemesterAcrossStudyPlansCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new MoveSemesterAcrossStudyPlansCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class MoveSemesterAcrossStudyPlansCommandParser implements Parser\u003cMoveSemesterAcrossStudyPlansCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the MoveSemesterAcrossStudyPlansCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an MoveSemesterAcrossStudyPlansCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public MoveSemesterAcrossStudyPlansCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String[] argTokens \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || argTokens.length !\u003d 3"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argTokens[1].matches(\"-?\\\\d+\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argTokens[2].matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    MoveSemesterAcrossStudyPlansCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        int sourceSemester \u003d Integer.parseInt(argTokens[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        int destSemester \u003d Integer.parseInt(argTokens[2]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        SemesterName semesterName \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new MoveSemesterAcrossStudyPlansCommand(semesterName, sourceSemester, destSemester);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/RevertCommitParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.RevertCommitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new CreateStudyPlanCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class RevertCommitParser implements Parser\u003cRevertCommitCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * RevertCommitCommand and returns an RevertCommitCommand object for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public RevertCommitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String[] commitToken \u003d args.trim().split(\".\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (commitToken.length !\u003d 2 || !commitToken[0].matches(\"-?\\\\d+\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !commitToken[1].matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RevertCommitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        int studyPlanIndex \u003d Integer.parseInt(commitToken[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        int commitNumber \u003d Integer.parseInt(commitToken[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new RevertCommitCommand(studyPlanIndex, commitNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/ViewCommitParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.ViewCommitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new CreateStudyPlanCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class ViewCommitParser implements Parser\u003cViewCommitCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * ViewCommitCommand and returns an ViewCommitCommand object for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public ViewCommitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String[] commitToken \u003d args.trim().split(\".\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (commitToken.length !\u003d 2 || !commitToken[0].matches(\"-?\\\\d+\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !commitToken[1].matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        int studyPlanIndex \u003d Integer.parseInt(commitToken[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        int commitNumber \u003d Integer.parseInt(commitToken[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new ViewCommitCommand(studyPlanIndex, commitNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/ViewDescriptionParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new ViewDescriptionCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class ViewDescriptionParser implements Parser\u003cViewDescriptionCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the ViewDescriptionCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * and returns an ViewDescriptionCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public ViewDescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    ViewDescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        SemesterName semesterName \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new ViewDescriptionCommand(semesterName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/storage/ViewStudyPlanParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//package seedu.address.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.ViewStudyPlanCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "///**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// * Parses input arguments and creates a new CreateStudyPlanCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//public class ViewStudyPlanParser implements Parser\u003cViewStudyPlanCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * ViewStudyPlanCommand and returns an ViewStudyPlanCommand object for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    public ViewStudyPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        if (!trimmedArgs.matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStudyPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        int studyPlanIndex \u003d Integer.parseInt(trimmedArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//        return new ViewStudyPlanCommand(studyPlanIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/verification/CheckCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.logic.parser.verification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.verification.CheckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Parses input arguments and creates a new CheckCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class CheckCommandParser implements Parser\u003cCheckCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * CheckCommand and returns a CheckCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public CheckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (\"\".equals(args)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return new CheckCommand(args.strip());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 6,
      "halfwhole": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Color.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Color is an enumeration of color values for tags."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public enum Color {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // TODO: set colors. These are placeholder values"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    RED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // place holder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns a color given a string with the name of the color."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Color toColor(String value) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (value.equals(\"red\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return RED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return RED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 15,
      "halfwhole": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    Predicate\u003cStudyPlan\u003e PREDICATE_SHOW_ALL_STUDYPLANS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the user prefs\u0027 module planner file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    Path getModulePlannerFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Sets the user prefs\u0027 module planner file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    void setModulePlannerFilePath(Path modulePlannerFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Replaces module planner data with the data in {@code ModulePlanner}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    void setModulePlanner(ReadOnlyModulePlanner modulePlanner);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns the ModulePlanner"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    ReadOnlyModulePlanner getModulePlanner();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if a StudyPlan with the same identity as {@code StudyPlan} exists in the module planner."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    boolean hasStudyPlan(StudyPlan studyPlan);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the current active {@code StudyPlan}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    StudyPlan getActiveStudyPlan();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Activates the first study plan in the list. If the list is null, prompts the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns true if successful, and returns false if no study plan exists."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    boolean activateFirstStudyPlan();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns an activated study plan with the given index populated with relevant details."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    StudyPlan activateStudyPlan(int index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Deletes the given StudyPlan."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * The StudyPlan must exist in the module planner."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    void deleteStudyPlan(StudyPlan target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Adds the given StudyPlan."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * {@code StudyPlan} must not already exist in the module planner."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    void addStudyPlan(StudyPlan studyPlan);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Replaces the given StudyPlan {@code target} with {@code editedStudyPlan}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * {@code target} must exist in the module planner."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * The StudyPlan identity of {@code editedStudyPlan} must not be the same as another existing StudyPlan"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * in the module planner."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    void setStudyPlan(StudyPlan target, StudyPlan editedStudyPlan);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns an unmodifiable view of the filtered StudyPlan list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    ObservableList\u003cStudyPlan\u003e getFilteredStudyPlanList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Updates the filter of the filtered StudyPlan list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    void updateFilteredStudyPlanList(Predicate\u003cStudyPlan\u003e predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d VERSION TRACKING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Commits the current active study plan with a commit message."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    void commitActiveStudyPlan(String commitMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MODULE INFORMATION \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns true if the module code is a valid, false otherwise."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    boolean isValidModuleCode(String moduleCode);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the ModulesInfo object in the module planner."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    ModulesInfo getModulesInfo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns the module information."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    String getModuleInformation(String moduleCode);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if a Semester contains a module with same identity as {@code module}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    boolean semesterHasModule(String moduleCode, SemesterName semesterName);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Adds specified module to specified semester"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    void addModule(String moduleCode, SemesterName sem);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Blocks specified semester with given reason"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    void blockSemester(SemesterName sem, String reason);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Removes module from semester"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    void removeModule(String moduleCode, SemesterName semesterName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Checks whether or not the specified semester contains a UE"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    boolean semesterHasUe(SemesterName semesterName);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    void renameUeInSemester(SemesterName semesterName, String moduleCode);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    void setSemester(SemesterName semester);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Semester getSemester(SemesterName semesterName);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 23,
      "andyylam": 44,
      "LiuZechu": 19,
      "halfwhole": 16,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Represents the in-memory model of the module planner data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final ModulePlanner modulePlanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final FilteredList\u003cStudyPlan\u003e filteredStudyPlans;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Initializes a ModelManager with the given ModulePlanner and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ModelManager(ReadOnlyModulePlanner modulePlanner, ReadOnlyUserPrefs userPrefs, ModulesInfo modulesInfo) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireAllNonNull(modulePlanner, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        logger.fine(\"Initializing with module planner: \" + modulePlanner + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.modulePlanner \u003d new ModulePlanner(modulePlanner, modulesInfo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        filteredStudyPlans \u003d new FilteredList\u003c\u003e(this.modulePlanner.getStudyPlanList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        this(new ModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return userPrefs.getModulePlannerFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setModulePlannerFilePath(Path modulePlannerFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(modulePlannerFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        userPrefs.setModulePlannerFilePath(modulePlannerFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModulePlanner \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setModulePlanner(ReadOnlyModulePlanner modulePlanner) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.modulePlanner.resetData(modulePlanner);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ReadOnlyModulePlanner getModulePlanner() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return modulePlanner;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean hasStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(studyPlan);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return modulePlanner.hasStudyPlan(studyPlan);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan getActiveStudyPlan() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return modulePlanner.getActiveStudyPlan();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan activateStudyPlan(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return modulePlanner.activateStudyPlan(index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean activateFirstStudyPlan() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return modulePlanner.activateFirstStudyPlan();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void deleteStudyPlan(StudyPlan target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlanner.removeStudyPlan(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void addStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlanner.addStudyPlan(studyPlan);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        updateFilteredStudyPlanList(PREDICATE_SHOW_ALL_STUDYPLANS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlan(StudyPlan target, StudyPlan editedStudyPlan) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireAllNonNull(target, editedStudyPlan);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlanner.setStudyPlan(target, editedStudyPlan);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Version Tracking \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void commitActiveStudyPlan(String commitMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        modulePlanner.commitActiveStudyPlan(commitMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module Information \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean isValidModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return modulePlanner.getModule(moduleCode) !\u003d null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public String getModuleInformation(String moduleCode) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return modulePlanner.getModuleInformation(moduleCode);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ModulesInfo getModulesInfo() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return modulePlanner.getModulesInfo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered StudyPlan List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code StudyPlan} backed by the internal list of"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * {@code versionedModulePlanner}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ObservableList\u003cStudyPlan\u003e getFilteredStudyPlanList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return filteredStudyPlans;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void updateFilteredStudyPlanList(Predicate\u003cStudyPlan\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        filteredStudyPlans.setPredicate(predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return modulePlanner.equals(other.modulePlanner)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                \u0026\u0026 filteredStudyPlans.equals(other.filteredStudyPlans);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean semesterHasModule(String moduleCode, SemesterName semesterName) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        Semester semester \u003d getSemester(semesterName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return semester.getModules().contains(moduleCode);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void addModule(String moduleCode, SemesterName semesterName) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.getActiveStudyPlan().addModuleToSemester(new ModuleCode(moduleCode), semesterName);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void removeModule(String moduleCode, SemesterName semesterName) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.getSemester(semesterName).removeModule(moduleCode);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Semester getSemester(SemesterName semesterName) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        for (Semester current : modulePlanner.getActiveStudyPlan().getSemesters()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            if (current.getSemesterName() \u003d\u003d semesterName) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return current;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        System.out.println(\"ERROR HERE\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void setSemester(SemesterName semester) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // TODO: setCurrentSemester in StudyPlan class"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // this.modulePlanner.getActiveStudyPlan().setCurrentSemester(semester);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean semesterHasUe(SemesterName semesterName) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // TODO: UE implementation"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // getSemester(semesterName).getModules()."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void renameUeInSemester(SemesterName semesterName, String moduleCode) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // TODO: UE implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void blockSemester(SemesterName sem, String reason) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // TODO: blockSemester in StudyPlan class"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // this.modulePlanner.getActiveStudyPlan().blockSemester(semester);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 37,
      "andyylam": 54,
      "LiuZechu": 23,
      "halfwhole": 12,
      "-": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModuleInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Represents information about a module."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class ModuleInfo {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private int mc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private boolean su;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private boolean isCore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private List\u003cString\u003e focusPrimaries;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private List\u003cString\u003e focusElectives;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private String prereqTreeString; // this is for reading from JSON"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private PrereqTree prereqTree; // this is actually what\u0027s being used"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public ModuleInfo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public ModuleInfo(String code, String name, int mc, boolean su, boolean isCore, List\u003cString\u003e focusPrimaries,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                      List\u003cString\u003e focusElectives, String description, String prereqTreeString) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.mc \u003d mc;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.su \u003d su;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.isCore \u003d isCore;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.focusPrimaries \u003d focusPrimaries;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.focusElectives \u003d focusElectives;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.prereqTreeString \u003d prereqTreeString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.prereqTree \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * This method should be called to create {@code prereqTree} after ModuleInfo is created or read from JSON"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.prereqTree \u003d parsePrereqTree(this.prereqTreeString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public PrereqTree getPrereqTree() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.prereqTree;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public int getMc() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean getIsCore() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return isCore;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public List\u003cString\u003e getFocusPrimaries() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.focusPrimaries;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public List\u003cString\u003e getFocusElectives() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.focusElectives;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean getSuEligibility() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return su;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns a String displaying all information about the module, in a human-readable format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public String getInformation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.code + \": \" + this.name + (this.isCore ? \"(Core module)\" : \"\") + \"\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                + this.mc + \" MCs, \" + (this.su ? \"\" : \"not \") + \"S/U-able\" + \"\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                + this.description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Parses the prerequisite tree from a given string."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @param s Given string representing the prerequisite tree. Either the empty string, a module code, or (OP _ _)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @return Prerequisite tree"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private PrereqTree parsePrereqTree(String s) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (\"\".equals(s)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        } else if (s.charAt(0) !\u003d \u0027(\u0027) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return new PrereqLeaf(s);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        // Split the string into list of items"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        String removeBrackets \u003d s.substring(1, s.length() - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        String[] operatorOperands \u003d removeBrackets.split(\" \", 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        String operator \u003d operatorOperands[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        String operandsString \u003d operatorOperands[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        List\u003cString\u003e operands \u003d splitOperands(operandsString);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        List\u003cPrereqTree\u003e children \u003d operands.stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                .map(operand -\u003e parsePrereqTree(operand))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return new PrereqNode(operator, children);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Splits the String of operands into its logical groupings."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Example: \"CS1 (AND (OR CS2 CS3) CS4) CS5\" \u003d\u003e [\"CS1\", \"(AND (OR CS2 CS3) CS4)\", \"CS5\"]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @param operands String that represents the operands all together"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @return List of Strings, where each represents a single operand to be further parsed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private List\u003cString\u003e splitOperands(String operands) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        int balance \u003d 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        for (char c : operands.toCharArray()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            sb.append(c);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            if (c \u003d\u003d \u0027 \u0027 \u0026\u0026 balance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                String trimmed \u003d sb.toString().trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                if (!\"\".equals(trimmed)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                    list.add(trimmed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                sb.setLength(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            } else if (c \u003d\u003d \u0027(\u0027) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                balance++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            } else if (c \u003d\u003d \u0027)\u0027 \u0026\u0026 --balance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                list.add(sb.toString().trim());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                sb.setLength(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (sb.length() \u003e 0) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            list.add(sb.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean verify(List\u003cString\u003e prevSemModuleCodes) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return prereqTree.verify(prevSemModuleCodes);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (!(other instanceof ModuleInfo)) { // this handles null as well"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModuleInfo o \u003d (ModuleInfo) other;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return code.equals(o.code)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 name.equals(o.name)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 mc \u003d\u003d o.mc"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 su \u003d\u003d o.su"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 isCore \u003d\u003d o.isCore"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 focusPrimaries.equals(o.focusPrimaries)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 focusElectives.equals(o.focusElectives)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 description.equals(o.description)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 prereqTreeString.equals(o.prereqTreeString)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 prereqTree.equals(o.prereqTree);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 4,
      "andyylam": 2,
      "LiuZechu": 8,
      "halfwhole": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModulePlanner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.UniqueStudyPlanList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.exceptions.StudyPlanNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.StudyPlanCommitManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.VersionTrackingManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Wraps all data at the module planner level"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Duplicates are not allowed (by .isSameStudyPlan comparison)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class ModulePlanner implements ReadOnlyModulePlanner {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final UniqueStudyPlanList studyPlans;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private StudyPlan activeStudyPlan;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final ModulesInfo modulesInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final VersionTrackingManager versionTrackingManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private SemesterName currentSemester;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ModulePlanner() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlans \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        modulesInfo \u003d new ModulesInfo();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        versionTrackingManager \u003d new VersionTrackingManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ModulePlanner(ModulesInfo modulesInfo) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlans \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.modulesInfo \u003d modulesInfo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        versionTrackingManager \u003d new VersionTrackingManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Creates an ModulePlanner using the studyPlans in the {@code toBeCopied}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ModulePlanner(ReadOnlyModulePlanner toBeCopied, ModulesInfo modulesInfo) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlans \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        activeStudyPlan \u003d toBeCopied.getActiveStudyPlan();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.modulesInfo \u003d modulesInfo;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        versionTrackingManager \u003d toBeCopied.getVersionTrackingManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Creates an ModulePlanner from JSON. This is used in {@code JsonSerializableModulePlanner}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ModulePlanner(UniqueStudyPlanList uniqueStudyPlanList, /*StudyPlan activeStudyPlan,*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                         ModulesInfo modulesInfo,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                         VersionTrackingManager versionTrackingManager) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlans \u003d uniqueStudyPlanList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // this.activeStudyPlan \u003d activeStudyPlan;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.modulesInfo \u003d modulesInfo;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.versionTrackingManager \u003d versionTrackingManager;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Replaces the contents of the person list with {@code studyPlans}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * {@code studyPlans} must not contain duplicate studyPlans."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setStudyPlans(List\u003cStudyPlan\u003e studyPlans) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlans.setStudyPlans(studyPlans);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Resets the existing data of this {@code ModulePlanner} with {@code newData}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void resetData(ReadOnlyModulePlanner newData) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        setStudyPlans(newData.getStudyPlanList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if a study plan with the same identity as {@code study plan} exists in the module planner."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean hasStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(studyPlan);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlans.contains(studyPlan);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Adds a study plan to the module planner."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The study plan must not already exist in the module planner."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void addStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlans.add(studyPlan);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Replaces the given study plan {@code target} in the list with {@code editedStudyPlan}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * {@code target} must exist in the module planner."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The person identity of {@code editedStudyPlan} must not be the same as another existing study plan"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * in the module planner."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setStudyPlan(StudyPlan target, StudyPlan editedStudyPlan) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(editedStudyPlan);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlans.setStudyPlan(target, editedStudyPlan);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the current active {@code StudyPlan}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan getActiveStudyPlan() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return activeStudyPlan;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Activates the study plan with the given index, and returns the active study plan populated with relevant"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * details."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan activateStudyPlan(int index) throws StudyPlanNotFoundException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Iterator\u003cStudyPlan\u003e iterator \u003d studyPlans.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            StudyPlan studyPlan \u003d iterator.next();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (studyPlan.getIndex() \u003d\u003d index) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                activeStudyPlan \u003d studyPlan;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (activeStudyPlan \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new StudyPlanNotFoundException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // construct the mega list of modules"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        HashMap\u003cString, Module\u003e megaModuleHash \u003d activeStudyPlan.getModules();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (Module module : megaModuleHash.values()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            ModuleInfo moduleInfo \u003d modulesInfo.find(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            module.setName(new Name(moduleInfo.getName()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            module.setMcCount(moduleInfo.getMc());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // replace skeletal modules under semesters with the actual reference to modules in mega list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Iterator\u003cSemester\u003e semesterIterator \u003d activeStudyPlan.getSemesters().iterator();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        while (semesterIterator.hasNext()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Semester semester \u003d semesterIterator.next();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            UniqueModuleList uniqueModuleList \u003d semester.getModules();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Iterator\u003cModule\u003e moduleIterator \u003d uniqueModuleList.iterator();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            while (moduleIterator.hasNext()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                Module skeletalModule \u003d moduleIterator.next();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                Module actualModule \u003d megaModuleHash.get(skeletalModule.getModuleCode().toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                uniqueModuleList.setModule(skeletalModule, actualModule);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // TODO: get user-defined tags from mega tag list, and make the tags refer to the megalist of tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (Module module : megaModuleHash.values()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            UniqueTagList tagList \u003d module.getTags();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return activeStudyPlan;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Activates the first study plan in the list of study plans. This is used in {@code DeleteCommand}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * If there is no study plan in the list, the method returns false."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @return boolean to indicate whether the first study plan has been activated."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean activateFirstStudyPlan() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (studyPlans.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            int indexOfFirstStudyPlan \u003d studyPlans.iterator().next().getIndex();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            activateStudyPlan(indexOfFirstStudyPlan);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Removes {@code key} from this {@code ModulePlanner}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * {@code key} must exist in the module planner."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void removeStudyPlan(StudyPlan key) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlans.remove(key);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the version tracking manager of the current module planner."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public VersionTrackingManager getVersionTrackingManager() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return versionTrackingManager;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Sets the current semester. The user cannot change any module before the current semester. But they can"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * still change those in the current semester and after the current semester."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setCurrentSemester(SemesterName semesterName) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        currentSemester \u003d semesterName;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the current semester. The user cannot change any module before the current semester. But they can"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * still change those in the current semester and after the current semester."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @return the semester name of the current semester."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public SemesterName getCurrentSemester() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return currentSemester;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns the {@code ModuleInfo} with the given module code."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public ModuleInfo getModule(String moduleCode) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return modulesInfo.find(moduleCode);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns module information of the given module code, as a string."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public String getModuleInformation(String moduleCode) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModuleInfo moduleInfo \u003d modulesInfo.find(moduleCode);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return moduleInfo \u003d\u003d null ? null : moduleInfo.getInformation();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns this module planner\u0027s ModulesInfo object."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @return This module planner\u0027s ModulesInfo object."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ModulesInfo getModulesInfo() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return modulesInfo;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //// commit methods"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Commits the current active study plan."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void commitActiveStudyPlan(String commitMessage) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlanCommitManager manager \u003d versionTrackingManager.commitStudyPlan(activeStudyPlan, commitMessage);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlans.asUnmodifiableObservableList().size() + \" studyPlans\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ObservableList\u003cStudyPlan\u003e getStudyPlanList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlans.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                || (other instanceof ModulePlanner // instanceof handles nulls"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                \u0026\u0026 studyPlans.equals(((ModulePlanner) other).studyPlans));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlans.hashCode();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 3,
      "andyylam": 1,
      "LiuZechu": 258,
      "halfwhole": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModulesInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Represents a collection of module information."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class ModulesInfo {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private HashMap\u003cString, ModuleInfo\u003e mapModulesInfo; // this is actually what\u0027s being used"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private List\u003cModuleInfo\u003e modulesInfo; // this is just for reading from JSON"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public ModulesInfo() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.modulesInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.mapModulesInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public ModulesInfo(HashMap\u003cString, ModuleInfo\u003e modulesInfo) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.modulesInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.mapModulesInfo \u003d modulesInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public HashMap\u003cString, ModuleInfo\u003e getModuleInfoHashMap() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.mapModulesInfo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Initialises by reading {@code modulesInfo} into #{@code mapModulesInfo}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Parses the prerequisite tree for all modules with information."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.mapModulesInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        for (ModuleInfo moduleInfo : modulesInfo) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            moduleInfo.init();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            this.mapModulesInfo.put(moduleInfo.getCode(), moduleInfo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Finds a specific module information that has the given module code."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @param moduleCode Module code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @return Module information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public ModuleInfo find(String moduleCode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.mapModulesInfo.get(moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns true if the module with the given module code can have its prerequisites fulfilled by taking"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * modules in {@code prevSemModuleCodes} in previous semesters."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean verify(String moduleCode, List\u003cString\u003e prevSemModuleCodes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModuleInfo moduleInfo \u003d this.find(moduleCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (moduleInfo \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return moduleInfo.verify(prevSemModuleCodes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns a list of all focus area names. Does not differentiate between electives and primaries."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * This method call could be expensive, so it\u0027s not meant to be called many times."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public HashSet\u003cString\u003e getFocusAreaNames() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        HashSet\u003cString\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        for (ModuleInfo moduleInfo : this.modulesInfo) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            List\u003cString\u003e focusPrimaries \u003d moduleInfo.getFocusPrimaries();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            List\u003cString\u003e focusElectives \u003d moduleInfo.getFocusElectives();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            for (String focusPrimary : focusPrimaries) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                set.add(focusPrimary);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            for (String focusElective : focusElectives) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                set.add(focusElective);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return set;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                || (other instanceof ModulesInfo // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 mapModulesInfo.equals(((ModulesInfo) other).mapModulesInfo));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return mapModulesInfo.hashCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "halfwhole": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PrereqLeaf.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Leaf of a prerequisite tree. Represents a single module prerequisite."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class PrereqLeaf extends PrereqTree {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public PrereqLeaf(String code) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean verify(List\u003cString\u003e prevSemCodes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return prevSemCodes.contains(this.code);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (!(other instanceof PrereqLeaf)) { // this handles null as well"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        PrereqLeaf o \u003d (PrereqLeaf) other;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.code.equals(o.code);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halfwhole": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PrereqNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Node of a prerequisite tree. Represents an operator (AND/OR) with children, which are themselves prerequisite trees."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class PrereqNode extends PrereqTree {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public static final int AND \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public static final int OR \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private final int operator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private final List\u003cPrereqTree\u003e children;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public PrereqNode(String operator, List\u003cPrereqTree\u003e children) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (\"AND\".equals(operator)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            this.operator \u003d AND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            this.operator \u003d OR;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.children \u003d children;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean verify(List\u003cString\u003e prevSemCodes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        Stream\u003cBoolean\u003e verifyStream \u003d this.children"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                .map(child -\u003e child.verify(prevSemCodes));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (this.operator \u003d\u003d AND) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return verifyStream.reduce(true, (x, y) -\u003e x \u0026\u0026 y);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return verifyStream.reduce(false, (x, y) -\u003e x || y);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return \"(\" + (this.operator \u003d\u003d AND ? \"AND\" : \"OR\") + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                + children.stream().map(x -\u003e x.toString()).collect(Collectors.joining(\" \")) + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (!(other instanceof PrereqNode)) { // this handles null as well"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        PrereqNode o \u003d (PrereqNode) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return this.operator \u003d\u003d o.operator"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                \u0026\u0026 this.children.equals(o.children);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halfwhole": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PrereqTree.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Tree of prerequisites, either a leaf or a node."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public abstract class PrereqTree {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public abstract boolean verify(List\u003cString\u003e prevSemCodes);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halfwhole": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyModulePlanner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.VersionTrackingManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Unmodifiable view of an module planner"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public interface ReadOnlyModulePlanner {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns an unmodifiable view of the study plans list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * This list will not contain any duplicate study plans."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    ObservableList\u003cStudyPlan\u003e getStudyPlanList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the active study plan of this module planner."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    StudyPlan getActiveStudyPlan();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the version tracking manager of this module planner."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    VersionTrackingManager getVersionTrackingManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the current semester of this module planner."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    SemesterName getCurrentSemester();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 3,
      "LiuZechu": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    Path getModulePlannerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private Path modulePlannerFilePath \u003d Paths.get(\"data\", \"moduleplanner.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        setModulePlannerFilePath(newUserPrefs.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return modulePlannerFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setModulePlannerFilePath(Path modulePlannerFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(modulePlannerFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.modulePlannerFilePath \u003d modulePlannerFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                \u0026\u0026 modulePlannerFilePath.equals(o.modulePlannerFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return Objects.hash(guiSettings, modulePlannerFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + modulePlannerFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 2,
      "LiuZechu": 10,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a module for CS undergraduate students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class Module implements Cloneable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private int mcCount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private Color color;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private UniqueTagList tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Module(Name name, ModuleCode moduleCode, int mcCount, Color color, UniqueTagList tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireAllNonNull(name, moduleCode, mcCount, color, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.mcCount \u003d mcCount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * This constructor is used for {@code JsonAdaptedSkeletalModule} to create a skeletal module object from"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * JSON file. This skeletal module object is temporary and will be replace by the actual {@code Module}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * once its study plan gets activated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Module(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * This constructor is used for {@code JsonAdaptedModule} to create an incomplete module object from"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * JSON file. This incomplete module object resides in the \"Mega module list\" of a study plan. Its data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * fields will be filled from {@code ModuleInfo} once its study plan gets activated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Module(ModuleCode moduleCode, Color color, List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireAllNonNull(moduleCode, color, tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public int getMcCount() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return mcCount;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setMcCount(int mcCount) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.mcCount \u003d mcCount;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Adds the specified tag to the module if it is not already there."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param tag Tag to be attached to the module."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return True if the tag has been added and false otherwise."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean addTag(Tag tag) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (hasTag(tag)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        tags.addTag(tag);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setColor(Color color) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Color getColor() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return color;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Deletes the specified user tag to the module if the module has it."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param userTag user tag to be deleted from the module."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @return True if the user tag has been deleted and false otherwise."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean deleteUserTag(UserTag userTag) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (!hasTag(userTag)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        tags.remove(userTag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns a unique tag list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public UniqueTagList getTags() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!(other instanceof seedu.address.model.module.Module)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return this.moduleCode.equals(((Module) other).moduleCode);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return Objects.hash(name, moduleCode, tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                .append(\" Module code: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                .append(getModuleCode())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                .append(\" MCs: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .append(getMcCount())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (getTags() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Module clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Module clone \u003d (Module) super.clone();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        clone.tags \u003d (UniqueTagList) tags.clone();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return clone;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 25,
      "andyylam": 76,
      "LiuZechu": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleCode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Module\u0027s NUS code."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Each module of study has a unique module code\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \" consisting of a two- or three-letter prefix that denotes the discipline, and four digits,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \" the first of which indicates the level of the module (e.g., 1000 indicates a Level 1 module\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            + \" and 2000, a Level 2 module).\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z]{2,3}(\\\\d{4})[A-Z]?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param code a valid module code."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public ModuleCode(String code) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        checkArgument(isValidCode(code), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        value \u003d code;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static boolean isValidCode(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 value.equals(((ModuleCode) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 1,
      "andyylam": 53,
      "halfwhole": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Represents a module\u0027s name in the module planner."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param name A valid module name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 1,
      "andyylam": 38,
      "halfwhole": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/NameOrCodeContainsKeyWordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class NameOrCodeContainsKeyWordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public NameOrCodeContainsKeyWordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(module.getName().fullName, keyword))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(module.getModuleCode().value, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || (other instanceof NameOrCodeContainsKeyWordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameOrCodeContainsKeyWordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * A module is considered unique by comparing using {@code Module#equals(Module)}. As such, adding, updating and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * removing of modules uses Module#equals(Module) for equality so as to ensure that the module"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * is unique in terms of identity in the UniqueModuleList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean contains(String toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return internalList.stream().anyMatch(module -\u003e module.getModuleCode().toString().equals(toCheck));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Wrapper for the {@code contains} method to accept a Module object instead"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Adds the equivalent module to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param toAdd Module to be added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void remove(String toRemove) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.internalList.remove(getModule(toRemove));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Module getModule(String moduleCode) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        for (Module mod : this.internalList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            if (mod.getModuleCode().toString().equals(moduleCode)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return mod;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                if (modules.get(i).equals(modules.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public int getMcCount() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        return internalList.stream().map(Module::getMcCount).reduce(Integer::sum).get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!target.equals(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 1,
      "andyylam": 146,
      "yaaanch": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/semester/Semester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "package seedu.address.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaaanch"
        },
        "content": " * Represents a semester of university for CS Undergraduate Students."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaaanch"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaaanch"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private final SemesterName semesterName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private final UniqueModuleList modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private boolean isBlocked;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private String reasonForBlocked;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private boolean isExpanded \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "     * SemesterName field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public Semester(SemesterName semesterName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        this.semesterName \u003d semesterName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        isBlocked \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * This constructor is for {@code JsonAdaptedSemester} to create a semester with skeletal modules inside."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Semester(SemesterName semesterName, boolean isBlocked,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                    String reasonForBlocked, List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.semesterName \u003d semesterName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.isBlocked \u003d isBlocked;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.reasonForBlocked \u003d reasonForBlocked;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            this.modules.add(module);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public SemesterName getSemesterName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        return semesterName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public UniqueModuleList getModules() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public boolean isBlocked() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        return isBlocked;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void setBlocked(boolean blocked) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        isBlocked \u003d blocked;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public String getReasonForBlocked() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        return reasonForBlocked;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void setReasonForBlocked(String reasonForBlocked) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.reasonForBlocked \u003d reasonForBlocked;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean isExpanded() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return isExpanded;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void setExpanded(boolean expanded) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        isExpanded \u003d expanded;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public int getMcCount() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return modules.getMcCount();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void removeModule(String module) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        modules.remove(module);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean hasModule(String module) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.modules.contains(module);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // NOTE: this is for the GUI to use for Milestone 2"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        result.append(semesterName).append(\":\").append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            result.append(module.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 22,
      "yaaanch": 54,
      "LiuZechu": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/semester/SemesterName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "package seedu.address.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.semester.exceptions.SemesterNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Represents the possible names of the semesters from Year 1 to 5."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaaanch"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "public enum SemesterName {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    Y1S1, Y1S2, Y1ST1, Y1ST2,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    Y2S1, Y2S2, Y2ST1, Y2ST2,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    Y3S1, Y3S2, Y3ST1, Y3ST2,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    Y4S1, Y4S2, Y4ST1, Y4ST2,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    Y5S1, Y5S2, Y5ST1, Y5ST2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static SemesterName getEnum(int year, int semester) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        switch (year) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y1S1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y1S2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y2S1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y2S2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y3S1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y3S2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y4S1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y4S2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y5S1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y5S2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static SemesterName getSpecialTermEnum(int year, int semester) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        switch (year) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y1ST1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y1ST2;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y2ST1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y2ST2;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y3ST1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y3ST2;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y4ST1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y4ST2;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (semester) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y5ST1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return Y5ST2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 10,
      "andyylam": 96,
      "yaaanch": 6,
      "LiuZechu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/semester/UniqueSemesterList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.exceptions.DuplicateSemesterException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.exceptions.SemesterNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * A list of semesters that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * A {@code Semester} is considered unique by comparing using {@code Semester#equals(Semester)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * As such, adding, updating and removing of semesters uses Semester#equals(Semester) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * that the semester is unique in terms of identity in the UniqueSemesterList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class UniqueSemesterList implements Iterable\u003cSemester\u003e, Cloneable {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final ObservableList\u003cSemester\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final ObservableList\u003cSemester\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns true if the list contains an equivalent semester as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean contains(Semester toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Adds a semester to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The semester must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void add(Semester toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new DuplicateSemesterException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Replaces the Semester {@code target} in the list with {@code editedSemester}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The semester identity of {@code editedSemester} must not be the same as another existing Semester in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setSemester(Semester target, Semester editedSemester) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireAllNonNull(target, editedSemester);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (!target.equals(editedSemester) \u0026\u0026 contains(editedSemester)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new DuplicateSemesterException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        internalList.set(index, editedSemester);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Removes the equivalent semester from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The semester must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void remove(Semester toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setSemesters(UniqueSemesterList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Replaces the contents of this list with {@code Semesters}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * {@code Semesters} must not contain duplicate semesters."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setSemesters(List\u003cSemester\u003e semesters) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireAllNonNull(semesters);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (!semestersAreUnique(semesters)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new DuplicateSemesterException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        internalList.setAll(semesters);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ObservableList\u003cSemester\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Iterator\u003cSemester\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                || (other instanceof UniqueSemesterList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSemesterList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public UniqueSemesterList clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return (UniqueSemesterList) super.clone();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns true if {@code Semesters} contains only unique Semesters."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private boolean semestersAreUnique(List\u003cSemester\u003e semesters) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (int i \u003d 0; i \u003c semesters.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c semesters.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                if (semesters.get(i).equals(semesters.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "LiuZechu": 132,
      "halfwhole": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/semester/exceptions/DuplicateSemesterException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.semester.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Signals that the operation will result in duplicate semesters (Semesters are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class DuplicateSemesterException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public DuplicateSemesterException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        super(\"Operation would result in duplicate semesters\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/semester/exceptions/SemesterAlreadyBlockedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.semester.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Signals that the semester is already blocked"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class SemesterAlreadyBlockedException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3,
      "LiuZechu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/semester/exceptions/SemesterNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.semester.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class SemesterNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 2,
      "LiuZechu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/studyplan/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.studyplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Tests that a {@code StudyPlan}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudyPlan\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean test(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(studyPlan.getTitle().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/studyplan/StudyPlan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.studyplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ModuleInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.UniqueSemesterList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.exceptions.SemesterAlreadyBlockedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.exceptions.SemesterNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Represents a study plan in the module planner."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class StudyPlan implements Cloneable {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private static int totalNumberOfStudyPlans \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private UniqueSemesterList semesters;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private int index; // unique identifier of this study plan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // the \"Mega-List\" of modules of this study plan. All modules in an *active* study plan refer to a module here."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // note: this Mega-List is only constructed when a study plan gets activated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private HashMap\u003cString, Module\u003e modules;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // the unique list of tags of this study plan."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // All tags in an *active* study plan refer to a tag here."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // note: this unique list of tags is only constructed when a study plan gets activated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private UniqueTagList tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // to create a study plan without a Title"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan(ModulesInfo modulesInfo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this(new Title(\"\"), modulesInfo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // to create a study plan with a Title"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan(Title title, ModulesInfo modulesInfo) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.semesters \u003d new UniqueSemesterList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        setDefaultSemesters();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // switch the current active plan to the newly created one. Reason: user can directly add modules to it."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        tags.initDefaultTags();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        setMegaModuleHashMap(modulesInfo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        totalNumberOfStudyPlans++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.index \u003d totalNumberOfStudyPlans;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * This constructor is used for {@code JsonAdaptedStudyPlan}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan(Title modelTitle, int modelIndex, List\u003cSemester\u003e modelSemesters,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                     HashMap\u003cString, Module\u003e modelModules, List\u003cTag\u003e modelTags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        title \u003d modelTitle;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        index \u003d modelIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters \u003d new UniqueSemesterList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters.setSemesters(modelSemesters);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        modules \u003d modelModules;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        tags.setTags(modelTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // make a copy of the current study without incrementing the index, for version tracking commits"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan copyForCommit() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return this.clone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setTitle(Title title) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public UniqueSemesterList getSemesters() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return semesters;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // \"Mega-list\" of modules"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public HashMap\u003cString, Module\u003e getModules() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // \"Mega-list\" of tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public UniqueTagList getTags() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static int getTotalNumberOfStudyPlans() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return totalNumberOfStudyPlans;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static void setTotalNumberOfStudyPlans(int totalNumberOfStudyPlans) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan.totalNumberOfStudyPlans \u003d totalNumberOfStudyPlans;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Populates the unique semester list with the 8 semesters in the normal 4-year candidature. These"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * semesters will be empty initially."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setDefaultSemesters() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters.add(new Semester(SemesterName.Y1S1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters.add(new Semester(SemesterName.Y1S2));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters.add(new Semester(SemesterName.Y2S1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters.add(new Semester(SemesterName.Y2S2));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters.add(new Semester(SemesterName.Y3S1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters.add(new Semester(SemesterName.Y3S2));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters.add(new Semester(SemesterName.Y4S1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesters.add(new Semester(SemesterName.Y4S2));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Given a {@code ModuleInfo} object, convert it to a {@code Module}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private Module convertModuleInfoToModule(ModuleInfo moduleInfo) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // TODO: Yi Wai: assign default tags to the result (Module)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList moduleTagList \u003d assignDefaultTags(moduleInfo);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Name name \u003d new Name(moduleInfo.getName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(moduleInfo.getCode());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        int mcCount \u003d moduleInfo.getMc();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new Module(name, moduleCode, mcCount, Color.RED, moduleTagList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns a {@code UniqueTagList} with the default tags attached to the module with the given module info."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param moduleInfo The module info of the module."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return A {@code UniqueTagList} with the default tags."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private UniqueTagList assignDefaultTags(ModuleInfo moduleInfo) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList moduleTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueTagList studyPlanTagList \u003d getTags();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        List\u003cString\u003e focusPrimaries \u003d moduleInfo.getFocusPrimaries();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        List\u003cString\u003e focusElectives \u003d moduleInfo.getFocusElectives();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (String focusPrimary : focusPrimaries) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            moduleTagList.addTag(studyPlanTagList.getDefaultTag(focusPrimary + \":P\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (String focusElective : focusElectives) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            moduleTagList.addTag(studyPlanTagList.getDefaultTag(focusElective + \":E\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        boolean canSu \u003d moduleInfo.getSuEligibility();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (canSu) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            moduleTagList.addTag(studyPlanTagList.getDefaultTag(\"S/U-able\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Semester locationOfModule;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            UniqueModuleList uniqueModuleList \u003d semester.getModules();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            for (Module module : uniqueModuleList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                if (module.getName().equals(moduleInfo.getName())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                    locationOfModule \u003d semester;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // For setting completed tag"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // Needs current semester to work"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (semesterNameComparator.compare(locationOfModule, currentSemester) \u003c 0) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            moduleTagList.addTag(studyPlanTagList.getDefaultTag(\"Completed\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //TODO add core, ue?, ulr? tags"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return moduleTagList;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private void setMegaModuleHashMap(ModulesInfo modulesInfo) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        HashMap\u003cString, ModuleInfo\u003e moduleInfoHashMap \u003d modulesInfo.getModuleInfoHashMap();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        modules \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (ModuleInfo moduleInfo : moduleInfoHashMap.values()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Module module \u003d convertModuleInfoToModule(moduleInfo);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modules.put(module.getModuleCode().toString(), module);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Adds a module to a semester, given the {@code ModuleCode} and {@code SemesterName}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param moduleCode   module code of the module to be added."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param semesterName semester name of the target semester."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws SemesterNotFoundException"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void addModuleToSemester(ModuleCode moduleCode, SemesterName semesterName)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throws SemesterNotFoundException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Semester targetSemester \u003d null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (semester.getSemesterName().equals(semesterName)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                targetSemester \u003d semester;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (targetSemester \u003d\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Module moduleToAdd \u003d modules.get(moduleCode.toString());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        targetSemester.addModule(moduleToAdd);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Blocks a semester with the given {@code SemesterName} so that the user cannot add modules to that semester."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The user can enter a reason for blocking it (e.g. NOC, internship)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void blockSemester(SemesterName semesterName, String reasonForBlock) throws SemesterNotFoundException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Semester semesterToBlock \u003d null;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Iterator\u003cSemester\u003e iterator \u003d semesters.iterator();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Semester semester \u003d iterator.next();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (semester.getSemesterName().equals(semesterName)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                semesterToBlock \u003d semester;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (semesterToBlock \u003d\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new SemesterNotFoundException();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (semesterToBlock.isBlocked()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new SemesterAlreadyBlockedException();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesterToBlock.setBlocked(true);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesterToBlock.setReasonForBlocked(reasonForBlock);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns true if both study plans of the same index have at least one other identity field that is the same."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * This defines a weaker notion of equality between two study plans."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean isSameStudyPlan(StudyPlan other) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return this.index \u003d\u003d other.index;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns a copy of the current study plan."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @return a clone of this study plan."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws CloneNotSupportedException"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan clone \u003d (StudyPlan) super.clone();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        clone.semesters \u003d semesters.clone();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        clone.title \u003d title.clone();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        clone.index \u003d index;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // because of this, the mega-lists fields don\u0027t have final keyword"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        clone.modules \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (Module module : modules.values()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            clone.modules.put(module.getModuleCode().toString(), module.clone());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        clone.tags \u003d (UniqueTagList) tags.clone();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return clone;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // TODO: this currently compares only the index. Does this need to be modified?"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (other instanceof StudyPlan) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return this.index \u003d\u003d ((StudyPlan) other).index;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            //\u0026\u0026 this.semesters.equals(((StudyPlan) other).getSemesters());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 46,
      "andyylam": 3,
      "LiuZechu": 236
    }
  },
  {
    "path": "src/main/java/seedu/address/model/studyplan/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.studyplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Represents the title of a study plan."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class Title implements Cloneable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Title(String value) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Title clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return (Title) super.clone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/studyplan/UniqueStudyPlanList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.studyplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.exceptions.StudyPlanNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * A list of study plans that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * A study plan is considered unique by comparing using {@code StudyPlan#isSameStudyPlan(StudyPlan)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * As such, adding and updating of study plans uses StudyPlan#isSameStudyPlan(StudyPlan) for equality so as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * to ensure that the StudyPlan being added or updated is unique in terms of identity in the UniqueStudyPlanList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * However, the removal of a StudyPlan uses StudyPlan#equals (Object) so as to ensure that the study plan with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * @see StudyPlan#isSameStudyPlan(StudyPlan)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class UniqueStudyPlanList implements Iterable\u003cStudyPlan\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final ObservableList\u003cStudyPlan\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final ObservableList\u003cStudyPlan\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns true if the list contains an equivalent StudyPlan as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean contains(StudyPlan toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudyPlan);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Adds a StudyPlan to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The StudyPlan must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void add(StudyPlan toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // TODO: implement DuplicateStudyPlanException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // throw new DuplicateStudyPlanException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Replaces the StudyPlan {@code target} in the list with {@code editedStudyPlan}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The StudyPlan identity of {@code editedStudyPlan} must not be the same as another existing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * StudyPlan in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setStudyPlan(StudyPlan target, StudyPlan editedStudyPlan) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireAllNonNull(target, editedStudyPlan);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // TODO: implement StudyPlanNotFoundException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // throw new StudyPlanNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (!target.isSameStudyPlan(editedStudyPlan) \u0026\u0026 contains(editedStudyPlan)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // TODO: implement DuplicateStudyPlanException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // throw new DuplicateStudyPlanException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        internalList.set(index, editedStudyPlan);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Removes the equivalent StudyPlan from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The StudyPlan must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void remove(StudyPlan toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // TODO: implement StudyPlanNotFoundException"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            //throw new StudyPlanNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setStudyPlans(UniqueStudyPlanList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Replaces the contents of this list with {@code StudyPlans}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * {@code StudyPlans} must not contain duplicate StudyPlans."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setStudyPlans(List\u003cStudyPlan\u003e studyPlans) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireAllNonNull(studyPlans);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (!studyPlansAreUnique(studyPlans)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // TODO: implement DuplicateStudyPlanException"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // throw new DuplicateStudyPlanException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        internalList.setAll(studyPlans);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns a {@code StudyPlan} with the given index."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan getStudyPlanByIndex(int index) throws StudyPlanNotFoundException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Iterator\u003cStudyPlan\u003e iterator \u003d this.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan result \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            StudyPlan studyPlan \u003d iterator.next();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (studyPlan.getIndex() \u003d\u003d index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                result \u003d studyPlan;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new StudyPlanNotFoundException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ObservableList\u003cStudyPlan\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Iterator\u003cStudyPlan\u003e iterator() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                || (other instanceof UniqueStudyPlanList // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStudyPlanList) other).internalList));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns true if {@code StudyPlans} contains only unique StudyPlans."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private boolean studyPlansAreUnique(List\u003cStudyPlan\u003e studyPlans) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (int i \u003d 0; i \u003c studyPlans.size() - 1; i++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c studyPlans.size(); j++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                if (studyPlans.get(i).isSameStudyPlan(studyPlans.get(j))) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/model/studyplan/exceptions/DuplicateStudyPlanException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.studyplan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Signals that the operation will result in duplicate StudyPlans"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * (StudyPlans are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class DuplicateStudyPlanException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public DuplicateStudyPlanException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        super(\"Operation would result in duplicate studyPlans\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 9,
      "halfwhole": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/studyplan/exceptions/StudyPlanNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.studyplan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Signals that the operation is unable to find the specified study plan."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class StudyPlanNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 5,
      "andyylam": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/DefaultTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Represents a default Tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class DefaultTag implements Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private DefaultTagType defaultTagType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Constructs a {@code DefaultTag}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param defaultTagType A default tag type in {@code DefaultTagType}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public DefaultTag(DefaultTagType defaultTagType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.defaultTagType \u003d defaultTagType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Checks if the tag is a default tag."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return True."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean isDefault() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the default tag type of the current tag."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return The default tag type."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public DefaultTagType getDefaultTagType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return defaultTagType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the name of the tag."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return The name of the tag."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return defaultTagType.getDefaultTagTypeName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if the other tag is also a {@code DefaultTag} and both tags have the same default type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param other The other {@code Tag}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean isSameTag(Tag other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!other.isDefault()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return defaultTagType.equals(((DefaultTag) other).getDefaultTagType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                || (other instanceof DefaultTag // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                \u0026\u0026 defaultTagType.equals(((DefaultTag) other).getDefaultTagType())); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return defaultTagType.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return \u0027[\u0027 + getTagName() + \u0027]\u0027;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 79,
      "andyylam": 5,
      "halfwhole": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/DefaultTagType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Represents default tag types."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public enum DefaultTagType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    COMPLETED(\"Completed\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    CORE(\"Core\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    SU(\"S/U-able\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    UE(\"UE\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    ULR(\"ULR\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    COMSEC_P(\"ComSec:P\"), // P means primary, E means elective"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    COMSEC_E(\"ComSec:E\"), // computer security"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    SE_P(\"SE:P\"), // software engineering"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    SE_E(\"SE:E\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    CGG_P(\"CGG:P\"), // computer games and graphics"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    CGG_E(\"CGG:E\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    ALGO_P(\"Algo:P\"), // algorithm design"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    ALGO_E(\"Algo:E\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    PARA_P(\"Para:P\"), // parallel computing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    PARA_E(\"Para:E\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    MIR_P(\"MIR:P\"), // multimedia information retrieval"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    MIR_E(\"MIR:E\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    AI_P(\"AI:P\"), // artificial intelligence"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    AI_E(\"AI:E\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    NDS_P(\"NDS:P\"), // networking and distributed systems"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    NDS_E(\"NDS:E\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    PL_P(\"PL:P\"), // programming languages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    PL_E(\"PL:E\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    DB_P(\"DB:P\"), // database systems"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    DB_E(\"DB:E\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private String defaultTagTypeName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    DefaultTagType(String defaultTagTypeName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.defaultTagTypeName \u003d defaultTagTypeName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public String getDefaultTagTypeName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return defaultTagTypeName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Checks if the given name is one of the default tag type names."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param name The given name that is to be checked."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return True if it is one of the default tag type names."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static boolean contains(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (DefaultTagType defaultTagType : DefaultTagType.values()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            if (defaultTagType.getDefaultTagTypeName().equals(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 35,
      "andyylam": 2,
      "LiuZechu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Represents a Tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public interface Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    boolean isDefault();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    boolean isSameTag(Tag other);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String getTagName();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 3,
      "andyylam": 6,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * A list of tags that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#isSameTag(Tag)}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * As such, adding and updating of tags uses Tag#isSameTag(Tag) for equality so as"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * to ensure that the Tag being added or updated is unique in terms of identity in the UniqueTagList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * However, the removal of a Tag uses Tag#equals (Object) so as to ensure that the tag with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * @see Tag#isSameTag(Tag)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e, Cloneable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final HashMap\u003cString, Tag\u003e mapTags \u003d new HashMap\u003cString, Tag\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Constructs a {@code UniqueTagList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public UniqueTagList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if the list contains an equivalent Tag as the given argument."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Adds a {@code Tag} to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * The tag must not already exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param toAdd The {@code Tag} to be added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @throws DuplicateTagException if the list already contains the tag."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void addTag(Tag toAdd) throws DuplicateTagException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        mapTags.put(toAdd.getTagName(), toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ObservableList\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Replaces the UserTag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * The UserTag identity of {@code editedTag} must not be the same as another existing"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * UserTag in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setUserTag(UserTag target, UserTag editedTag) throws TagNotFoundException, DuplicateTagException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!target.isSameTag(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        internalList.set(index, editedTag);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        mapTags.remove(target.getTagName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        mapTags.put(editedTag.getTagName(), editedTag);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public DefaultTag getDefaultTag(String defaultTagName) throws TagNotFoundException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Tag correspondingTag \u003d mapTags.get(defaultTagName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!correspondingTag.isDefault()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return (DefaultTag) correspondingTag;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Removes the equivalent UserTag from the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * The UserTag must exist in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void remove(UserTag toRemove) throws TagNotFoundException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        mapTags.remove(toRemove.getTagName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        mapTags.clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        HashMap\u003cString, Tag\u003e newMap \u003d replacement.getMapTags();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cString\u003e newKeys \u003d newMap.keySet();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (String newKey : newKeys) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            mapTags.put(newKey, newMap.get(newKey));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //     * Replaces the contents of this list with {@code UserTags}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //     * {@code UserTags} must not contain duplicate UserTags."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    public void setTags(List\u003cUserTag\u003e userTags) throws DuplicateTagException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        requireAllNonNull(userTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        if (!userTagsAreUnique(userTags)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        internalList.setAll(userTags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        mapTags.clear();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        initDefaultTags();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        for (UserTag newUserTag: userTags) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //            mapTags.put(newUserTag.getTagName(), newUserTag);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Replaces the contents of this list with {@code Tags}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * {@code Tags} must not contain duplicate Tags."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) throws DuplicateTagException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        List\u003cUserTag\u003e userTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (tag instanceof UserTag) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                userTags.add((UserTag) tag);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!userTagsAreUnique(userTags)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        mapTags.clear();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        initDefaultTags();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (Tag newTag : tags) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            mapTags.put(newTag.getTagName(), newTag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Finds a specific tag that has the given tag name."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param tagName Name of the tag"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return Tag"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public Tag find(String tagName) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return mapTags.get(tagName);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                || (other instanceof seedu.address.model.tag.UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.address.model.tag.UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Object clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return super.clone();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public HashMap\u003cString, Tag\u003e getMapTags() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return mapTags;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if {@code Tags} contains only unique UserTags."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private boolean userTagsAreUnique(List\u003cUserTag\u003e userTags) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (int i \u003d 0; i \u003c userTags.size() - 1; i++) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            for (int j \u003d i + 1; j \u003c userTags.size(); j++) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                if (userTags.get(i).isSameTag(userTags.get(j))) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Initialises default tags for the unique tag list, using all values in {@code DefaultTagType}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void initDefaultTags() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (DefaultTagType defaultTagType : DefaultTagType.values()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            addTag(new DefaultTag(defaultTagType));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 182,
      "andyylam": 2,
      "LiuZechu": 44,
      "halfwhole": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UserTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.exceptions.InvalidTagNameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Represents a user-created Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class UserTag implements Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{ASCII}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Constructs a {@code UserTag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public UserTag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        } catch (IllegalArgumentException exception) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new InvalidTagNameException(exception.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 (!DefaultTagType.contains(test));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Checks if the tag is a default tag."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return False as user-created tags are not considered default tags."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean isDefault() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the name of the tag."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @return The name of the tag."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Renames the tag."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param newName The new name of the tag."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void rename(String newName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.tagName \u003d newName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns true if the other tag is also a {@code UserTag} and the two tags have the same tag name."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * @param other The other {@code Tag}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean isSameTag(Tag other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (other.isDefault()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return tagName.equals(other.getTagName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                || (other instanceof UserTag // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                \u0026\u0026 tagName.equals(((UserTag) other).getTagName())); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 92,
      "andyylam": 6,
      "LiuZechu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/DuplicateTagException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Signals that the operation would result in duplicate tags (Tags are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class DuplicateTagException extends InvalidTagException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/InvalidTagException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Signals that the operation will involve an invalid tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class InvalidTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public InvalidTagException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/InvalidTagModificationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Signals that the operation causes a forbidden modification of a tag"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class InvalidTagModificationException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 4,
      "andyylam": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/InvalidTagNameException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Signals that the operation will result in tags with default tag names which are reserved only for {@code DefaultTag}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class InvalidTagNameException extends InvalidTagException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public InvalidTagNameException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Signals that the operation is unable to find the specified tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class TagNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Contains utility methods for populating {@code ModulePlanner} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static StudyPlan[] getSampleStudyPlans(ModulesInfo modulesInfo) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // Can populate this with more dummy study plans"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan[] studyPlans \u003d new StudyPlan[3];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan sp1 \u003d new StudyPlan(new Title(\"first study plan\"), modulesInfo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan sp2 \u003d new StudyPlan(new Title(\"second study plan\"), modulesInfo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan sp3 \u003d new StudyPlan(new Title(\"third study plan\"), modulesInfo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        sp1.addModuleToSemester(new ModuleCode(\"CS1101S\"), SemesterName.Y1S1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        sp1.addModuleToSemester(new ModuleCode(\"CS2030\"), SemesterName.Y1S2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        sp1.addModuleToSemester(new ModuleCode(\"CS2040S\"), SemesterName.Y2S1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        sp2.addModuleToSemester(new ModuleCode(\"CS3230\"), SemesterName.Y2S1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        sp2.addModuleToSemester(new ModuleCode(\"CS2100\"), SemesterName.Y2S1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        sp2.addModuleToSemester(new ModuleCode(\"CS2103T\"), SemesterName.Y2S1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        sp3.addModuleToSemester(new ModuleCode(\"MA1521\"), SemesterName.Y1S1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlans[0] \u003d sp1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlans[1] \u003d sp2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlans[2] \u003d sp3;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlans;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static ReadOnlyModulePlanner getSampleModulePlanner(ModulesInfo modulesInfo) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        ModulePlanner sampleAb \u003d new ModulePlanner(modulesInfo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (StudyPlan sampleStudyPlan : getSampleStudyPlans(modulesInfo)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            sampleAb.addStudyPlan(sampleStudyPlan);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        sampleAb.activateStudyPlan(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static Set\u003cUserTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .map(UserTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 8,
      "LiuZechu": 31,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/versiontracking/Commit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.versiontracking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Represents a commit of a given study plan."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class Commit {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private static int numberOfCommits \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private String commitMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private StudyPlan studyPlan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Commit(StudyPlan studyPlan, String commitMessage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlan \u003d studyPlan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.commitMessage \u003d commitMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        numberOfCommits++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        index \u003d numberOfCommits;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * This constructor is used for {@code JsonAdaptedCommit} to construct a {@code Commit} object based on"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * given details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Commit(int index, StudyPlan studyPlan, String commitMessage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlan \u003d studyPlan;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.commitMessage \u003d commitMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan getStudyPlan() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlan;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public String getCommitMessage() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return commitMessage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/versiontracking/CommitList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.versiontracking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Represents the list of all the commits in a study plan."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class CommitList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private List\u003cCommit\u003e commits;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public CommitList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        commits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public CommitList(List\u003cCommit\u003e commits) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.commits \u003d commits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public List\u003cCommit\u003e getCommits() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return commits;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Adds a study plan to this commit list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param studyPlan study plan to be committed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void commitStudyPlan(StudyPlan studyPlan, String commitMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Commit commit \u003d new Commit(studyPlan, commitMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        commits.add(commit);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "LiuZechu": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/versiontracking/StudyPlanCommitManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.versiontracking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Represents a manager that manages the commits for one study plan with a particular index."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class StudyPlanCommitManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private int studyPlanIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private CommitList commitList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManager(StudyPlan studyPlan, String commitMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlanIndex \u003d studyPlan.getIndex();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.commitList \u003d new CommitList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        commit(studyPlan, commitMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * This constructor is used by {@code JsonAdaptedStudyPlanCommitManager} to construct a StudyPlanCommitManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * using the given details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManager(int studyPlanIndex, CommitList commitList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlanIndex \u003d studyPlanIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.commitList \u003d commitList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public int getStudyPlanIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlanIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public CommitList getCommitList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return commitList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Commits a study plan."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param studyPlan study plan to commit."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void commit(StudyPlan studyPlan, String commitMessage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan planToCommit \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            planToCommit \u003d studyPlan.clone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        } catch (CloneNotSupportedException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        commitList.commitStudyPlan(planToCommit, commitMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "LiuZechu": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/versiontracking/StudyPlanCommitManagerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.versiontracking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Represents a list of {@code StudyPlanCommitManager}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class StudyPlanCommitManagerList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private List\u003cStudyPlanCommitManager\u003e studyPlanCommitManagers;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManagerList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlanCommitManagers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManagerList(List\u003cStudyPlanCommitManager\u003e managers) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlanCommitManagers \u003d managers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public List\u003cStudyPlanCommitManager\u003e getStudyPlanCommitManagers() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlanCommitManagers;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Gets the StudyPlanCommitManager according to its index in studyPlanCommitManagers list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManager get(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlanCommitManagers.get(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Gets the StudyPlanCommitManager according to the index of the study plan"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManager getManagerByStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlanCommitManager managerToReturn \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (StudyPlanCommitManager manager : studyPlanCommitManagers) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (manager.getStudyPlanIndex() \u003d\u003d studyPlan.getIndex()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                managerToReturn \u003d manager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (managerToReturn \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // TODO: change the commit message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            managerToReturn \u003d new StudyPlanCommitManager(studyPlan, \"empty commit\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return managerToReturn;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void add(StudyPlanCommitManager manager) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlanCommitManagers.add(manager);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to check whether or not the manager already exists"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public boolean managerAlreadyExists(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (StudyPlanCommitManager manager : studyPlanCommitManagers) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (manager.getStudyPlanIndex() \u003d\u003d studyPlan.getIndex()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3,
      "LiuZechu": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/versiontracking/VersionTrackingManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.model.versiontracking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Manages version tracking of the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class VersionTrackingManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private StudyPlanCommitManagerList studyPlanCommitManagers;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public VersionTrackingManager() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlanCommitManagers \u003d new StudyPlanCommitManagerList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * This constructor is used for {@code JsonAdaptedVersionTrackingManager} to construct a"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * {@code VersionTrackingManager} object from the given details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public VersionTrackingManager(StudyPlanCommitManagerList managers) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlanCommitManagers \u003d managers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManager getStudyPlanCommitManagerByStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlanCommitManagers.getManagerByStudyPlan(studyPlan);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManagerList getStudyPlanCommitManagerList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return studyPlanCommitManagers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Creates the commit manager for a study plan if it does not exist, so that the user can start making commits."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param studyPlan"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManager commitStudyPlan(StudyPlan studyPlan, String commitMessage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        boolean managerAlreadyExists \u003d getStudyPlanCommitManagerList().managerAlreadyExists(studyPlan);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (managerAlreadyExists) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            StudyPlanCommitManager manager \u003d studyPlanCommitManagers.getManagerByStudyPlan(studyPlan);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            manager.commit(studyPlan, commitMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return manager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            StudyPlanCommitManager manager \u003d new StudyPlanCommitManager(studyPlan, commitMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            studyPlanCommitManagers.add(manager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return manager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "LiuZechu": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCommit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.Commit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.versiontracking.Commit}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "class JsonAdaptedCommit {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Commit\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private String commitMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private JsonAdaptedStudyPlan studyPlan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Constructs a {@code JsonAdaptedCommit} with the given {@code index} and {@code JsonAdaptedStudyPlan}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedCommit(@JsonProperty(\"index\") int index,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                             @JsonProperty(\"studyPlan\") JsonAdaptedStudyPlan studyPlan,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                             @JsonProperty(\"commitMessage\") String commitMessage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlan \u003d studyPlan;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.commitMessage \u003d commitMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts a given {@code Commit} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedCommit(Commit source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        index \u003d source.getIndex();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlan \u003d new JsonAdaptedStudyPlan(source.getStudyPlan());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        commitMessage \u003d source.getCommitMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts this Jackson-friendly adapted commit object into the model\u0027s {@code Commit} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Commit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Commit toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan modelStudyPlan \u003d studyPlan.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        int modelIndex \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        String modelCommitMessage \u003d commitMessage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new Commit(modelIndex, modelStudyPlan, modelCommitMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final String color;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e userTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given {@code moduleCode} and a list of {@code userTags}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                             @JsonProperty(\"color\") String color,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                             @JsonProperty(\"userTags\") List\u003cJsonAdaptedTag\u003e userTags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (userTags !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            this.userTags.addAll(userTags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        moduleCode \u003d source.getModuleCode().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        color \u003d source.getColor().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // add only user-defined tags"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Iterator\u003cTag\u003e tagIterator \u003d source.getTags().iterator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        while (tagIterator.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Tag tag \u003d tagIterator.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (tag instanceof UserTag) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                userTags.add(new JsonAdaptedTag(tag));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object. Note that this"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * only creates an incomplete {@code Module} object, which will only be further furnished when its"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * study plan is active."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (JsonAdaptedTag userTag : userTags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Tag tag \u003d userTag.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            tags.add(tag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new Module(new ModuleCode(moduleCode), Color.valueOf(color), tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSemester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Jackson-friendly version of {@link Semester}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "class JsonAdaptedSemester {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Semester\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final String semesterName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final boolean isBlocked;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final String reasonForBlocked;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final List\u003cJsonAdaptedSkeletalModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Constructs a {@code JsonAdaptedSemester} with the given {@code semesterName}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedSemester(@JsonProperty(\"semesterName\") String semesterName,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                               @JsonProperty(\"isBlocked\") boolean isBlocked,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                               @JsonProperty(\"reasonForBlocked\") String reasonForBlocked,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                               @JsonProperty(\"modules\") List\u003cJsonAdaptedSkeletalModule\u003e modules) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.semesterName \u003d semesterName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.isBlocked \u003d isBlocked;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.reasonForBlocked \u003d reasonForBlocked;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (modules !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            this.modules.addAll(modules);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts a given {@code Semester} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedSemester(Semester source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        semesterName \u003d source.getSemesterName().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        isBlocked \u003d source.isBlocked();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        reasonForBlocked \u003d source.getReasonForBlocked();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Iterator\u003cModule\u003e iterator \u003d source.getModules().iterator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Module module \u003d iterator.next();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            // only store module ID i.e. module code as String"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            String moduleCode \u003d module.getModuleCode().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            List\u003cJsonAdaptedTag\u003e userTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Iterator\u003cTag\u003e tagIterator \u003d module.getTags().iterator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            while (tagIterator.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                Tag tag \u003d tagIterator.next();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                if (tag instanceof UserTag) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                    userTags.add(new JsonAdaptedTag(tag));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "             */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modules.add(new JsonAdaptedSkeletalModule(moduleCode));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts this Jackson-friendly adapted semester object into the model\u0027s {@code Semester} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted semester."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Semester toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // TODO: Change this later!"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (!Semester.isValidSemesterName(semesterName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new IllegalValueException(Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        SemesterName modelSemesterName \u003d SemesterName.valueOf(semesterName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        List\u003cModule\u003e modelModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (JsonAdaptedSkeletalModule skeletalModule : modules) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modelModules.add(skeletalModule.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new Semester(modelSemesterName, isBlocked, reasonForBlocked, modelModules);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSkeletalModule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Jackson-friendly version of {@link Module}. This version is specifically used for storing modules under semesters"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * in a study plan. These modules will be stored in JSON files when a study plan is adapted to JSON format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * In contrast, {@link JsonAdaptedModule} is used to store more comprehensive module information in the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * {@code UniqueModuleList} field under {@code StudyPlan}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "class JsonAdaptedSkeletalModule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final String moduleCode; // the only info we need to store"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Constructs a {@code JsonAdaptedSkeletalModule} with the given {@code moduleCode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedSkeletalModule(@JsonProperty(\"moduleCode\") String moduleCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedSkeletalModule(Module source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        moduleCode \u003d source.getModuleCode().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts this Jackson-friendly adapted skeletal module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Note that this only creates a skeletal {@code Module} object, which will only be activated when"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * its study plan is active."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted semester."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // TODO: Change this later to check the validity of module names"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        //        if (!Module.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        //            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new Module(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudyPlan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.studyplan.StudyPlan}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "class JsonAdaptedStudyPlan {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Study Plan\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final int totalNumber; // this corresponds to the static field in StudyPlan: totalNumberOfStudyPlans"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final List\u003cJsonAdaptedSemester\u003e semesters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // each study plan also keeps track of a unique module list and a unique tag list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudyPlan} with the given StudyPlan details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedStudyPlan(@JsonProperty(\"totalNumber\") int totalNumber,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                                @JsonProperty(\"title\") String title, @JsonProperty(\"index\") int index,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                                @JsonProperty(\"semesters\") List\u003cJsonAdaptedSemester\u003e semesters,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                                @JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                                @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.totalNumber \u003d totalNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (semesters !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            this.semesters.addAll(semesters);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (modules !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            this.modules.addAll(modules);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts a given {@code StudyPlan} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedStudyPlan(StudyPlan source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        totalNumber \u003d StudyPlan.getTotalNumberOfStudyPlans();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        title \u003d source.getTitle().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        index \u003d source.getIndex();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Iterator\u003cSemester\u003e semesterIterator \u003d source.getSemesters().iterator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        while (semesterIterator.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Semester semesterToAdd \u003d semesterIterator.next();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            semesters.add(new JsonAdaptedSemester(semesterToAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (Module module : source.getModules().values()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modules.add(new JsonAdaptedModule(module));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Iterator\u003cTag\u003e tagIterator \u003d source.getTags().iterator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        while (tagIterator.hasNext()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Tag tag \u003d tagIterator.next();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            tags.add(new JsonAdaptedTag(tag));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts this Jackson-friendly adapted StudyPlan object into the model\u0027s {@code StudyPlan} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted StudyPlan."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlan toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        final List\u003cSemester\u003e studyPlanSemesters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (JsonAdaptedSemester semester : semesters) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            studyPlanSemesters.add(semester.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        //    throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"index\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        final int modelIndex \u003d index;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        final List\u003cSemester\u003e modelSemesters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (JsonAdaptedSemester semester : semesters) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modelSemesters.add(semester.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        final HashMap\u003cString, Module\u003e modelModules \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (JsonAdaptedModule module : modules) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modelModules.put(module.getModuleCode(), module.toModelType());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        final List\u003cTag\u003e modelTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modelTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan result \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                new StudyPlan(modelTitle, modelIndex, modelSemesters, modelModules, modelTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlan.setTotalNumberOfStudyPlans(totalNumber);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudyPlanCommitManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.Commit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.CommitList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.StudyPlanCommitManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.versiontracking.StudyPlanCommitManager}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "class JsonAdaptedStudyPlanCommitManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Study plan commit manager\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private int studyPlanIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private List\u003cJsonAdaptedCommit\u003e commits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudyPlanCommitManager} with the given details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedStudyPlanCommitManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            @JsonProperty(\"studyPlanIndex\") int studyPlanIndex,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            @JsonProperty(\"commits\") List\u003cJsonAdaptedCommit\u003e commits) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlanIndex \u003d studyPlanIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (commits !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            this.commits.addAll(commits);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts a given {@code StudyPlanCommitManager} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedStudyPlanCommitManager(StudyPlanCommitManager source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        studyPlanIndex \u003d source.getStudyPlanIndex();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        List\u003cCommit\u003e commitList \u003d source.getCommitList().getCommits();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        List\u003cJsonAdaptedCommit\u003e adaptedCommitList \u003d commitList.stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                .map(JsonAdaptedCommit::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        commits \u003d adaptedCommitList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts this Jackson-friendly adapted StudyPlanCommitManager object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * into the model\u0027s {@code StudyPlanCommitManager} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted StudyPlanCommitManager."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public StudyPlanCommitManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        int modelStudyPlanIndex \u003d studyPlanIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        List\u003cCommit\u003e commitList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (JsonAdaptedCommit adaptedCommit : commits) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            Commit commit \u003d adaptedCommit.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            commitList.add(commit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        CommitList modelCommitList \u003d new CommitList(commitList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new StudyPlanCommitManager(modelStudyPlanIndex, modelCommitList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Jackson-friendly version of {@link UserTag}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedTag(@JsonProperty(\"tagName\") String tagName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        tagName \u003d source.getTagName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        if (!UserTag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new IllegalValueException(UserTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new UserTag(tagName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 6,
      "LiuZechu": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedVersionTrackingManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.StudyPlanCommitManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.StudyPlanCommitManagerList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.VersionTrackingManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.versiontracking.VersionTrackingManager}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "class JsonAdaptedVersionTrackingManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Version tracking manager\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final List\u003cJsonAdaptedStudyPlanCommitManager\u003e managers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Constructs a {@code JsonAdaptedVersionTrackingManager} with the given details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedVersionTrackingManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            @JsonProperty(\"managers\") List\u003cJsonAdaptedStudyPlanCommitManager\u003e managers) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (managers !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            this.managers.addAll(managers);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts a given {@code VersionTrackingManager} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonAdaptedVersionTrackingManager(VersionTrackingManager source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        List\u003cStudyPlanCommitManager\u003e sourceManagers \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                source.getStudyPlanCommitManagerList().getStudyPlanCommitManagers();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (managers !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            managers.addAll(sourceManagers.stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                    .map(JsonAdaptedStudyPlanCommitManager::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts this Jackson-friendly adapted VersionTrackingManager object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * into the model\u0027s {@code VersionTrackingManager} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted VersionTrackingManager."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public VersionTrackingManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        List\u003cStudyPlanCommitManager\u003e modelManagers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (JsonAdaptedStudyPlanCommitManager adaptedManager : managers) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modelManagers.add(adaptedManager.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        StudyPlanCommitManagerList modelManagerList \u003d new StudyPlanCommitManagerList(modelManagers);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new VersionTrackingManager(modelManagerList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModulePlannerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * A class to access ModulePlanner data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public class JsonModulePlannerStorage implements ModulePlannerStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModulePlannerStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonModulePlannerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(ModulesInfo modulesInfo)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return readModulePlanner(filePath, modulesInfo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Similar to {@link #readModulePlanner(ModulesInfo)}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(Path filePath, ModulesInfo modulesInfo)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Optional\u003cJsonSerializableModulePlanner\u003e jsonModulePlanner \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                filePath, JsonSerializableModulePlanner.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (!jsonModulePlanner.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            return Optional.of(jsonModulePlanner.get().toModelType(modulesInfo));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        saveModulePlanner(modulePlanner, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Similar to {@link #saveModulePlanner(ReadOnlyModulePlanner)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(modulePlanner);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModulePlanner(modulePlanner), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModulesInfoStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * A class to access ModulesInfo stored in the hard disk as a json file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class JsonModulesInfoStorage implements ModulesInfoStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public JsonModulesInfoStorage(Path filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public Path getModulesInfoPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public Optional\u003cModulesInfo\u003e readModulesInfo() throws DataConversionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return readModulesInfo(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Similar to {@link #readModulesInfo()}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public Optional\u003cModulesInfo\u003e readModulesInfo(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        Optional\u003cModulesInfo\u003e modulesInfo \u003d JsonUtil.readJsonFile(prefsFilePath, ModulesInfo.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        if (!modulesInfo.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            modulesInfo.get().init();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return modulesInfo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "halfwhole": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableModulePlanner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.UniqueStudyPlanList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.versiontracking.VersionTrackingManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * An Immutable ModulePlanner that is serializable to JSON format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "@JsonRootName(value \u003d \"moduleplanner\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "class JsonSerializableModulePlanner {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDY_PLAN \u003d \"Study Plan list contains duplicate study plan(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final List\u003cJsonAdaptedStudyPlan\u003e studyPlans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final int activeStudyPlanIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final JsonAdaptedVersionTrackingManager manager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private final String currentSemester;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Constructs a {@code JsonSerializableModulePlanner} with the given study plans."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonSerializableModulePlanner(@JsonProperty(\"studyPlans\") List\u003cJsonAdaptedStudyPlan\u003e studyPlans,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                                         @JsonProperty(\"activeStudyPlanIndex\") int activeStudyPlanIndex,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                                         @JsonProperty(\"manager\") JsonAdaptedVersionTrackingManager manager,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                                         @JsonProperty(\"currentSemester\") String currentSemester) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.studyPlans.addAll(studyPlans);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.activeStudyPlanIndex \u003d activeStudyPlanIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.manager \u003d manager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        this.currentSemester \u003d currentSemester;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts a given {@code ReadOnlyModulePlanner} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableModulePlanner}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public JsonSerializableModulePlanner(ReadOnlyModulePlanner source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        ObservableList\u003cStudyPlan\u003e observableList \u003d source.getStudyPlanList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        Iterator\u003cStudyPlan\u003e studyPlanIterator \u003d observableList.iterator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        while (studyPlanIterator.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            StudyPlan studyPlan \u003d studyPlanIterator.next();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            studyPlans.add(new JsonAdaptedStudyPlan(studyPlan));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        activeStudyPlanIndex \u003d source.getActiveStudyPlan().getIndex();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        manager \u003d new JsonAdaptedVersionTrackingManager(source.getVersionTrackingManager());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (source.getCurrentSemester() \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            currentSemester \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            currentSemester \u003d source.getCurrentSemester().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Converts this module planner into the model\u0027s {@code ModulePlanner} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public ModulePlanner toModelType(ModulesInfo modulesInfo) throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        List\u003cStudyPlan\u003e modelStudyPlans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        for (JsonAdaptedStudyPlan adaptedStudyPlan : studyPlans) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            StudyPlan studyPlan \u003d adaptedStudyPlan.toModelType();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            if (modulePlanner.hasStudyPlan(studyPlan)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDYPLAN);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "             */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modelStudyPlans.add(studyPlan);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        UniqueStudyPlanList modelUniqueStudyPlanList \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        modelUniqueStudyPlanList.setStudyPlans(modelStudyPlans);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        VersionTrackingManager modelManager \u003d manager.toModelType();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        ModulePlanner modulePlanner \u003d new ModulePlanner(modelUniqueStudyPlanList,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "                modulesInfo, modelManager);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        modulePlanner.activateStudyPlan(activeStudyPlanIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        if (currentSemester \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modulePlanner.setCurrentSemester(SemesterName.Y1S1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            modulePlanner.setCurrentSemester(SemesterName.valueOf(currentSemester));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return modulePlanner;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiuZechu": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModulePlannerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ModulePlanner}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "public interface ModulePlannerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    Path getModulePlannerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns ModulePlanner data as a {@link ReadOnlyModulePlanner}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(ModulesInfo modulesInfo)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @see #getModulePlannerFilePath()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(Path filePath, ModulesInfo modulesInfo)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * Saves the given {@link ReadOnlyModulePlanner} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @param modulePlanner cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     * @see #saveModulePlanner(ReadOnlyModulePlanner)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 2,
      "LiuZechu": 46,
      "halfwhole": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModulesInfoStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ModulesInfo}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public interface ModulesInfoStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns the file path of the ModulesInfo data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    Path getModulesInfoPath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns ModulesInfo data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    Optional\u003cModulesInfo\u003e readModulesInfo() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "halfwhole": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "// NOTE: this has been changed to support module planner instead of address book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public interface Storage extends ModulePlannerStorage, UserPrefsStorage, ModulesInfoStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    Path getModulePlannerFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(ModulesInfo modulesInfo)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    Optional\u003cModulesInfo\u003e readModulesInfo() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 5,
      "halfwhole": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Manages storage of ModulePlanner data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private ModulePlannerStorage modulePlannerStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private ModulesInfoStorage modulesInfoStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public StorageManager(ModulePlannerStorage modulePlannerStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                          ModulesInfoStorage modulesInfoStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.modulePlannerStorage \u003d modulePlannerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        this.modulesInfoStorage \u003d modulesInfoStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModulePlanner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return modulePlannerStorage.getModulePlannerFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(ModulesInfo modulesInfo)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return readModulePlanner(modulePlannerStorage.getModulePlannerFilePath(), modulesInfo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(Path filePath, ModulesInfo modulesInfo)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "            throws DataConversionException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return modulePlannerStorage.readModulePlanner(filePath, modulesInfo);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        saveModulePlanner(modulePlanner, modulePlannerStorage.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlannerStorage.saveModulePlanner(modulePlanner, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModulesInfo methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public Path getModulesInfoPath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return modulesInfoStorage.getModulesInfoPath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public Optional\u003cModulesInfo\u003e readModulesInfo() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return modulesInfoStorage.readModulesInfo();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 13,
      "LiuZechu": 6,
      "halfwhole": 14,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import seedu.address.model.semester.UniqueSemesterList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private SemesterListPanel semesterListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private StackPane semesterListPanelPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        StudyPlan sp \u003d logic.getActiveStudyPlan();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        UniqueSemesterList u \u003d sp.getSemesters();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        ObservableList\u003cSemester\u003e ol \u003d u.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        // logic.getActiveStudyPlan().getSemesters().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        semesterListPanel \u003d new SemesterListPanel(ol);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        semesterListPanelPlaceholder.getChildren().add(semesterListPanel.getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        //        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        //        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public SemesterListPanel getSemesterListPanel() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        return semesterListPanel;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaaanch": 16,
      "-": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SemesterCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "public class SemesterCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private static final String FXML \u003d \"SemesterListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public final Semester semester;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public SemesterCard(Semester semester, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        name.setText(semester.getSemesterName().name());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        description.setText(semester.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        address.setText(semester.getAddress().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        email.setText(semester.getEmail().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        semester.getTags().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.getTagName()))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.getTagName())));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        if (!(other instanceof SemesterCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        SemesterCard card \u003d (SemesterCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "                \u0026\u0026 semester.equals(card.semester);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaaanch": 12,
      "halfwhole": 7,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SemesterListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaaanch"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaaanch"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "public class SemesterListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private static final String FXML \u003d \"SemesterListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SemesterListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private ListView\u003cSemester\u003e semesterListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    public SemesterListPanel(ObservableList\u003cSemester\u003e semesters) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        semesterListView.setItems(semesters);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        semesterListView.setCellFactory(listView -\u003e new SemesterListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    class SemesterListViewCell extends ListCell\u003cSemester\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        protected void updateItem(Semester semester, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "            super.updateItem(semester, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "            if (empty || semester \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "                setGraphic(new SemesterCard(semester, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaaanch"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaaanch": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaaanch": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 6,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-box\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaaanch": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "         title\u003d\"CS modbuddy\" minWidth\u003d\"650\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        \u003cImage url\u003d\"@/images/logo.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "                \u003cURL value\u003d\"@LightTheme.css\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "            \u003cVBox styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"0\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"0\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                      VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"semesterListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 4,
      "yaaanch": 7,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "\u003cStackPane styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yaaanch": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/SemesterListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" text\u003d\"\\$description\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaaanch": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/SemesterListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "    \u003cListView fx:id\u003d\"semesterListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaaanch": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaaanch"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/logo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaaanch": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.storage.JsonModulePlannerStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.storage.JsonModulesInfoStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.CreateStudyPlanCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.testutil.StudyPlanBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO modify tests"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonModulePlannerStorage modulePlannerStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new JsonModulePlannerStorage(temporaryFolder.resolve(\"modulePlanner.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        JsonModulesInfoStorage modulesInfoStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                new JsonModulesInfoStorage(temporaryFolder.resolve(\"modulesInfo.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(modulePlannerStorage, userPrefsStorage, modulesInfoStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // Setup LogicManager with JsonModulePlannerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonModulePlannerStorage modulePlannerStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new JsonModulePlannerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionModulePlanner.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        JsonModulesInfoStorage modulesInfoStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                new JsonModulesInfoStorage(temporaryFolder.resolve(\"ioExceptionModulesInfo.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(modulePlannerStorage, userPrefsStorage, modulesInfoStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String addCommand \u003d CreateStudyPlanCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan expectedStudyPlan \u003d new StudyPlanBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedModel.addStudyPlan(expectedStudyPlan);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void getFilteredStudyPlanList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudyPlanList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private static class JsonModulePlannerIoExceptionThrowingStub extends JsonModulePlannerStorage {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        private JsonModulePlannerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 34,
      "andyylam": 13,
      "halfwhole": 5,
      "-": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalStudyPlans.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //todo modify tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_emptyModulePlanner_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_nonEmptyModulePlanner_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedModel.setModulePlanner(new ModulePlanner());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 13,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.studyplan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.testutil.EditTitleStudyPlanDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final EditTitleCommand.EditTitleStudyPlanDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final EditTitleCommand.EditTitleStudyPlanDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        DESC_AMY \u003d new EditTitleStudyPlanDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                //.withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        DESC_BOB \u003d new EditTitleStudyPlanDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                //.withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * - the module planner, filtered studyPlan list and selected studyPlan in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulePlanner expectedModulePlanner \u003d new ModulePlanner(actualModel.getModulePlanner(), new ModulesInfo());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        List\u003cStudyPlan\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudyPlanList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(expectedModulePlanner, actualModel.getModulePlanner());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudyPlanList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the studyPlan at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * {@code model}\u0027s module planner."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static void showStudyPlanAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudyPlanList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlan \u003d model.getFilteredStudyPlanList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        final String[] splitName \u003d studyPlan.getTitle().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        model.updateFilteredStudyPlanList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(1, model.getFilteredStudyPlanList().size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 36,
      "andyylam": 4,
      "halfwhole": 1,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateStudyPlanCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalStudyPlans.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.testutil.StudyPlanBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code CreateStudyPlanCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class CreateStudyPlanCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //TODO modify tests"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_newStudyPlan_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan validStudyPlan \u003d new StudyPlanBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedModel.addStudyPlan(validStudyPlan);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertCommandSuccess(new CreateStudyPlanCommand(validStudyPlan), model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                String.format(CreateStudyPlanCommand.MESSAGE_SUCCESS, validStudyPlan), expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_duplicateStudyPlan_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlanInList \u003d model.getModulePlanner().getStudyPlanList().get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertCommandFailure(new CreateStudyPlanCommand(studyPlanInList), model,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                CreateStudyPlanCommand.MESSAGE_DUPLICATE_STUDYPLAN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateStudyPlanCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.storage.CreateStudyPlanCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.testutil.StudyPlanBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "// import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class CreateStudyPlanCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //TODO implement tests"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void constructor_nullStudyPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CreateStudyPlanCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_studyPlanAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //ModelStubAcceptingStudyPlanAdded modelStub \u003d new ModelStubAcceptingStudyPlanAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan validStudyPlan \u003d new StudyPlanBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //CommandResult commandResult \u003d new CreateStudyPlanCommand(validStudyPlan).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertEquals(String.format(CreateStudyPlanCommand.MESSAGE_SUCCESS, validStudyPlan),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //      commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertEquals(Arrays.asList(validStudyPlan), modelStub.studyPlansAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_duplicateStudyPlan_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // StudyPlan validStudyPlan \u003d new StudyPlanBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        // CreateStudyPlanCommand addCommand \u003d new CreateStudyPlanCommand(validStudyPlan);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //ModelStub modelStub \u003d new ModelStubWithStudyPlan(validStudyPlan);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertThrows(CommandException.class, CreateStudyPlanCommand.MESSAGE_DUPLICATE_STUDYPLAN,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //      () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan alice \u003d new StudyPlanBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan bob \u003d new StudyPlanBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        CreateStudyPlanCommand addAliceCommand \u003d new CreateStudyPlanCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        CreateStudyPlanCommand addBobCommand \u003d new CreateStudyPlanCommand(bob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        CreateStudyPlanCommand addAliceCommandCopy \u003d new CreateStudyPlanCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // different studyPlan -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public Path getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void setModulePlannerFilePath(Path modulePlannerFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void addStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void setModulePlanner(ReadOnlyModulePlanner newData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public ReadOnlyModulePlanner getModulePlanner() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public boolean hasStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void deleteStudyPlan(StudyPlan target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void setStudyPlan(StudyPlan target, StudyPlan editedStudyPlan) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public ObservableList\u003cStudyPlan\u003e getFilteredStudyPlanList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void updateFilteredStudyPlanList(Predicate\u003cStudyPlan\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * A Model stub that contains a single studyPlan."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private class ModelStubWithStudyPlan extends ModelStub {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        private final StudyPlan studyPlan;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModelStubWithStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            requireNonNull(studyPlan);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            this.studyPlan \u003d studyPlan;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public boolean hasStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            requireNonNull(studyPlan);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return this.studyPlan.isSameStudyPlan(studyPlan);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * A Model stub that always accept the studyPlan being added."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private class ModelStubAcceptingStudyPlanAdded extends ModelStub {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        final ArrayList\u003cStudyPlan\u003e studyPlansAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public boolean hasStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            requireNonNull(studyPlan);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return studyPlansAdded.stream().anyMatch(studyPlan::isSameStudyPlan);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public void addStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            requireNonNull(studyPlan);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            studyPlansAdded.add(studyPlan);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public ReadOnlyModulePlanner getModulePlanner() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return new ModulePlanner();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 198,
      "andyylam": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showStudyPlanAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDYPLAN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDYPLAN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalStudyPlans.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //Todo modify tests"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlanToDelete \u003d model.getFilteredStudyPlanList().get(INDEX_FIRST_STUDYPLAN.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDYPLAN_SUCCESS, studyPlanToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedModel.deleteStudyPlan(studyPlanToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudyPlanList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        showStudyPlanAtIndex(model, INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlanToDelete \u003d model.getFilteredStudyPlanList().get(INDEX_FIRST_STUDYPLAN.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDYPLAN_SUCCESS, studyPlanToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedModel.deleteStudyPlan(studyPlanToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        showNoStudyPlan(expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        showStudyPlanAtIndex(model, INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDYPLAN;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of module planner list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getModulePlanner().getStudyPlanList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_STUDYPLAN);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // different studyPlan -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private void showNoStudyPlan(Model model) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        model.updateFilteredStudyPlanList(p -\u003e false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(model.getFilteredStudyPlanList().isEmpty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 41,
      "andyylam": 4,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showStudyPlanAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDYPLAN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDYPLAN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalStudyPlans.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.testutil.StudyPlanBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO implement tests"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedStudyPlan \u003d new StudyPlanBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditStudyPlanDescriptor descriptor \u003d new EditStudyPlanDescriptorBuilder(editedStudyPlan).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDYPLAN, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDYPLAN_SUCCESS, editedStudyPlan);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ModulePlanner(model.getModulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedModel.setStudyPlan(model.getFilteredStudyPlanList().get(0), editedStudyPlan);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index indexLastStudyPlan \u003d Index.fromOneBased(model.getFilteredStudyPlanList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan lastStudyPlan \u003d model.getFilteredStudyPlanList().get(indexLastStudyPlan.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlanBuilder studyPlanInList \u003d new StudyPlanBuilder(lastStudyPlan);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedStudyPlan \u003d studyPlanInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditStudyPlanDescriptor descriptor \u003d new EditStudyPlanDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastStudyPlan, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDYPLAN_SUCCESS, editedStudyPlan);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ModulePlanner(model.getModulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedModel.setStudyPlan(lastStudyPlan, editedStudyPlan);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDYPLAN, new EditStudyPlanDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedStudyPlan \u003d model.getFilteredStudyPlanList().get(INDEX_FIRST_STUDYPLAN.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDYPLAN_SUCCESS, editedStudyPlan);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ModulePlanner(model.getModulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        showStudyPlanAtIndex(model, INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlanInFilteredList \u003d model.getFilteredStudyPlanList().get(INDEX_FIRST_STUDYPLAN.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedStudyPlan \u003d new StudyPlanBuilder(studyPlanInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDYPLAN,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new EditStudyPlanDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDYPLAN_SUCCESS, editedStudyPlan);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ModulePlanner(model.getModulePlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedModel.setStudyPlan(model.getFilteredStudyPlanList().get(0), editedStudyPlan);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_duplicateStudyPlanUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan firstStudyPlan \u003d model.getFilteredStudyPlanList().get(INDEX_FIRST_STUDYPLAN.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditStudyPlanDescriptor descriptor \u003d new EditStudyPlanDescriptorBuilder(firstStudyPlan).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_STUDYPLAN, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDYPLAN);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_duplicateStudyPlanFilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        showStudyPlanAtIndex(model, INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // edit studyPlan in filtered list into a duplicate in module planner"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlanInList \u003d model.getModulePlanner().getStudyPlanList()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .get(INDEX_SECOND_STUDYPLAN.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDYPLAN,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new EditStudyPlanDescriptorBuilder(studyPlanInList).build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDYPLAN);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_invalidStudyPlanIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudyPlanList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditStudyPlanDescriptor descriptor \u003d new EditStudyPlanDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * but smaller than size of module planner"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_invalidStudyPlanIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        showStudyPlanAtIndex(model, INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDYPLAN;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of module planner list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getModulePlanner().getStudyPlanList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new EditStudyPlanDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDYPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_STUDYPLAN, DESC_AMY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditStudyPlanDescriptor copyDescriptor \u003d new EditStudyPlanDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_STUDYPLAN, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_STUDYPLAN, DESC_AMY)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_STUDYPLAN, DESC_BOB)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 73,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudyPlanDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class EditStudyPlanDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO modify test?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 6,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // todo implement tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 9,
      "andyylam": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDYPLANS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.logic.commands.datamanagement.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import seedu.address.model.studyplan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.testutil.TypicalStudyPlans.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //TODO implement tests"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //private Model model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //private Model expectedModel \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // different studyPlan -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_zeroKeywords_noStudyPlanFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDYPLANS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //expectedModel.updateFilteredStudyPlanList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertEquals(Collections.emptyList(), model.getFilteredStudyPlanList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void execute_multipleKeywords_multipleStudyPlansFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDYPLANS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //expectedModel.updateFilteredStudyPlanList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudyPlanList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 20,
      "andyylam": 6,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // todo implement tests"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 11,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudyPlanAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDYPLAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalStudyPlans.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //TODO MODIFY TESTS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //model \u003d new ModelManager(getTypicalModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //expectedModel \u003d new ModelManager(model.getModulePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        showStudyPlanAtIndex(model, INDEX_FIRST_STUDYPLAN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 14,
      "andyylam": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CreateStudyPlanCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.logic.commands.CreateStudyPlanCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.testutil.StudyPlanBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class CreateStudyPlanCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO modify tests"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //private CreateStudyPlanCommandParser parser \u003d new CreateStudyPlanCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan expectedStudyPlan \u003d new StudyPlanBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateStudyPlanCommand(expectedStudyPlan));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateStudyPlanCommand(expectedStudyPlan));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateStudyPlanCommand(expectedStudyPlan));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateStudyPlanCommand(expectedStudyPlan));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateStudyPlanCommand(expectedStudyPlan));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan expectedStudyPlanMultipleTags \u003d new StudyPlanBuilder(BOB).withTags(VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new CreateStudyPlanCommand(expectedStudyPlanMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan expectedStudyPlan \u003d new StudyPlanBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new CreateStudyPlanCommand(expectedStudyPlan));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateStudyPlanCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, UserTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateStudyPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 25,
      "halfwhole": 1,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_STUDYPLAN));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 5,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditTitleCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDYPLAN;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDYPLAN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDYPLAN;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.logic.commands.EditTitleCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.logic.commands.EditTitleCommand.EditTitleStudyPlanDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.testutil.EditTitleStudyPlanDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class EditTitleCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO modify test?"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTitleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private EditTitleCommandParser parser \u003d new EditTitleCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertParseFailure(parser, \"1\", EditTitleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, UserTag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code StudyPlan} being edited,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, UserTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, UserTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, UserTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_STUDYPLAN;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleStudyPlanDescriptor descriptor \u003d new EditTitleStudyPlanDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleCommand expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDYPLAN;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleStudyPlanDescriptor descriptor \u003d new EditTitleStudyPlanDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleCommand expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDYPLAN;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleStudyPlanDescriptor descriptor \u003d new EditTitleStudyPlanDescriptorBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleCommand expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor \u003d new EditTitleStudyPlanDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor \u003d new EditTitleStudyPlanDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor \u003d new EditTitleStudyPlanDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor \u003d new EditTitleStudyPlanDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDYPLAN;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleStudyPlanDescriptor descriptor \u003d new EditTitleStudyPlanDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleCommand expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDYPLAN;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleStudyPlanDescriptor descriptor \u003d new EditTitleStudyPlanDescriptorBuilder()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleCommand expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor \u003d new EditTitleStudyPlanDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDYPLAN;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleStudyPlanDescriptor descriptor \u003d new EditTitleStudyPlanDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        EditTitleCommand expectedCommand \u003d new EditTitleCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 57,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.datamanagement.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.parser.datamanagement.FindCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ModulePlannerParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import seedu.address.logic.commands.CreateStudyPlanCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.testutil.StudyPlanUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class ModulePlannerParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO modify tests"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final ModulePlannerParser parser \u003d new ModulePlannerParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlan \u003d new StudyPlanBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        CreateStudyPlanCommand command \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                (CreateStudyPlanCommand) parser.parseCommand(StudyPlanUtil.getCreateStudyPlanCommand(studyPlan));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(new CreateStudyPlanCommand(studyPlan), command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDYPLAN.getOneBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_STUDYPLAN), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlan \u003d new StudyPlanBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //EditStudyPlanDescriptor descriptor \u003d new EditStudyPlanDescriptorBuilder(studyPlan).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //       + INDEX_FIRST_STUDYPLAN.getOneBased() + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //              + StudyPlanUtil.getEditStudyPlanDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertEquals(new EditCommand(INDEX_FIRST_STUDYPLAN, descriptor), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 30,
      "andyylam": 1,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDYPLAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDYPLAN, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDYPLAN, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UserTag expectedTag \u003d new UserTag(VALID_TAG_1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UserTag expectedTag \u003d new UserTag(VALID_TAG_1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cUserTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cUserTag\u003e expectedTagSet \u003d new HashSet\u003cUserTag\u003e(Arrays.asList(new UserTag(VALID_TAG_1),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new UserTag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 17,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDYPLANS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.testutil.ModulePlannerBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //TODO implement tests"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(new ModulePlanner(), new ModulePlanner(modelManager.getModulePlanner()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        userPrefs.setModulePlannerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        userPrefs.setModulePlannerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setModulePlannerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setModulePlannerFilePath(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setModulePlannerFilePath_validPath_setsModulePlannerFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modelManager.setModulePlannerFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(path, modelManager.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void hasStudyPlan_nullStudyPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudyPlan(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void hasStudyPlan_studyPlanNotInModulePlanner_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(modelManager.hasStudyPlan(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void hasStudyPlan_studyPlanInModulePlanner_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modelManager.addStudyPlan(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(modelManager.hasStudyPlan(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void getFilteredStudyPlanList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudyPlanList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlanner modulePlanner \u003d new ModulePlannerBuilder().withStudyPlan(ALICE).withStudyPlan(BENSON).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modelManager \u003d new ModelManager(modulePlanner, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(modulePlanner, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // different modulePlanner -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentModulePlanner, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modelManager.updateFilteredStudyPlanList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(modulePlanner, userPrefs)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modelManager.updateFilteredStudyPlanList(PREDICATE_SHOW_ALL_STUDYPLANS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        differentUserPrefs.setModulePlannerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(modulePlanner, differentUserPrefs)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 34,
      "LiuZechu": 3,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModuleInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static seedu.address.testutil.TypicalModulesInfo.CS2040S;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static seedu.address.testutil.TypicalModulesInfo.CS4248;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class ModuleInfoTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void parsePrereqTree_validPrereqTreeString_validPrereqTree() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        PrereqTree cs2040tree \u003d new PrereqNode(\"AND\", new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                new PrereqLeaf(\"CS1231S\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                new PrereqLeaf(\"CS1101S\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(cs2040tree, CS2040S.getPrereqTree());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void verify_failPrerequisites_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        boolean result1 \u003d CS2040S.verify(Arrays.asList(\"CS1101S\", \"CS1231\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        boolean result2 \u003d CS4248.verify(Arrays.asList(\"ST2131\", \"CS32243\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(result1, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(result2, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void verify_passPrerequisites_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        boolean result1 \u003d CS2040S.verify(Arrays.asList(\"CS1101S\", \"CS1231S\", \"CS2222\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        boolean result2 \u003d CS4248.verify(Arrays.asList(\"ST2131\", \"CS3243\", \"ST2334\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(result1, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(result2, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halfwhole": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModulePlannerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.testutil.TypicalStudyPlans.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.studyplan.exceptions.DuplicateStudyPlanException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.testutil.StudyPlanBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class ModulePlannerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO implement tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final ModulePlanner modulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(Collections.emptyList(), modulePlanner.getStudyPlanList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modulePlanner.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void resetData_withValidReadOnlyModulePlanner_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlanner newData \u003d getTypicalModulePlanner();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlanner.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(newData, modulePlanner);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void resetData_withDuplicateStudyPlans_throwsDuplicateStudyPlanException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // Two studyPlans with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedAlice \u003d new StudyPlanBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        List\u003cStudyPlan\u003e newStudyPlans \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlannerStub newData \u003d new ModulePlannerStub(newStudyPlans);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(DuplicateStudyPlanException.class, () -\u003e modulePlanner.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void hasStudyPlan_nullStudyPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modulePlanner.hasStudyPlan(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void hasStudyPlan_studyPlanNotInModulePlanner_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(modulePlanner.hasStudyPlan(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void hasStudyPlan_studyPlanInModulePlanner_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlanner.addStudyPlan(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(modulePlanner.hasStudyPlan(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void hasStudyPlan_studyPlanWithSameIdentityFieldsInModulePlanner_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlanner.addStudyPlan(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedAlice \u003d new StudyPlanBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(modulePlanner.hasStudyPlan(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void getStudyPlanList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modulePlanner.getStudyPlanList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * A stub ReadOnlyModulePlanner whose studyPlans list can violate interface constraints."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private static class ModulePlannerStub implements ReadOnlyModulePlanner {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        private final ObservableList\u003cStudyPlan\u003e studyPlans \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlannerStub(Collection\u003cStudyPlan\u003e studyPlans) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            this.studyPlans.setAll(studyPlans);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        public ObservableList\u003cStudyPlan\u003e getStudyPlanList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            return studyPlans;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 104,
      "andyylam": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModulesInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static seedu.address.testutil.TypicalModulesInfo.CS2040S;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static seedu.address.testutil.TypicalModulesInfo.getTypicalModulesInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class ModulesInfoTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private final ModulesInfo modulesInfo \u003d getTypicalModulesInfo();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void find_nullString_returnsNull() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModuleInfo moduleInfo \u003d modulesInfo.find(null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(moduleInfo, null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void find_invalidModuleCode_returnsNull() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModuleInfo moduleInfo \u003d modulesInfo.find(\"CS2040C\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(moduleInfo, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void find_validModuleCode_returnsModuleInfo() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModuleInfo moduleInfo \u003d modulesInfo.find(\"CS2040S\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(moduleInfo, CS2040S);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void getFocusAreaNames_returnsAllNames() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        HashSet\u003cString\u003e set \u003d modulesInfo.getFocusAreaNames();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        HashSet\u003cString\u003e expectedSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        expectedSet.add(\"AI\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        expectedSet.add(\"MIR\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(set, expectedSet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 2,
      "andyylam": 2,
      "halfwhole": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setModulePlannerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setModulePlannerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 1,
      "LiuZechu": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/studyplan/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.studyplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.testutil.StudyPlanBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO modify tests"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // different studyPlan -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(predicate.test(new StudyPlanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(predicate.test(new StudyPlanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(predicate.test(new StudyPlanBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(predicate.test(new StudyPlanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(predicate.test(new StudyPlanBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(predicate.test(new StudyPlanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(predicate.test(new StudyPlanBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 14,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/studyplan/StudyPlanTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.studyplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.testutil.StudyPlanBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class StudyPlanTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO implement tests"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan studyPlan \u003d new StudyPlanBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e studyPlan.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void isSameStudyPlan() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(ALICE.isSameStudyPlan(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(ALICE.isSameStudyPlan(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedAlice \u003d new StudyPlanBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(ALICE.isSameStudyPlan(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        editedAlice \u003d new StudyPlanBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(ALICE.isSameStudyPlan(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        editedAlice \u003d new StudyPlanBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(ALICE.isSameStudyPlan(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        editedAlice \u003d new StudyPlanBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(ALICE.isSameStudyPlan(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        editedAlice \u003d new StudyPlanBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(ALICE.isSameStudyPlan(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan aliceCopy \u003d new StudyPlanBuilder(ALICE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // different studyPlan -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedAlice \u003d new StudyPlanBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        editedAlice \u003d new StudyPlanBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        editedAlice \u003d new StudyPlanBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        editedAlice \u003d new StudyPlanBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        editedAlice \u003d new StudyPlanBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 31,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/studyplan/UniqueStudyPlanListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.studyplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.exceptions.DuplicateStudyPlanException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.testutil.StudyPlanBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class UniqueStudyPlanListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO modify tests"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private final UniqueStudyPlanList uniqueStudyPlanList \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void contains_nullStudyPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudyPlanList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void contains_studyPlanNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(uniqueStudyPlanList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void contains_studyPlanInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(uniqueStudyPlanList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void contains_studyPlanWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedAlice \u003d new StudyPlanBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(uniqueStudyPlanList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void add_nullStudyPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudyPlanList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void add_duplicateStudyPlan_throwsDuplicateStudyPlanException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(DuplicateStudyPlanException.class, () -\u003e uniqueStudyPlanList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlan_nullTargetStudyPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudyPlanList.setStudyPlan(null, ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlan_nullEditedStudyPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudyPlanList.setStudyPlan(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlan_targetStudyPlanNotInList_throwsStudyPlanNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(StudyPlanNotFoundException.class, () -\u003e uniqueStudyPlanList.setStudyPlan(ALICE, ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlan_editedStudyPlanIsSameStudyPlan_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.setStudyPlan(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueStudyPlanList expectedUniqueStudyPlanList \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedUniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(expectedUniqueStudyPlanList, uniqueStudyPlanList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlan_editedStudyPlanHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        StudyPlan editedAlice \u003d new StudyPlanBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.setStudyPlan(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueStudyPlanList expectedUniqueStudyPlanList \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedUniqueStudyPlanList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(expectedUniqueStudyPlanList, uniqueStudyPlanList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlan_editedStudyPlanHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.setStudyPlan(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueStudyPlanList expectedUniqueStudyPlanList \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedUniqueStudyPlanList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(expectedUniqueStudyPlanList, uniqueStudyPlanList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlan_editedStudyPlanHasNonUniqueIdentity_throwsDuplicateStudyPlanException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(DuplicateStudyPlanException.class, () -\u003e uniqueStudyPlanList.setStudyPlan(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void remove_nullStudyPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudyPlanList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void remove_studyPlanDoesNotExist_throwsStudyPlanNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(StudyPlanNotFoundException.class, () -\u003e uniqueStudyPlanList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void remove_existingStudyPlan_removesStudyPlan() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueStudyPlanList expectedUniqueStudyPlanList \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(expectedUniqueStudyPlanList, uniqueStudyPlanList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlans_nullUniqueStudyPlanList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudyPlanList.setStudyPlans((UniqueStudyPlanList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlans_uniqueStudyPlanList_replacesOwnListWithProvidedUniqueStudyPlanList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueStudyPlanList expectedUniqueStudyPlanList \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedUniqueStudyPlanList.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.setStudyPlans(expectedUniqueStudyPlanList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(expectedUniqueStudyPlanList, uniqueStudyPlanList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlans_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudyPlanList.setStudyPlans((List\u003cStudyPlan\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlans_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        List\u003cStudyPlan\u003e studyPlanList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        uniqueStudyPlanList.setStudyPlans(studyPlanList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UniqueStudyPlanList expectedUniqueStudyPlanList \u003d new UniqueStudyPlanList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        expectedUniqueStudyPlanList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(expectedUniqueStudyPlanList, uniqueStudyPlanList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void setStudyPlans_listWithDuplicateStudyPlans_throwsDuplicateStudyPlanException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        List\u003cStudyPlan\u003e listWithDuplicateStudyPlans \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(DuplicateStudyPlanException.class,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                () -\u003e uniqueStudyPlanList.setStudyPlans(listWithDuplicateStudyPlans));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            -\u003e uniqueStudyPlanList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/UserTagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.exceptions.InvalidTagNameException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class UserTagTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UserTag(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void constructor_invalidTagNameFormat_throwsInvalidTagNameException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(InvalidTagNameException.class, () -\u003e new UserTag(invalidTagName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void constructor_invalidDefaultTagName_throwsInvalidTagNameException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String invalidTagNameOne \u003d \"Completed\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(InvalidTagNameException.class, () -\u003e new UserTag(invalidTagNameOne));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String invalidTagNameTwo \u003d \"Core\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(InvalidTagNameException.class, () -\u003e new UserTag(invalidTagNameTwo));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e UserTag.isValidTagName(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // valid tag name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String validTagName \u003d \"Exchange\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(UserTag.isValidTagName(validTagName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void isDefault() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(TagBuilder.buildUserTag().isDefault());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void getTagName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(\"testTag\", TagBuilder.buildUserTag().getTagName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void rename() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UserTag tag \u003d TagBuilder.buildUserTag();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        String newName \u003d \"newName\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        tag.rename(newName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(\"newName\", tag.getTagName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void isSameTag_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(TagBuilder.buildUserTag().isSameTag(TagBuilder.buildUserTag()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(TagBuilder.buildUserTag(\"userTag\").isSameTag(TagBuilder.buildUserTag(\"userTag\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void isSameTag_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(TagBuilder.buildUserTag().isSameTag(TagBuilder.buildUserTag(\"differentName\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        UserTag tag \u003d TagBuilder.buildUserTag();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(tag.equals(tag));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // same name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertTrue(tag.equals(TagBuilder.buildUserTag()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // different name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(tag.equals(TagBuilder.buildUserTag(\"differentName\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void toString_stringReturned() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(\"[testTag]\", TagBuilder.buildUserTag().toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 90,
      "andyylam": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStudyPlanTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudyPlan.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import static seedu.address.testutil.TypicalStudyPlans.SP_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class JsonAdaptedStudyPlanTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO implement tests"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static final String INVALID_SEMESTER_NAME \u003d \"HELLO\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d SP_1.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void toModelType_validStudyPlanDetails_returnsStudyPlan() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d new JsonAdaptedStudyPlan(SP_1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        assertEquals(SP_1, studyPlan.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new JsonAdaptedStudyPlan(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studyPlan::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d new JsonAdaptedStudyPlan(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studyPlan::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new JsonAdaptedStudyPlan(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studyPlan::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d new JsonAdaptedStudyPlan(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studyPlan::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new JsonAdaptedStudyPlan(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studyPlan::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d new JsonAdaptedStudyPlan(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studyPlan::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new JsonAdaptedStudyPlan(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studyPlan::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d new JsonAdaptedStudyPlan(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                null, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studyPlan::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonAdaptedStudyPlan studyPlan \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                new JsonAdaptedStudyPlan(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, studyPlan::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 35,
      "andyylam": 1,
      "LiuZechu": 6,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonModulePlannerStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.testutil.TypicalStudyPlans.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class JsonModulePlannerStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //TODO modify tests"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonModulePlannerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void readModulePlanner_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readModulePlanner(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private java.util.Optional\u003cReadOnlyModulePlanner\u003e readModulePlanner(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new JsonModulePlannerStorage(Paths.get(filePath))."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                readModulePlanner(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertFalse(readModulePlanner(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readModulePlanner(\"notJsonFormatModulePlanner.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void readModulePlanner_invalidStudyPlanModulePlanner_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readModulePlanner(\"invalidStudyPlanModulePlanner.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void readModulePlanner_invalidAndValidStudyPlanModulePlanner_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                readModulePlanner(\"invalidAndValidStudyPlanModulePlanner.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void readAndSaveModulePlanner_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempModulePlanner.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlanner original \u003d getTypicalModulePlanner();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonModulePlannerStorage jsonModulePlannerStorage \u003d new JsonModulePlannerStorage(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        jsonModulePlannerStorage.saveModulePlanner(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ReadOnlyModulePlanner readBack \u003d jsonModulePlannerStorage.readModulePlanner(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(original, new ModulePlanner(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        original.addStudyPlan(HOON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        original.removeStudyPlan(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        jsonModulePlannerStorage.saveModulePlanner(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        readBack \u003d jsonModulePlannerStorage.readModulePlanner(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(original, new ModulePlanner(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        original.addStudyPlan(IDA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        jsonModulePlannerStorage.saveModulePlanner(original); // file path not specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        readBack \u003d jsonModulePlannerStorage.readModulePlanner().get(); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(original, new ModulePlanner(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void saveModulePlanner_nullModulePlanner_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveModulePlanner(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Saves {@code modulePlanner} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private void saveModulePlanner(ReadOnlyModulePlanner modulePlanner, String filePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            new JsonModulePlannerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                    .saveModulePlanner(modulePlanner, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void saveModulePlanner_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveModulePlanner(new ModulePlanner(), null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 114,
      "andyylam": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonModulesInfoStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class JsonModulesInfoStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonModulesInfoStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void readModulesInfo_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readModulesInfo(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private Optional\u003cModulesInfo\u003e readModulesInfo(String modulesInfoFileInTestDataFolder)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(modulesInfoFileInTestDataFolder);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return new JsonModulesInfoStorage(prefsFilePath).readModulesInfo(prefsFilePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void readModulesInfo_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertFalse(readModulesInfo(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void readModulesInfo_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readModulesInfo(\"NotJsonFormatModulesInfo.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void readModulesInfo_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulesInfo expected \u003d getTypicalModulesInfo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulesInfo actual \u003d readModulesInfo(\"TypicalModulesInfo.json\").get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void readModulesInfo_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulesInfo actual \u003d readModulesInfo(\"EmptyModulesInfo.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(new ModulesInfo(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public void readModulesInfo_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulesInfo expected \u003d getTypicalModulesInfo();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulesInfo actual \u003d readModulesInfo(\"ExtraValuesModulesInfo.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 4,
      "halfwhole": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableModulePlannerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.testutil.TypicalStudyPlans;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class JsonSerializableModulePlannerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableModulePlannerTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private static final Path TYPICAL_STUDY_PLANS_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalStudyPlansModulePlanner.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private static final Path INVALID_STUDY_PLAN_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidStudyPlanModulePlanner.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private static final Path DUPLICATE_STUDY_PLAN_FILE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateStudyPlanModulePlanner.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //TODO implement tests"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void toModelType_typicalStudyPlansFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonSerializableModulePlanner dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_STUDY_PLANS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                JsonSerializableModulePlanner.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlanner modulePlannerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlanner typicalStudyPlansModulePlanner \u003d TypicalStudyPlans.getTypicalModulePlanner();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(modulePlannerFromFile, typicalStudyPlansModulePlanner);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void toModelType_invalidStudyPlanFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonSerializableModulePlanner dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDY_PLAN_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                JsonSerializableModulePlanner.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void toModelType_duplicateStudyPlans_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonSerializableModulePlanner dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDY_PLAN_FILE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                JsonSerializableModulePlanner.class).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableModulePlanner.MESSAGE_DUPLICATE_STUDY_PLAN,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        userPrefs.setModulePlannerFilePath(Paths.get(\"moduleplanner.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 1,
      "LiuZechu": 13,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "//import static seedu.address.testutil.TypicalStudyPlans.getTypicalModulePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.ReadOnlyModulePlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        JsonModulePlannerStorage modulePlannerStorage \u003d new JsonModulePlannerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        JsonModulesInfoStorage modulesInfoStorage \u003d new JsonModulesInfoStorage(getTempFilePath(\"modsInfo\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        storageManager \u003d new StorageManager(modulePlannerStorage, userPrefsStorage, modulesInfoStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    //TODO implement"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void modulePlannerReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "         * {@link JsonModulePlannerStorage} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonModulePlannerStorageTest} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlanner original \u003d getTypicalModulePlanner();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        storageManager.saveModulePlanner(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ReadOnlyModulePlanner retrieved \u003d storageManager.readModulePlanner().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertEquals(original, new ModulePlanner(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public void getModulePlannerFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        assertNotNull(storageManager.getModulePlannerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 16,
      "andyylam": 1,
      "halfwhole": 1,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTitleStudyPlanDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.storage.EditTitleCommand.EditTitleStudyPlanDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * A utility class to help with building EditTitleStudyPlanDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class EditTitleStudyPlanDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private EditTitleStudyPlanDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public EditTitleStudyPlanDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor \u003d new EditTitleStudyPlanDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public EditTitleStudyPlanDescriptorBuilder(EditTitleStudyPlanDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.descriptor \u003d new EditTitleStudyPlanDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns an {@code EditTitleStudyPlanDescriptor} with fields containing {@code studyPlan}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public EditTitleStudyPlanDescriptorBuilder(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor \u003d new EditTitleStudyPlanDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor.setName(studyPlan.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor.setPhone(studyPlan.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor.setEmail(studyPlan.getEmail());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor.setAddress(studyPlan.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        descriptor.setTags(studyPlan.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTitleStudyPlanDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public EditTitleStudyPlanDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTitleStudyPlanDescriptor}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public EditTitleStudyPlanDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        Set\u003cUserTag\u003e tagSet \u003d Stream.of(tags).map(UserTag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public EditTitleStudyPlanDescriptor build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModulePlannerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * {@code ModulePlanner ab \u003d new ModulePlannerBuilder().withStudyPlan(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class ModulePlannerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private ModulePlanner modulePlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ModulePlannerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlanner \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ModulePlannerBuilder(ModulePlanner modulePlanner) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.modulePlanner \u003d modulePlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Adds a new {@code StudyPlan} to the {@code ModulePlanner} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ModulePlannerBuilder withStudyPlan(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        modulePlanner.addStudyPlan(studyPlan);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public ModulePlanner build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return modulePlanner;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudyPlanBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * A utility class to help with building StudyPlan objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class StudyPlanBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    // TODO: implement this entire class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    private Set\u003cUserTag\u003e tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public StudyPlanBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Initializes the StudyPlanBuilder with the data of {@code studyPlanToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public StudyPlanBuilder(StudyPlan studyPlanToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //tags \u003d new HashSet\u003c\u003e(studyPlanToCopy.getTags());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Sets the {@code Name} of the {@code StudyPlan} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public StudyPlanBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code StudyPlan} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public StudyPlanBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Builds a new studyplan."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public StudyPlan build() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        //return new StudyPlan(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return new StudyPlan(new Title(\"this is just a temporary holder\"), new ModulesInfo());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 57,
      "halfwhole": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudyPlanUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.storage.CreateStudyPlanCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.logic.commands.storage.EditTitleCommand.EditTitleStudyPlanDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "//import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * A utility class for StudyPlan."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class StudyPlanUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns an add command string for adding the {@code studyPlan}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static String getCreateStudyPlanCommand(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return CreateStudyPlanCommand.COMMAND_WORD + \" \" + getStudyPlanDetails(studyPlan);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the part of command string for the given {@code studyPlan}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static String getStudyPlanDetails(StudyPlan studyPlan) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        sb.append(PREFIX_NAME + studyPlan.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        sb.append(PREFIX_PHONE + studyPlan.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        sb.append(PREFIX_EMAIL + studyPlan.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        sb.append(PREFIX_ADDRESS + studyPlan.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        studyPlan.getTags().stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.getTagName() + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudyPlanDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static String getEditStudyPlanDescriptorDetails(EditTitleStudyPlanDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            Set\u003cUserTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.getTagName()).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 24,
      "halfwhole": 4,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TagBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.DefaultTag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.DefaultTagType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.tag.UserTag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * A utility class to help with building Tag objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class TagBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Builds a UserTag with the name \"testTag\"."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static UserTag buildUserTag() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new UserTag(\"testTag\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Builds a UserTag with the specified name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static UserTag buildUserTag(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new UserTag(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Builds a DefaultTag of type CORE."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static DefaultTag buildDefaultTag() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return new DefaultTag(DefaultTagType.CORE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the middle index of the studyPlan in the {@code model}\u0027s studyPlan list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudyPlanList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the last index of the studyPlan in the {@code model}\u0027s studyPlan list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudyPlanList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns the studyPlan in the {@code model}\u0027s studyPlan list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static StudyPlan getStudyPlan(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        return model.getFilteredStudyPlanList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final Index INDEX_FIRST_STUDYPLAN \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final Index INDEX_SECOND_STUDYPLAN \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static final Index INDEX_THIRD_STUDYPLAN \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModulesInfo.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModuleInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " * A utility class containing a list of {@code ModuleInfo} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halfwhole"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "public class TypicalModulesInfo {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public static final ModuleInfo CS2040S \u003d new ModuleInfo("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            \"CS2040S\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            4,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            \"CS2040S description\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            \"(AND CS1231S CS1101S)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public static final ModuleInfo CS4248 \u003d new ModuleInfo("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            \"CS4248\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            \"Natural Language Processing\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            4,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList(\"AI\", \"MIR\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            \"CS4248 description\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "            \"(AND (OR CS3243 CS3245) ST2334)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halfwhole"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    public static ModulesInfo getTypicalModulesInfo() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        HashMap\u003cString, ModuleInfo\u003e mapModulesInfo \u003d new HashMap\u003cString, ModuleInfo\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        mapModulesInfo.put(\"CS2040S\", CS2040S);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        mapModulesInfo.put(\"CS4248\", CS4248);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        ModulesInfo modulesInfo \u003d new ModulesInfo(mapModulesInfo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "        return modulesInfo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halfwhole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halfwhole": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudyPlans.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.ModulePlanner;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.ModulesInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.semester.SemesterName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "import seedu.address.model.studyplan.StudyPlan;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "import seedu.address.model.studyplan.Title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": " * A utility class containing a list of {@code StudyPlan} objects to be used in tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "public class TypicalStudyPlans {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    private static ModulesInfo modulesInfo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    // Typical study plans"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final StudyPlan SP_1 \u003d new StudyPlan(new Title(\"first study plan\"), modulesInfo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final StudyPlan SP_2 \u003d new StudyPlan(new Title(\"second study plan\"), modulesInfo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    public static final StudyPlan SP_3 \u003d new StudyPlan(new Title(\"third study plan\"), modulesInfo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        // TODO: pass in modulesInfo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        SP_1.addModuleToSemester(new ModuleCode(\"CS1101S\"), SemesterName.Y1S1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        SP_1.addModuleToSemester(new ModuleCode(\"CS2030\"), SemesterName.Y1S2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        SP_1.addModuleToSemester(new ModuleCode(\"CS2040S\"), SemesterName.Y2S1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        SP_2.addModuleToSemester(new ModuleCode(\"CS3230\"), SemesterName.Y2S1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        SP_2.addModuleToSemester(new ModuleCode(\"CS2100\"), SemesterName.Y2S1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        SP_2.addModuleToSemester(new ModuleCode(\"CS2103T\"), SemesterName.Y2S1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        SP_3.addModuleToSemester(new ModuleCode(\"MA1521\"), SemesterName.Y1S1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private TypicalStudyPlans() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "     * Returns an {@code ModulePlanner} with all the typical studyPlans."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static ModulePlanner getTypicalModulePlanner() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        ModulePlanner ab \u003d new ModulePlanner();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "        for (StudyPlan studyPlan : getTypicalStudyPlans()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "            ab.addStudyPlan(studyPlan);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiwai"
        },
        "content": "    public static List\u003cStudyPlan\u003e getTypicalStudyPlans() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiuZechu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SP_1, SP_2, SP_3));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiwai": 12,
      "andyylam": 6,
      "LiuZechu": 23,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 1,
      "-": 6
    }
  }
]
