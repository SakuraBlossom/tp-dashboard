[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d THRIFT"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W12-2/main[image:https://img.shields.io/travis/AY1920S1-CS2103T-W12-2/main/master.svg?logo\u003dtravis-ci\u0026logoColor\u003dwhite[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "https://ci.appveyor.com/project/lightz96/main[image:https://img.shields.io/appveyor/ci/lightz96/main/master.svg?logo\u003dAppveyor[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W12-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W12-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "https://app.netlify.com/sites/thrift/deploys[image:https://img.shields.io/netlify/fbb1dc07-179d-412c-a5cc-52c34f58a42c?logo\u003dnetlify[Netlify Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "link:https://github.com/AY1920S1-CS2103T-W12-2/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-blue.svg[MIT License]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* This is a desktop finance tracker application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* It is intended for money-conscious NUS students who wish to track their spendings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* This application was modified from the base application: AddressBook-Level3, created by the https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "lightz96": 6,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "mainClassName \u003d \u0027thrift.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    archiveName \u003d \u0027thrift.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u0027site-name\u0027: \u0027THRIFT\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W12-2/main\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 2,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "THRIFT was developed by the https://github.com/AY1920S1-CS2103T-W12-2[CS2103T-W12-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Poh Jia Hao"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "image::limerencee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "{empty}[https://github.com/limerencee[github]] [\u003c\u003climerencee#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Role: Project Manager/Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Lee Bo Qiang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::lightz96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "{empty}[https://github.com/lightz96[github]] [\u003c\u003clightz96#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Role: User Experience Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d Oen Qi Han, Kenson"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "image::kensonoenqh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "{empty}[https://github.com/kensonoenqh[github]] [\u003c\u003ckensonoenqh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Role: Process Analyst/ Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Responsibilities: Business use-case modeling"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d Lye Jian Wen"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::lye-jw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "link:https://github.com/lye-jw[[github]] [\u003c\u003clye-jw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Role: Quality Assurance Manager/Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Responsibilities: Meeting of user needs and Proper function of app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Ang Chin Guan, Melvin"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::krusagiz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "{empty}[https://github.com/krusagiz[github]] [\u003c\u003ckrusagiz#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Role: Software Architect/Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "lightz96": 4,
      "krusagiz": 6,
      "lye-jw": 5,
      "kensonoenqh": 5,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W12-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* *Email us* : You can also reach us at `THRIFT [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d THRIFT - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::logo/logo.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "By: `Team THRIFT`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c\u003cthrift, THRIFT\u003e\u003e is an application for money-conscious NUS students who wish to track their spending, in order to make better informed decisions when it comes to saving money."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "It maintain records of your daily incoming and outgoing transactions and constantly keep track of the user\u0027s spending and income."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "THRIFT is optimized for those who prefer to work with a Command Line Interface (CLI) while still enjoying the benefits of having a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "It is a simple, no-frills finance tracker made for the target user group."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "This developer guide aims to communicate to the developers working on THRIFT the design and architecture of the implementation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "It also includes non-technical details to give the developers an idea of the direction THRIFT intends to take on both current and future features."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "A developer should be able to understand the design, architecture and goals of THRIFT after reading this guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Scope"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "This developer guide specifies the technical and non-technical details of THRIFT."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "The technical aspects include the design and architecture while the non-technical aspects include the user stories, use cases and \u003c\u003cnfr, NFRs\u003e\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* money-conscious NUS students"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* number of transactions are significant and needs to be managed"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* apps are preferred on desktop over other platforms"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* typists that type quickly and prefers typing over mouse input"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* CLI usage does not pose any discomfort"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lightz96"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* provides a more effective financial management compared to typical mouse/GUI driven app"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* plans for future spending are made easier"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* congregates all info regarding fees and costs in a single location"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lightz96"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,\u003c25%,\u003c30%,\u003c40%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS student"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track my spending"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|manage my finances better"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|movie addict who watches every movie that comes out"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of my movie ticket and snack expenses"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|have enough money to watch the movies I want."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|computing student who has many software subscriptions"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the recurring expenses tracker"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|manage my subscription payments"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student staying in the Halls with many expenses"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|see all my expenses in a central spot"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of all the different expenses"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS international student"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of my travelling and spending expenses"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|have enough money when I travel around Singapore"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|someone who loves travelling"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the tracker to help me plan for my travelling budgets"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|fully enjoy my time on vacation"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|SOC student always on my laptop"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|write down my expenses"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|really quickly due to the command-line nature"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who uses both PayLah and cash interchangeably"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|tag my expenses"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of both expenses"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS student who loans money to a lot of friends"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the debt tracker to track and collect my interest"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student accepting financial aid"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the expense tracker report"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep within my budget"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who borrows money frequently from other people"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the debt tracker to remember who I owe money to"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS international student"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be able to keep track of recurring utility expenses such as phone bills"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|plan a suitable budget"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|phone junkie"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|set aside enough money for purchasing the latest phones and accessories"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who is conscious about money"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be able to view my monthly expenditure"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|know how much I had spent this month"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|female buying clothes frequently"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track exactly how much I spend on clothes each month using the tracker and filter"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|don’t exceed my clothes budget"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who likes to buy games online"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the expense tracker funds left"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|see if I am able to pay my school fees"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|mobile game addict who makes a lot of in-app purchases"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the expenses tracker report"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|manage my finances and to sustain my essential expenses"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student that frequently takes on part-time jobs"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use finance planner to track my income"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|frugal NUS student"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the expense tracker report"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|optimise my finances"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|social animal frequently going to clubs and bars"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|plan out my expenses"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|moderate my spending on social activities and keep up my balanced lifestyle"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student that stays in Hall"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|add my expenses to the expense tracker"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track funds contributed to hall activities"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who wants to save more money"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be able to compare my past expenditure with my current expenditure"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|know if I had spent more money or saved money this month"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|hall resident who eats supper daily"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of what I have been eating and how much I usually spend on supper"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|don\u0027t overspend on each supper"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|child of wealthy parent"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|easily delete previous expenses"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|properly count my expenditure should my parents decide to help cover some parts of it"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|careless student"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|make some changes to the information"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|ensure that the application displays the correct information"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who loves to keep track of finance"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|view all the possible commands"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|fully utilize the functionalities offered by the application"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student that wants to allocate less money to material goods and more to food"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|analyse the spending by category and adjust accordingly"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|on-campus resident who likes to cook my own food"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track my grocery bills"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|moderate the cost and frequency of grocery shopping"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|motor enthusiast"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the planner to set aside funds"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep purchasing vehicle parts, modifications and accessories and keep pursuing my hobby"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who has a bad habit of spending a lot on material goods"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|see which goods are taking up most of my monthly budget"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|better manage my finances"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|Hypebeast that spends a lot of money on branded goods"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|look at my recent spending percentage"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|manage my finances and keep my budget"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who is going for exchange"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|make sure that I bring enough foreign currency"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|avoid using my credit card"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who is currently in a relationship"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|the tracker to help me set aside enough money for both my partner and I"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|get married soon"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who always lends money to people"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be able to send receipt to my loanee"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|claim back my money"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|dota addict who always buy arcanas and battle pass levels"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track my spending"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|afford to buy more battle pass levels"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|active youth in need of sustenance within a limited budget"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|get recommendations for food prices"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be healthy physically and financially"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|shopaholic"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the finance planner to find discounts"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|spend less on my shopping"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS student with stingy and over-controlling parents"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|send my expense report for the month to my parents to view easily"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|avoid them asking me what I have been spending on all the time"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lightz96"
        },
        "content": "(For all use cases below, the *System* is the `THRIFT` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Add an expense/income transaction"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "limerencee"
        },
        "content": "1. User requests to add a new expense or income into the records."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "limerencee"
        },
        "content": "2. THRIFT processes the request and adds the expense/income into the transactions list."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* 1a. The parameters specified by the user are not valid."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and the transactions list is not updated."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a transaction"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "limerencee"
        },
        "content": "1. User requests to delete an existing transaction from the records."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "limerencee"
        },
        "content": "2. THRIFT processes the request and removes the transaction from the transactions list."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* 1a. The command or transaction specified by the user is not valid."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and the transactions list is not updated."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d Use case: Update a transaction\u0027s details"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "1. User requests to update a transaction\u0027s name, cost or tags."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "2. THRIFT processes the request, updates the specified details in the transactions list and informs user of what has been changed."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* 1a. Some parameters specified by the user are not valid."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and does not update details for invalid parameters."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Clone a transaction"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "1. User requests to clone a transaction."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "2. THRIFT processes the request and adds an identical transaction to the transactions list."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* 1a. The index parameter specified by the user is not valid."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and does not update the transactions list."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Show help window"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lightz96"
        },
        "content": "1. User requests to view to syntax of a specific command."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lightz96"
        },
        "content": "2. THRIFT displays the syntax of the requested command."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* 1a. The command specified by the user is not valid."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lightz96"
        },
        "content": "** 1a1. THRIFT displays an invalid command error to user."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d Use case: List monthly transactions"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "1. User requests to view list of transactions for a specific month."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "2. THRIFT displays transactions of that month."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "+"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Tag a transaction"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d *Extensions*"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. User requests to tag a specific transaction."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. THRIFT processes the request and adds the tag to the specific transaction."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* 1a. The command specified by the user is not valid."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "** 1a1. THRIFT displays an invalid command error to user."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Untag a transaction"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. User requests to untag a specific transaction."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. THRIFT processes the request and removes the tag from the specific transaction."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* 1a. The parameters specified by the user are not valid."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and the transaction is not updated."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Use case: Convert a transaction"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. User requests to convert the currency of a specific transaction to a new currency."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. THRIFT processes the request and updates specific transaction with the new value in the new currency."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* 1a. The parameters specified by the user are not valid."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and the transaction is not updated."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Use case: Convert a value"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. User requests to convert a value in SGD to a specific currency."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. THRIFT processes the request and displays the new value in the new currency."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* 1a. The parameters specified by the user are not valid."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". THRIFT should be able to run on any \u003c\u003cmainstream-os, mainstream OS\u003e\u003e as long as it has `Java 11` installed."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". THRIFT should be able to hold up to 250 transactions without a noticeable drop in performance for typical usage."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". A user with above average typing speed for \u003c\u003cregular-english-text, regular English text\u003e\u003e (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". THRIFT should be able to run with or without internet connection."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". THRIFT should work for a single user only."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". THRIFT should not require user to install."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". Features implemented should be testable using manual testing and automated testing."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[thrift]] THRIFT::"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for \"Terminal-input Human Readable Interactive Finance Tracker\". It is the application this developer guide is for."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[nfr]] NFR::"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for \"Non-functional Requirement\""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for commonly used Operating Systems (OS) such as Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[regular-english-text]] Regular English Text::"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for text with ordinary english grammar structures and vocabulary generally used by the public."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "It excludes syntax related to programming and \u003c\u003csystem-administration, system administration\u003e\u003e."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[system-administration]] System Administration::"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for the field of work in which someone manages one or more systems, be they software, hardware, servers or workstations"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "with the goal of ensuring the systems are running efficiently and effectively."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Launching and shutting down"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Adding a transaction"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Adding a transaction, be it income or expense."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `add_expense n/Bought a pair of Apple Earpods c/350` +"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: A new expense transaction is added into the list. Details of the expense transaction shown in the status message. The date string is automatically saved into the transaction list."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `add_income n/Awarded bursary prize c/500` +"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: A new income transaction is added into the list. Details of the income transaction shown in the status message. The date string is automatically saved into the transactions list."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `add_expense n/Lunch in school` +"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: No transaction is added. Error details shown in the status message (missing `c/COST` parameter). Status bar remains the same."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Deleting a transaction"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Deleting a transaction while all transactions are listed"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. Multiple transactions in the list."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `delete i/1` +"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "limerencee"
        },
        "content": "   Expected: First transaction is deleted from the list. Details of the deleted transaction shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `delete i/0` +"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "limerencee"
        },
        "content": "   Expected: No transaction is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d Updating a transaction\u0027s details"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ". Updating a transaction\u0027s details and reflecting changes in the list."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. The first transaction is `1. [-] Laksa ($10.50) [Lunch][Food]`."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update i/1 | n/Fried Rice` +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: Details of the updated transaction and original value of updated content shown in status message. Corresponding listed transaction reflects changes. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update i/1 | c/20` +"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: Details of the updated transaction and original value of updated content shown in status message. Corresponding listed transaction reflects changes. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update i/INVALID_INDEX` where `INVALID_INDEX` is a number less than 1 or more than list size. +"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update i/1 z/Calamari` +"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update firstTransaction` +"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update` +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d Cloning a transaction"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ". Creating a duplicate of a transaction."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. At least one transaction in the list."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `clone i/1` +"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: New transaction identical to first transaction in the list added to the bottom of the list. Details of the cloned transaction shown in the status message. Date string for new transaction is automatically saved into the transaction list."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `clone i/INVALID_INDEX` where `INVALID_INDEX` is a number less than 1 or more than list size. +"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No transaction is cloned. Error details shown in status message."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `clone firstTransaction` +"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `clone` +"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d Listing the transactions"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ". Listing out transactions by month or by tag."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ".. Prerequisites: At least one transaction in the list."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ".. Test case: `list` +"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "   Expected: The entire list of transactions will be shown."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ".. Test case: `list m/Jan` +"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "   Expected: The list of transactions for January will be shown."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ".. Test case: `list m/Jan t/Food` +"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "   Expected: The list of transactions related to food for January will be shown."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Tagging a transaction"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Tagging a transaction and reflecting changes in the list."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. The first transaction is `1. [-] Laksa ($10.50) [Lunch][Food]`."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: `tag i/1 t/EXPENSIVE` +"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Details of the tagged transaction shown in status message. Listing the transaction reflects changes."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `tag i/INVALID_INDEX` t/VALID_TAG` where `INVALID_INDEX` is a number less than 1 or more than list size and VALID_TAG is a valid tag. +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `tag firstTransaction` +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `tag` +"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Untagging a transaction"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Untagging a transaction and reflecting changes in the list."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. The first transaction is `1. [-] Laksa ($10.50) [Lunch][Food]`."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag i/1 t/FOOD` +"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Details of the untagged transaction shown in status message. Listing the transaction reflects changes."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag i/INVALID_INDEX t/VALID_TAG` where `INVALID_INDEX` is a number less than 1 or more than list size and VALID_TAG is a valid tag. +"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag i/VALID_INDEX t/NOT_INSIDE_TAG` where `VALID_INDEX` is a valid transaction index and NOT_INSIDE_TAG is not inside the transaction specified. +"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag firstTransaction` +"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag` +"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Converting a transaction"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Converting a transaction\u0027s currency and reflecting changes in the list."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. The first transaction is `1. [-] Laksa ($10.50) [Lunch][Food]`."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert to/USD i/1` +"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Details of the converted transaction shown in status message. Listing the transaction reflects changes."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert to/USD i/INVALID_INDEX` where `INVALID_INDEX` is a number less than 1 or more than list size. +"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert to/INVALID_CURRENCY i/VALID_INDEX` where `INVALID_CURRENCY` is not a supported currency and `VALID_INDEX` is a valid transaction index. +"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert firstTransaction` +"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert` +"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Converting a value"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Converting a values\u0027s currency and displaying it"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert from/SGD to/USD c/cost`. +"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Original value and converted value displayed to the user."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert from/SGD to/INVALID_CURRENCY c/cost` where `INVALID_CURRENCY` is not a supported currency. +"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Error details shown in status message."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert from/INVALID_CURRENCY to/USD c/cost` where `INVALID_CURRENCY` is not a supported currency. +"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Error details shown in status message."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Undoing the previous command"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". Undoing previous command and reflecting changes in the list"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `add expense n/Chicken rice c/3`"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Transaction regarding to the expense spent on chicken rice is removed from the list."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `add income n/Salary c/2500`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Transaction regarding to the income received from salary is removed from the list."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `delete 1`"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: First transaction removed from the list is restored back to its original position."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: (Assuming that the first transaction is `1. [-] Chicken rice ($3.00)`)"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `update i/1 | n/Fried Rice`"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: The description of the first transaction is changed back to chicken rice."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `clone i/1`"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Newly cloned transaction is removed from the list."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `tag i/1 t/LUNCH`"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Lunch tag is removed from the first transaction in the list."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `untag i/1 t/LUNCH`"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Lunch tag is added back to the first transaction in the list."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `list`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: No changes. Message shown in the status message indicating that there are no available commands for user to undo."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Redoing the undone command"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". Redoing undone command and reflecting changes in the list"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `add expense n/Laksa c/3`"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Transaction regarding to the expense spent on Laksa is added back to the list."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `add income n/bursary c/2500`"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Transaction regarding to the income received from bursary is added back to the list."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `delete 1`"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: First transaction removed from the list."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: (Assume that the first transaction is `1. [-] Chicken rice ($3.00)`)"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `update i/1 | n/Fried Rice`"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: The description of the first transaction remains as fried rice."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `clone i/1`"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Newly cloned transaction is added back to the list."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `tag i/1 t/FOOD`"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Food tag is added back to the first transaction in the list."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `untag i/1 t/FOOD`"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Food tag is removed from the first transaction in the list."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `untag i/1 t/LUNCH`"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `clone i/1`"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: No changes. Message shown in the status message indicating that there are no available commands for user to redo."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `list`"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: No changes. Message shown in the status message indicating that there are no available commands for user to redo."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Showing help window"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: `help` +"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "lightz96"
        },
        "content": "   Expected: A new pop-up help window is displayed."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: `help delete` +"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "lightz96"
        },
        "content": "   Expected: Syntax of the `delete` command is shown in the status message."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Delete the data file at `.\\data\\thrift.json`."
      }
    ],
    "authorContributionMap": {
      "limerencee": 62,
      "lightz96": 370,
      "krusagiz": 161,
      "lye-jw": 65,
      "kensonoenqh": 22,
      "-": 376
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d THRIFT - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::logo/logo.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "By: `Team THRIFT`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "THRIFT is for money-conscious NUS students who wish to track their spending, in order to make better informed decisions when it comes to saving money. Maintain records of your daily incoming and outgoing transactions and constantly keep track of your spending and income! THRIFT is optimized for those who prefer to work with a Command Line Interface (CLI) while still enjoying the benefits of having a Graphical User Interface (GUI). If you want a simple, no-frills finance tracker, look no further than THRIFT!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "1. Ensure that you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "2. Download the latest THRIFT.jar https://github.com/AY1920S1-CS2103T-W12-2/main/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your THRIFT application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "4. Double-click the file to start the app, the GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "5. Type the command in the command box and press `Enter` to execute it. e.g. typing `help` and pressing `Enter` will open the help window."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "6. Some example commands you can try:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_expense n/Apple Airpods c/200`: adds an expense called `Apple Airpods` which cost $`200`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_income n/Bursary Award c/350`: adds an income called `Bursary Award` which incremented your budget by $`350`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `delete i/1`: deletes the 1st transaction in the current list shown in the UI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d Features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Command format:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Words in `UPPER_CASE` are parameters to be supplied by the user e.g. `expense n/EXPENSE_NAME c/COST`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Items in square brackets `[ ]` are optional e.g. `n/EXPENSE_NAME [t/TAG]` can be used as `n/Laksa t/Food`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Items in round brackets `( )` with `|` are mandatory parameters where a selection is needed e.g. `tag (add | delete)` means you need to input either `tag add` or `tag delete`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Items with `...` after them can be used multiple times including zero times e.g. `[t/TAG] …` can be used as ` ` (i.e. 0 times), `t/Food t/Dinner` etc."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Parameters can be in any order e.g. if the command specifies `n/EXPENSE_NAME c/COST`, `c/COST n/EXPENSE_NAME` will achieve the same outcome."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[ExpenseTag]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Adding an expense: `add_expense`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Format: `add_expense n/EXPENSE_NAME c/COST [t/TAG]...`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TIP: The default currency is in Singapore Dollars (SGD). You are recommended to `convert` foreign currencies to SGD before adding the value as the `COST`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_expense n/Laksa c/10.50 t/Lunch t/Food`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_expense n/Travel c/53 t/Travel`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `New entry added: 1. [-] Laksa ($10.50) [Lunch][Food]`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `New entry added: 2. [-] Travel ($53) [Travel]`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[IncomeTag]]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Adding an income: `add_income`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Format: `add_income n/INCOME_NAME c/COST [t/TAG]...`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_income n/Allowance c/1000 t/Monthly`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `New entry added: 3. [+] Allowance ($1000) [Monthly]`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[DeleteTag]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Deleting a transaction: `delete`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Format: `delete i/INDEX`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Deletes the transaction at the specified `INDEX`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `INDEX` refers to the index number currently shown in the UI (after filtering, if any)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `delete i/1`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `Entry deleted: 1. Laksa ($10.50) [Lunch][Food]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "// tag::update[]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[UpdateTag]]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Updating a transaction’s details: `update`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Format: `update i/INDEX | PREFIX_LETTER/UPDATED_DETAILS`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Updates the transaction\u0027s details at the specified `INDEX`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** `INDEX` refers to the index number currently shown in the UI, and must be a *positive integer*."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* `PREFIX_LETTER` specifies type of detail to be updated, e.g. `n/` for name."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `UPDATED_DETAILS` are the new details of type corresponding to `PREFIX_LETTER` that the transaction is to be updated with."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*   `update i/1 | n/Curry Laksa`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*   `update i/1 | c/11`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Expected output: +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "NOTE: Assume 2nd command occurs after 1st"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*   `Entry name updated: 1. [-] Curry Laksa ($10.50) [Lunch][Food] +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Original name was: Laksa`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*   `Entry cost updated: 1. [-] Curry Laksa ($11) [Lunch][Food] +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Original cost was: $10.50`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "// end::update[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "//tag::tag[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[TagTag]]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Tagging a transaction: `tag`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Format: `tag i/INDEX t/TAG_NAME`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* Tags the transaction at the specified `INDEX` with `TAG_NAME`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` refers to the index number currently shown in the UI (after filtering, if any)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*   `tag i/8 t/Debt`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*   `Entry tagged: 8. Student Loan ($12000.00) [Debt]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// end::tag[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// tag::untag[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[UntagTag]]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Untagging a transaction: `untag`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Format: `untag i/INDEX t/TAG_NAME`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* Untags `TAG_NAME` from the transaction at the specified `INDEX`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` refers to the index number currently shown in the UI (after filtering, if any)."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*   `untag i/7 t/Important`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*   `Entry untagged: 7. DoTA Arcanas ($49.00) [Game]`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// end::untag[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// tag::convert[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[ConvertTag]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Converting currency: `convert`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Format: `convert to/TARGET_CURRENCY (c/COST|i/INDEX)`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* Converts the a fixed value or `Transaction` entry"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* Only one of either `VALUE` or `INDEX` is allowed per command"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `VALUE` must be positive."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` refers to the index number currently shown in the UI (after filtering, if any)."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `convert to/USD v/1000`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `convert to/JPY i/8`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*   `Value converted: SGD1000 \u003d USD725.82`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*   `Entry converted: 8. Student Loan (¥934,566.00) [Debt]`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// end::convert[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "// tag::clone[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[CloneTag]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Cloning a transaction: `clone`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Format: `clone i/INDEX`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Clones (creates a duplicate of) a `Transaction` entry."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* Clone produced is added to a new index at the bottom of the list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "****"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*   `clone i/1`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Expected output: +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "NOTE: Assume entry at index 1 is `1. [-] Laksa ($10.50) [Lunch][Food]` and there are no other entries."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*   `New entry added: 2. [-] Laksa ($10.50) [Lunch][Food]`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "// end::clone[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[UndoTag]]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Undoing the previous undoable command: `undo`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lightz96"
        },
        "content": "NOTE: Undoable commands are commands that modify the data of THRIFT application."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".List of undoable commands[[Undoable]]:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cExpenseTag, add_expense\u003e\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cIncomeTag, add_income\u003e\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cDeleteTag, delete\u003e\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cUpdateTag, update\u003e\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cCloneTag, clone\u003e\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cTagTag, tag\u003e\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cUntagTag, untag\u003e\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `add_expense n/Laksa c/10.50 t/Lunch t/Food` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `undo`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `add_income n/Allowance c/1000 t/Monthly` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `list` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `undo`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Deletes the expense spent on Laksa from THRIFT."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Deletes the allowance income from THRIFT."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[RedoTag]]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Redoing the undone command: `redo`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Redo the \u003c\u003cUndoable, undoable command\u003e\u003e that was previously undone by the user."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `add_expense n/Laksa c/10.50 t/Lunch t/Food` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `undo` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `redo`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Adds the expense spent on Laksa back to THRIFT."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "[[ListTag]]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d List expenses for the month: `list`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Format: `list [m/MONTH] [t/TAG]`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "*  `list`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "*  `list m/Jan t/Food`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* Returns a list of all expenses for the current month."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* Returns a list of all food expenses for the specified month."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[HelpTag]]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Displaying help page: `help`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Format: `help [COMMAND]`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* `help delete`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Displays a detailed list of information regarding all the THRIFT commands."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Returns syntax of `delete` command."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[ExitTag]]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Exiting THRIFT application: `exit`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Generating an external report `[coming in v2.0]`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limerencee"
        },
        "content": "With this feature, you will be able to save your monthly budget report into an external file for your record purposes. The report will clearly state your expenditure, income and remaining budget for the month."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Recommending dining options based on budget `[coming in v2.0]`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Depending on your remaining budget and the remaining days to the end of the month, THRIFT will recommend you dining places in NUS which will suit your budget. For example, if you are running low on funds, you might get recommended to travel to the Arts canteen to eat since there are really cheap options there."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Encrypting THRIFT data `[coming in v2.0]`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limerencee"
        },
        "content": "If you are especially conscious about having your data spied on, this function will definitely ease your worries. With encryption enabled, your data will not be known to the intruder should they steal your THRIFT application data."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*Q*: How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lightz96"
        },
        "content": "*A*: Runs the application in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous THRIFT application."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d Command summary"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* \u003c\u003cExpenseTag, *Expense*\u003e\u003e:  `add_expense n/EXPENSE_NAME c/COST [t/TAG]...` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example: `add_expense n/Laksa c/10.50 t/Lunch t/Food`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* \u003c\u003cIncomeTag, *Income*\u003e\u003e: `add_income n/INCOME_NAME c/COST [t/TAG]...` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example: `add_income n/Allowance c/1000 t/Monthly`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* \u003c\u003cDeleteTag, *Delete*\u003e\u003e: `delete i/INDEX` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example: `delete i/1`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* \u003c\u003cUpdateTag, *Update*\u003e\u003e: `update i/INDEX | PREFIX_LETTER/UPDATED_DETAILS` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Example: `update i/1 | n/Curry Laksa`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* \u003c\u003cCloneTag, *Clone*\u003e\u003e: `clone i/INDEX` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Example: `clone i/1`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* \u003c\u003cListTag, *List*\u003e\u003e: `list [m/MONTH] [t/TAG]` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Example: `list m/Jan t/Food`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cTagTag,*Tag*\u003e\u003e: `tag i/INDEX t/TAG_NAME` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Example: `tag i/8 t/Debt`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cUntagTag, *Untag*\u003e\u003e: `untag i/INDEX t/TAG_NAME` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Example: `untag i/7 t/Important`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cConvertTag, *Convert*\u003e\u003e: `convert to/TARGET_CURRENCY (c/COST|i/INDEX)` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " `convert c/USD v/1000` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " `convert c/JPY i/8`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cUndoTag, *Undo*\u003e\u003e: `undo`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cRedoTag, *Redo*\u003e\u003e: `redo`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cHelpTag, *Help*\u003e\u003e: `help [COMMAND]` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Example: `help delete`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* \u003c\u003cExitTag, *Exit*\u003e\u003e: `exit`"
      }
    ],
    "authorContributionMap": {
      "limerencee": 62,
      "lightz96": 65,
      "krusagiz": 62,
      "lye-jw": 43,
      "kensonoenqh": 17,
      "-": 102
    }
  },
  {
    "path": "docs/team/kensonoenqh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d Oen Qi Han, Kenson - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d Project: THRIFT"
      }
    ],
    "authorContributionMap": {
      "kensonoenqh": 6
    }
  },
  {
    "path": "docs/team/krusagiz.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d Ang Chin Guan Melvin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d PROJECT: THRIFT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "krusagiz": 7
    }
  },
  {
    "path": "docs/team/lightz96.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d Lee Bo Qiang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-2/main"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d Project: THRIFT"
      }
    ],
    "authorContributionMap": {
      "lightz96": 7
    }
  },
  {
    "path": "docs/team/limerencee.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d Poh Jia Hao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d PROJECT: THRIFT"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6
    }
  },
  {
    "path": "docs/team/lye-jw.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d Lye Jian Wen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d PROJECT: THRIFT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupdate]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dclone]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003d]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003d]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "---"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 53
    }
  },
  {
    "path": "src/main/java/thrift/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/thrift/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/thrift/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.storage.JsonThriftStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.storage.ThriftStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing THRIFT ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ThriftStorage thriftStorage \u003d new JsonThriftStorage(userPrefs.getThriftFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        storage \u003d new StorageManager(thriftStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s thrift and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * The data from the sample thrift will be used instead if {@code storage}\u0027s thrift is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * or an empty thrift will be used instead if errors occur when reading {@code storage}\u0027s thrift."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Optional\u003cReadOnlyThrift\u003e thriftOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ReadOnlyThrift initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftOptional \u003d storage.readThrift();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            if (!thriftOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample THRIFT\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            initialData \u003d thriftOptional.orElseGet(SampleDataUtil::getSampleThrift);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty THRIFT\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            initialData \u003d new Thrift();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty THRIFT\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            initialData \u003d new Thrift();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty THRIFT\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"Starting THRIFT \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping THRIFT ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 20,
      "lightz96": 23,
      "-": 140
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static final String LOG_FILE \u003d \"thrift.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "lightz96": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"The transaction index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 14
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/thrift/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/thrift/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/thrift/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the Thrift."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @see Model#getThrift()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    ReadOnlyThrift getThrift();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of transactions*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the user prefs\u0027 thrift file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 8,
      "lightz96": 7,
      "-": 36
    }
  },
  {
    "path": "src/main/java/thrift/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.parser.ThriftParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final ThriftParser thriftParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thriftParser \u003d new ThriftParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Command command \u003d thriftParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            storage.saveThrift(model.getThrift());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return model.getThrift();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return model.getThriftFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 12,
      "lightz96": 10,
      "-": 56
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/AddExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Adds an expense transaction to the THRIFT."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_expense\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense transaction to THRIFT. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME DESCRIPTION \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Laksa \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_COST + \"4.50 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Lunch \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Meal \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public AddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof AddExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 50,
      "lightz96": 2
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/AddIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Adds an expense transaction to the THRIFT."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddIncomeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_income\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an income transaction to THRIFT. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME DESCRIPTION \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Laksa \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_COST + \"4.50 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Lunch \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Meal \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New income added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Income toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Creates an AddIncomeCommand to add the specified {@code Income}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public AddIncomeCommand(Income income) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(income);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        toAdd \u003d income;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.addIncome(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof AddIncomeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddIncomeCommand) other).toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 50,
      "lightz96": 2
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Clears THRIFT."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"THRIFT has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.setThrift(new Thrift());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Deletes a transaction identified using it\u0027s displayed index from THRIFT."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \": Deletes the transaction identified by the index number used in the displayed transaction list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSACTION_SUCCESS \u003d \"Deleted Transaction: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 13,
      "lightz96": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Edits the details of an existing transaction in THRIFT."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the transaction identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME DESCRIPTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_COST + \"COST] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Mee Siam \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_COST + \"3.00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_EDIT_TRANSACTION_SUCCESS \u003d \"Edited Transaction: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final EditTransactionDescriptor editTransactionDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param index of the transaction in the filtered transaction list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param editTransactionDescriptor details to edit the transaction with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditCommand(Index index, EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(editTransactionDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.editTransactionDescriptor \u003d new EditTransactionDescriptor(editTransactionDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transactionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction editedTransaction \u003d createEditedTransaction(transactionToEdit, editTransactionDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.setTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionList(Model.PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Creates and returns a {@code Transaction} with the details of {@code transactionToEdit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * edited with {@code editTransactionDescriptor}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static Transaction createEditedTransaction(Transaction transactionToEdit,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                                                       EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assert transactionToEdit !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Description updatedDescription \u003d editTransactionDescriptor.getDescription()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .orElse(transactionToEdit.getDescription());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Value updatedValue \u003d editTransactionDescriptor.getValue().orElse(transactionToEdit.getValue());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionDate updatedDate \u003d editTransactionDescriptor.getDate().orElse(transactionToEdit.getDate());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTransactionDescriptor.getTags().orElse(transactionToEdit.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (transactionToEdit instanceof Expense) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new Expense(updatedDescription, updatedValue, updatedDate, updatedTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new Income(updatedDescription, updatedValue, updatedDate, updatedTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 editTransactionDescriptor.equals(e.editTransactionDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Stores the details to edit the transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static class EditTransactionDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private Value value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private TransactionDate date;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public EditTransactionDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public EditTransactionDescriptor(EditTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            setValue(toCopy.value);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, value, date, tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setValue(Value value) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Optional\u003cValue\u003e getValue() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return Optional.ofNullable(value);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setDate(TransactionDate date) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Optional\u003cTransactionDate\u003e getDate() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            if (!(other instanceof EditTransactionDescriptor)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            EditTransactionDescriptor e \u003d (EditTransactionDescriptor) other;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u0026\u0026 getValue().equals(e.getValue())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 208,
      "lightz96": 1
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting THRIFT as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Finds and lists all transactions in THRIFT whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all transaction whose descriptions contain any \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public FindCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 9,
      "lightz96": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Lists all persons in THRIFT to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionList(Model.PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "lightz96": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/AddExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.model.transaction.TransactionDate.DATE_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommandParser implements Parser\u003cAddExpenseCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public AddExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_COST, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_COST)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Value value \u003d ParserUtil.parseValue(argMultimap.getValue(CliSyntax.PREFIX_COST).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionDate date \u003d new TransactionDate(DATE_FORMATTER.format(new Date()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(CliSyntax.PREFIX_TAG));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expense \u003d new Expense(description, value, date, tagList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 56
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_COST, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand.EditTransactionDescriptor editTransactionDescriptor \u003d new EditCommand.EditTransactionDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        * Uncomment and edit to make it suitable for updating Description and possibly Cost."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            editTransactionDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                argMultimap.getValue(CliSyntax.PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(CliSyntax.PREFIX_TAG)).ifPresent(editTransactionDescriptor::setTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!editTransactionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new EditCommand(index, editTransactionDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 70
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "-": 25
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Description parseDescription(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses a {@code String value} into a {@code Value}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the given {@code value} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Value parseValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedValue \u003d value.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!Value.isValidValue(trimmedValue)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Value(trimmedValue);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 88
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ThriftParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class ThriftParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 15,
      "lightz96": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/thrift/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the user prefs\u0027 THRIFT file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Sets the user prefs\u0027 THRIFT file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void setThriftFilePath(Path thriftFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Replaces THRIFT data with the data in {@code thrift}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void setThrift(ReadOnlyThrift thrift);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /** Returns THRIFT */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    ReadOnlyThrift getThrift();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if a transaction with the same identity as {@code transaction} exists in the transactions list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    boolean hasTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Deletes the given transaction."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * The transaction must exist in the transactions list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void deleteTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds the given income."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void addIncome(Income income);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the given transaction {@code target} with {@code editedTransaction}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code target} must exist in the transactions list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void setTransaction(Transaction target, Transaction editedTransaction);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered transaction list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 24,
      "lightz96": 9,
      "-": 59
    }
  },
  {
    "path": "src/main/java/thrift/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Represents the in-memory model of the THRIFT data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final Thrift thrift;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Initializes a ModelManager with the given thrift and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ModelManager(ReadOnlyThrift thrift, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(thrift, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.fine(\"Initializing with THRIFT: \" + thrift + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thrift \u003d new Thrift(thrift);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.thrift.getTransactionList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this(new Thrift(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return userPrefs.getThriftFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath(Path thriftFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(thriftFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        userPrefs.setThriftFilePath(thriftFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d THRIFT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThrift(ReadOnlyThrift thrift) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thrift.resetData(thrift);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean hasTransaction(Transaction t) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift.hasTransaction(t);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void deleteTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.removeTransaction(transaction);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(expense);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void addIncome(Income income) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(income);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Transaction List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Transaction} backed by the internal list of"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * {@code versionedThrift}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift.equals(other.thrift)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 27,
      "lightz96": 28,
      "-": 106
    }
  },
  {
    "path": "src/main/java/thrift/model/ReadOnlyThrift.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Unmodifiable view of THRIFT."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public interface ReadOnlyThrift {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an unmodifiable view of the transactions list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 14,
      "lightz96": 2
    }
  },
  {
    "path": "src/main/java/thrift/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/thrift/model/Thrift.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Wraps all data at the THRIFT level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class Thrift implements ReadOnlyThrift {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final TransactionList transactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Thrift() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Creates an THRIFT using the Transaction in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Thrift(ReadOnlyThrift toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the contents of the transaction list with {@code transactions}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.transactions.setTransactions(transactions);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Resets the existing data of this transactions list with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void resetData(ReadOnlyThrift newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        setTransactions(newData.getTransactionList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    //// transaction-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds a transaction to THRIFT."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void addTransaction(Transaction t) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactions.add(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Replaces the given transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * {@code target} must exist in THRIFT."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * The transaction identity of {@code editedTransaction} must not be the same as another existing transaction in"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * THRIFT."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(editedTransaction);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactions.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if the specified transaction exists in the transactions list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean hasTransaction(Transaction t) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactions.contains(t);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Removes {@code key} from this {@code Thrift}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * {@code key} must exist in THRIFT."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void removeTransaction(Transaction key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactions.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactions.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                || (other instanceof Thrift // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u0026\u0026 transactions.equals(((Thrift) other).transactions));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactions.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 22,
      "lightz96": 20,
      "-": 76
    }
  },
  {
    "path": "src/main/java/thrift/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Path thriftFilePath \u003d Paths.get(\"data\" , \"thrift.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        setThriftFilePath(newUserPrefs.getThriftFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thriftFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath(Path thriftFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(thriftFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thriftFilePath \u003d thriftFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u0026\u0026 thriftFilePath.equals(o.thriftFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return Objects.hash(guiSettings, thriftFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + thriftFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 10,
      "-": 75
    }
  },
  {
    "path": "src/main/java/thrift/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Represents a Tag in THRIFT."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a Transaction\u0027s message description in the Transactions list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param description Description describing the Transaction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 40
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(transaction.getDescription().toString(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 32
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents an Expense in the transactions list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: details are present and not null, field values are validated and immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Expense extends Transaction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final TransactionDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Value value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Expense(Description description, Value value, TransactionDate date, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Value getValue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if both expenses have the same description and value. This allows easier"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * cloning of expense transactions in the future."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean isSameTransaction(Transaction otherExpense) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getValue().equals(getValue());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getValue().equals(getValue())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getTags().equals(getTags());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Objects.hash(description, date, value, tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        builder.append(\"[-] \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" ($\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getValue())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\") Date: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 102
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Income.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents an Income in the transactions list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: details are present and not null, field values are validated and immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Income extends Transaction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final TransactionDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Value value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Income(Description description, Value value, TransactionDate date, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Value getValue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if both income have the same description and value. This allows easier"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * cloning of income transactions in the future."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean isSameTransaction(Transaction otherIncome) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (otherIncome \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return otherIncome !\u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getValue().equals(getValue());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!(other instanceof Income)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Income otherIncome \u003d (Income) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return otherIncome.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getDate().equals(getDate())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getValue().equals(getValue())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getTags().equals(getTags());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Objects.hash(description, date, value, tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        builder.append(\"[+] \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" ($\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getValue())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\") Date: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limerencee": 103
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a transaction containing the various types of transaction parameters such as Description,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Date, Value, Tags."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public abstract class Transaction {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract boolean isSameTransaction(Transaction otherTransaction);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Get this Transaction object\u0027s Description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return This Transaction object\u0027s Description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract Description getDescription();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Get this Transaction object\u0027s Date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return This Transaction object\u0027s Date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract TransactionDate getDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Gets this Transaction object\u0027s Value in {@link Value#DEFAULT_CURRENCY}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * denomination."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return This Transaction object\u0027s Value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * in {@link Value#DEFAULT_CURRENCY} denomination."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract Value getValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Gets this Transaction object\u0027s set of Tag."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Set\u0026lt;Tag\u0026gt; belonging to this Transaction object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 45
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/TransactionDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents the Date whereby the Transaction is created on."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"Date should be specified in dd/MM/yyyy format\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final SimpleDateFormat DATE_FORMATTER \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private String rawDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code TransactionDate}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date Datestamp for the Transaction."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException If invalid date String is supplied, but it will be handled in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@link #isValidDate(String)}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionDate(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        checkArgument(isValidDate(date), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.date \u003d DATE_FORMATTER.parse(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            rawDate \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if the supplied Date string is valid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date Date string to check for validity."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if the supplied string is a valid Date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            DATE_FORMATTER.setLenient(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            DATE_FORMATTER.parse(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Gets the Date object for the Transaction."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Date object belonging to the Transaction."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return rawDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof TransactionDate // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 date.equals(((TransactionDate) other).date)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 82
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A list of Transactions that does not allow nulls. However, the removal of a transaction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * uses Transaction#equals(Object) so as to ensure that the transaction with exactly the same fields will be removed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if the supplied Transaction object is inside this transaction list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean contains(Transaction toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTransaction);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Adds a transaction to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.set(index, editedTransaction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions(TransactionList replacement) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof TransactionList // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        \u0026\u0026 internalList.equals(((TransactionList) other).internalList));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 105
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Value.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.util.CurrencyUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a Transaction\u0027s monetary value in the Transactions list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidValue(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Value {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALUE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"Cost should only contain numbers and an optional decimal point, which if specified, accepts up to 2\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \" decimal digits.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String CURRENCY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"Currency should only be \u0027SGD\u0027, \u0027MYR\u0027, \u0027USD\u0027 OR \u0027EUR\u0027!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d+\\\\.?\\\\d{0,2}$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_CURRENCY \u003d \"SGD\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final Double amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final String currency;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code Value} with the default currency {@link #DEFAULT_CURRENCY}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param value Monetary cost describing the value."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Value(String value) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        checkArgument(isValidValue(value), VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.amount \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.currency \u003d DEFAULT_CURRENCY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code Value} with a specified currency."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param amount Monetary cost describing the value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currency Currency the amount is in."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Value(String amount, String currency) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        checkArgument(isValidValue(amount), VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        checkArgument(isValidCurrency(currency), CURRENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.amount \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns true if a given String is a valid currency type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currency Currency type to check if it is valid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if Currency type is supported."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isValidCurrency(String currency) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Map\u003cString, Double\u003e currencyMappings \u003d CurrencyUtil.getCurrencyMap();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return currencyMappings.containsKey(currency);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if a given String is a valid monetary value."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if amount is a valid double."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isValidValue(String test) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the value in {@link #DEFAULT_CURRENCY} currency amount, if the currency is supported in"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@link CurrencyUtil}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Value in {@link #DEFAULT_CURRENCY} denomination."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public double getMonetaryValue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Map\u003cString, Double\u003e currencyMappings \u003d CurrencyUtil.getCurrencyMap();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return CurrencyUtil.convertFromDefaultCurrency(currencyMappings, amount, currency);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return String.valueOf(getMonetaryValue());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof Value // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 amount \u003d\u003d (((Value) other).amount)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 currency.equals(((Value) other).currency)); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return amount.hashCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 101,
      "lightz96": 1
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6
    }
  },
  {
    "path": "src/main/java/thrift/model/util/CurrencyUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains utility methods for dealing with currencies."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class CurrencyUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Map\u003cString, Double\u003e getCurrencyMap() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Map\u003cString, Double\u003e currencyMappings \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        currencyMappings.put(\"SGD\", 1.00);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        currencyMappings.put(\"MYR\", 3.03);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        currencyMappings.put(\"USD\", 0.73);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        currencyMappings.put(\"EUR\", 0.66);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return currencyMappings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts input currency amount from {@link Value#DEFAULT_CURRENCY} denomination"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * to the currency specified in the input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currencyMappings Mapping of currency rates scaling from"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *     {@link Value#DEFAULT_CURRENCY}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param value Amount to convert."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currency Target currency to convert to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Amount in target currency as a double."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static double convertFromDefaultCurrency(Map\u003cString, Double\u003e currencyMappings, double value,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            String currency) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currencyMappings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (currencyMappings.containsKey(currency)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return (value * currencyMappings.get(currency));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts input currency amount to {@link Value#DEFAULT_CURRENCY} denomination"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * from the currency specified in the input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currencyMappings Mapping of currency rates scaling from"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *     {@link Value#DEFAULT_CURRENCY}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param value Amount to convert."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currency Target currency to convert from."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Amount in {@link Value#DEFAULT_CURRENCY} denomination as a double."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static double convertToDefaultCurrency(Map\u003cString, Double\u003e currencyMappings, double value, String currency) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currencyMappings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (currencyMappings.containsKey(currency)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return (value / currencyMappings.get(currency));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 67
    }
  },
  {
    "path": "src/main/java/thrift/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Contains utility methods for populating {@code Thrift} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Transaction[] getSampleTransaction() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Transaction[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            new Expense(new Description(\"Laksa\"), new Value(\"3.50\"), new TransactionDate(\"13/03/1937\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    getTagSet(\"Lunch\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            new Expense(new Description(\"Airpods 2nd Generation\"), new Value(\"300\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    new TransactionDate(\"14/03/1937\"), getTagSet(\"Accessory\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            new Income(new Description(\"Bursary\"), new Value(\"500\"), new TransactionDate(\"12/03/1937\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    getTagSet(\"Award\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static ReadOnlyThrift getSampleThrift() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift sampleThrift \u003d new Thrift();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (Transaction sampleTransaction : getSampleTransaction()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            sampleThrift.addTransaction(sampleTransaction);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return sampleThrift;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 42,
      "lightz96": 7
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonAdaptedTransaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Jackson-friendly version of {@link Transaction}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "class JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code JsonAdaptedTransaction} with the given transaction details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public JsonAdaptedTransaction(@JsonProperty(\"type\") String type, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            @JsonProperty(\"value\") String value, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts a given {@code Transaction} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public JsonAdaptedTransaction(Transaction source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (source instanceof Expense) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            type \u003d \"expense\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            type \u003d \"income\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d source.getValue().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts this Jackson-friendly adapted transaction object into the model\u0027s {@code Transaction} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Transaction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final List\u003cTag\u003e transactionTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            transactionTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    Transaction.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final String modelType \u003d type;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    Value.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!Value.isValidValue(value)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Value modelValue \u003d new Value(value);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    TransactionDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!TransactionDate.isValidDate(date)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(TransactionDate.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final TransactionDate modelDate \u003d new TransactionDate(date);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(transactionTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (modelType.equals(\"expense\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new Expense(modelDescription, modelValue, modelDate, modelTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new Income(modelDescription, modelValue, modelDate, modelTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 113,
      "lightz96": 4
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonSerializableThrift.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * An Immutable THRIFT that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "@JsonRootName(value \u003d \"thrift\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "class JsonSerializableThrift {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final List\u003cJsonAdaptedTransaction\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Constructs a {@code JsonSerializableThrift} with the given transactions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public JsonSerializableThrift(@JsonProperty(\"transactions\") List\u003cJsonAdaptedTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.transactions.addAll(transactions);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Converts a given {@code ReadOnlyThrift} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableThrift}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public JsonSerializableThrift(ReadOnlyThrift source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactions.addAll(source.getTransactionList().stream().map(JsonAdaptedTransaction::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Converts this THRIFT into the model\u0027s {@code Thrift} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Thrift toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift thrift \u003d new Thrift();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (JsonAdaptedTransaction jsonAdaptedTransaction : transactions) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Transaction transaction \u003d jsonAdaptedTransaction.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thrift.addTransaction(transaction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 9,
      "lightz96": 15,
      "-": 32
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonThriftStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * A class to access THRIFT data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class JsonThriftStorage implements ThriftStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonThriftStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public JsonThriftStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cReadOnlyThrift\u003e readThrift() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return readThrift(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Similar to {@link #readThrift()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cReadOnlyThrift\u003e readThrift(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Optional\u003cJsonSerializableThrift\u003e jsonThrift \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                filePath, JsonSerializableThrift.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (!jsonThrift.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return Optional.of(jsonThrift.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift(ReadOnlyThrift thrift) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        saveThrift(thrift, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Similar to {@link #saveThrift(ReadOnlyThrift)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift(ReadOnlyThrift thrift, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(thrift);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableThrift(thrift), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6,
      "lightz96": 20,
      "-": 54
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/thrift/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public interface Storage extends ThriftStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Optional\u003cReadOnlyThrift\u003e readThrift() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void saveThrift(ReadOnlyThrift thrift) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 4,
      "lightz96": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/thrift/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Manages storage of Thrift data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private ThriftStorage thriftStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public StorageManager(ThriftStorage thriftStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thriftStorage \u003d thriftStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Thrift methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thriftStorage.getThriftFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cReadOnlyThrift\u003e readThrift() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return readThrift(thriftStorage.getThriftFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cReadOnlyThrift\u003e readThrift(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thriftStorage.readThrift(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift(ReadOnlyThrift thrift) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        saveThrift(thrift, thriftStorage.getThriftFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift(ReadOnlyThrift thrift, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thriftStorage.saveThrift(thrift, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "lightz96": 16,
      "-": 56
    }
  },
  {
    "path": "src/main/java/thrift/storage/ThriftStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Represents a storage for {@link Thrift}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public interface ThriftStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns Thrift data as a {@link ReadOnlyThrift}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Optional\u003cReadOnlyThrift\u003e readThrift() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @see #getThriftFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Optional\u003cReadOnlyThrift\u003e readThrift(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Saves the given {@link ReadOnlyThrift} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param thrift cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void saveThrift(ReadOnlyThrift thrift) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @see #saveThrift(ReadOnlyThrift)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void saveThrift(ReadOnlyThrift thrift, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 46
    }
  },
  {
    "path": "src/main/java/thrift/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/thrift/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/thrift/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w12-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/thrift/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private TransactionListPanel transactionListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private StackPane transactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getThriftFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionListPanel getTransactionListPanel() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactionListPanel;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 12,
      "lightz96": 3,
      "-": 178
    }
  },
  {
    "path": "src/main/java/thrift/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/thrift/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/thrift/ui/TransactionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * An UI component that displays information of a {@code Transaction}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String FXML \u003d \"TransactionListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Thrift level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label reserved;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description.setText(transaction.getDescription().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value.setText(transaction.getValue().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date.setText(transaction.getDate().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        reserved.setText(\"Dummy text label in TransactionCard.java.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transaction.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionCard card \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 20,
      "lightz96": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/thrift/ui/TransactionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Panel containing the list of transactions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String FXML \u003d \"TransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionListView.setItems(transactionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Transaction} using a {@code TransactionCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 45,
      "lightz96": 1
    }
  },
  {
    "path": "src/main/java/thrift/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/thrift/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/thrift_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "lightz96": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/thrift/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         title\u003d\"THRIFT\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    \u003cImage url\u003d\"@/images/thrift_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "          \u003cStackPane fx:id\u003d\"transactionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lightz96": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/TransactionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "      \u003cLabel fx:id\u003d\"value\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "      \u003cLabel fx:id\u003d\"reserved\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/TransactionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "  \u003cListView fx:id\u003d\"transactionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/thrift/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/thrift/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/thrift/commons/core/MessagesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class MessagesTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void messageUnknownCommand_messageAsExpected() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(\"Unknown command\", Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void messageInvalidCommandFormat_messageAsExpected() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(\"Invalid command format! \\nError!\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, \"Error!\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //No space after \\n"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertNotEquals(\"Invalid command format! \\n Error!\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, \"Error!\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void messageInvalidTransactionDisplayedIndex_messageAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(\"The transaction index provided is invalid\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void messageTransactionListedOverview_messageAsExpected() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(\"3 transactions listed!\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 3));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 35
    }
  },
  {
    "path": "src/test/java/thrift/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/thrift/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/thrift_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, ()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 4,
      "lightz96": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e read(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6,
      "-": 111
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 4,
      "-": 140
    }
  },
  {
    "path": "src/test/java/thrift/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.storage.JsonThriftStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonThriftStorage thriftStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new JsonThriftStorage(temporaryFolder.resolve(\"thrift.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        StorageManager storage \u003d new StorageManager(thriftStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static class JsonThriftIoExceptionThrowingStub extends JsonThriftStorage {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        private JsonThriftIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void saveThrift(ReadOnlyThrift thrift, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 16,
      "lightz96": 9,
      "-": 109
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/AddExpenseCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.IncomeBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddExpenseCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_newExpense_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(new AddExpenseCommand(validExpense), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_newIncome_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Income validIncome \u003d new IncomeBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.addIncome(validIncome);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(new AddIncomeCommand(validIncome), model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(AddIncomeCommand.MESSAGE_SUCCESS, validIncome), expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 48,
      "lightz96": 3
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/AddExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExpenseCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelStubAcceptingTransactionAdded modelStub \u003d new ModelStubAcceptingTransactionAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandResult commandResult \u003d new AddExpenseCommand(validExpense).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.transactionsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense one \u003d new ExpenseBuilder().withDescription(\"Expense One\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense two \u003d new ExpenseBuilder().withDescription(\"Expense Two\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        AddExpenseCommand addOneCommand \u003d new AddExpenseCommand(one);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        AddExpenseCommand addTwoCommand \u003d new AddExpenseCommand(two);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(addOneCommand.equals(addOneCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        AddExpenseCommand addOneCommandCopy \u003d new AddExpenseCommand(one);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(addOneCommand.equals(addOneCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(addOneCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(addOneCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(addOneCommand.equals(addTwoCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void setThriftFilePath(Path thriftFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void setThrift(ReadOnlyThrift newData) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void deleteTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private class ModelStubWithTransaction extends ModelStub {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private final Transaction transaction;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ModelStubWithTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return this.transaction.isSameTransaction(transaction);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private class ModelStubAcceptingTransactionAdded extends ModelStub {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final ArrayList\u003cTransaction\u003e transactionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return transactionsAdded.stream().anyMatch(transaction::isSameTransaction);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            transactionsAdded.add(expense);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new Thrift();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 181,
      "lightz96": 10
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void execute_emptyThift_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void execute_nonEmptyThrift_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setThrift(new Thrift());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6,
      "lightz96": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DESCRIPTION_LAKSA \u003d \"Laksa\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DESCRIPTION_PENANG_LAKSA \u003d \"Penang Laksa\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DESCRIPTION_AIRPODS \u003d \"Airpods\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_VALUE_LAKSA \u003d \"3.50\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_VALUE_AIRPODS \u003d \"350\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DATE_LAKSA \u003d \"13/03/1937\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DATE_AIRPODS \u003d \"14/03/1937\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_TAG_LUNCH \u003d \"Lunch\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_TAG_BRUNCH \u003d \"Brunch\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_TAG_ACCESSORY \u003d \"Accessory\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DESC_LAKSA \u003d \" \" + PREFIX_NAME + VALID_DESCRIPTION_LAKSA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DESC_AIRPODS \u003d \" \" + PREFIX_NAME + VALID_DESCRIPTION_AIRPODS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALUE_LAKSA \u003d \" \" + PREFIX_COST + VALID_VALUE_LAKSA;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALUE_AIRPODS \u003d \" \" + PREFIX_COST + VALID_VALUE_AIRPODS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String TAG_LAKSA \u003d \" \" + PREFIX_TAG + VALID_TAG_LUNCH;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String TAG_BRUNCH \u003d \" \" + PREFIX_TAG + VALID_TAG_BRUNCH;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String TAG_AIRPODS \u003d \" \" + PREFIX_TAG + VALID_TAG_ACCESSORY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String INVALID_VALUE \u003d \" \" + PREFIX_COST + \".00\"; // missing whole number"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String INVALID_TAG \u003d \" \" + PREFIX_TAG + \"A+\"; //illegal character"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final EditCommand.EditTransactionDescriptor DESC_MEAL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final EditCommand.EditTransactionDescriptor DESC_PURCHASE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DESC_MEAL \u003d new EditTransactionDescriptorBuilder().withDescription(VALID_DESCRIPTION_LAKSA)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(VALID_VALUE_LAKSA).withDate(VALID_DATE_LAKSA).withTags(VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DESC_PURCHASE \u003d new EditTransactionDescriptorBuilder().withDescription(VALID_DESCRIPTION_AIRPODS)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(VALID_VALUE_AIRPODS).withDate(VALID_DATE_AIRPODS).withTags(VALID_TAG_ACCESSORY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * - thrift, filtered transaction list and selected transaction in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift expectedThrift \u003d new Thrift(actualModel.getThrift());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cTransaction\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedThrift, actualModel.getThrift());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the transaction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * {@code model}\u0027s thrift."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static void showTransactionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transaction \u003d model.getFilteredTransactionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final String[] splitDescription \u003d transaction.getDescription().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionList(new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                Arrays.asList(splitDescription[0])));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(1, model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 115,
      "lightz96": 5
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        showTransactionAtIndex(model, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        showNoTransaction(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        showTransactionAtIndex(model, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thrift list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private void showNoTransaction(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(model.getFilteredTransactionList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 36,
      "lightz96": 5,
      "-": 69
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, descriptor);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Thrift(model.getThrift()), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.setTransaction(model.getFilteredTransactionList().get(0), editedExpense);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense editedTransaction \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(editedTransaction)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "               .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTransaction, descriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Thrift(model.getThrift()), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.setTransaction(lastTransaction, editedTransaction);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new EditTransactionDescriptor());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction editedTransaction \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Thrift(model.getThrift()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandTestUtil.showTransactionAtIndex(model, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transactionInFilteredList \u003d model.getFilteredTransactionList().get("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction editedPerson \u003d new ExpenseBuilder(transactionInFilteredList)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_LAKSA).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new EditTransactionDescriptorBuilder().withDescription(CommandTestUtil.VALID_DESCRIPTION_LAKSA)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Thrift(model.getThrift()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.setTransaction(model.getFilteredTransactionList().get(0), editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_invalidTransactionIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_LAKSA).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * but smaller than size of transactions list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_invalidTransactionIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandTestUtil.showTransactionAtIndex(model, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thrift list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new EditTransactionDescriptorBuilder().withDescription(CommandTestUtil.VALID_DESCRIPTION_LAKSA)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                CommandTestUtil.DESC_MEAL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditTransactionDescriptor copyDescriptor \u003d new EditTransactionDescriptor(CommandTestUtil.DESC_MEAL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, copyDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(TypicalIndexes.INDEX_SECOND_TRANSACTION,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                CommandTestUtil.DESC_MEAL)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                CommandTestUtil.DESC_PURCHASE)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 144,
      "lightz96": 8
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/EditTransactionDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class EditTransactionDescriptorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new EditTransactionDescriptor(CommandTestUtil.DESC_MEAL);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_MEAL.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_MEAL.equals(CommandTestUtil.DESC_MEAL));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(5));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(CommandTestUtil.DESC_PURCHASE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditTransactionDescriptor editedTransaction \u003d new EditTransactionDescriptorBuilder(CommandTestUtil.DESC_MEAL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(editedTransaction));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        editedTransaction \u003d new EditTransactionDescriptorBuilder(CommandTestUtil.DESC_MEAL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(editedTransaction));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        editedTransaction \u003d new EditTransactionDescriptorBuilder(CommandTestUtil.DESC_MEAL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDate(CommandTestUtil.VALID_DATE_AIRPODS).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(editedTransaction));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        editedTransaction \u003d new EditTransactionDescriptorBuilder(CommandTestUtil.DESC_MEAL)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_BRUNCH).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(editedTransaction));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 52
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_zeroKeywords_noTransactionFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_multipleKeywords_multipleTransactionsFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Penang Laksa1\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(Arrays.asList(TypicalTransactions.PENANG_LAKSA), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 78,
      "lightz96": 2
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandTestUtil.showTransactionAtIndex(model, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 8,
      "lightz96": 2,
      "-": 28
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/AddExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private AddExpenseCommandParser parser \u003d new AddExpenseCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DESC_LAKSA + CommandTestUtil.VALUE_LAKSA"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA + CommandTestUtil.TAG_LAKSA + CommandTestUtil.TAG_BRUNCH));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.DESC_LAKSA + CommandTestUtil.VALUE_LAKSA));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_DESCRIPTION_LAKSA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // missing value prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALID_VALUE_LAKSA, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_DESCRIPTION_LAKSA"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        + CommandTestUtil.VALID_VALUE_LAKSA, expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.TAG_LAKSA"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_BRUNCH, Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA + CommandTestUtil.INVALID_TAG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.INVALID_TAG,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DESC_LAKSA + CommandTestUtil.VALUE_LAKSA"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA + CommandTestUtil.TAG_BRUNCH,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 75
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", new DeleteCommand("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_TRANSACTION));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 8,
      "-": 24
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.VALID_DESCRIPTION_LAKSA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"-5\" + CommandTestUtil.DESC_LAKSA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"0\" + CommandTestUtil.DESC_LAKSA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /* TODO: Repair test case"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE, Value.VALUE_CONSTRAINTS); // invalid value"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_TAG, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value followed by valid tag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.TAG_LAKSA, Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // valid value followed by invalid value. The test case for invalid value followed by valid value"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA + CommandTestUtil.INVALID_VALUE, Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Transaction} being edited,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA + CommandTestUtil.TAG_BRUNCH"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA + TAG_EMPTY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_BRUNCH, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA + CommandTestUtil.TAG_BRUNCH, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"1\" + CommandTestUtil.INVALID_VALUE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        + CommandTestUtil.INVALID_TAG, Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /* TODO: Repair test case"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.DESC_LAKSA + CommandTestUtil.VALUE_LAKSA"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALUE_AIRPODS).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /* TODO: Repair test case"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.DESC_LAKSA + CommandTestUtil.VALUE_LAKSA"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.DESC_LAKSA + CommandTestUtil.VALUE_LAKSA"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /* TODO: Repair test case"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA + CommandTestUtil.TAG_LAKSA"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DESC_AIRPODS + CommandTestUtil.VALUE_AIRPODS"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_AIRPODS;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY, CommandTestUtil.VALID_TAG_LUNCH)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /* TODO: Repair test case"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.VALUE_AIRPODS;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.VALUE_LAKSA;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_LAKSA)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 189
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "-": 27
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_TRANSACTION, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_TRANSACTION, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseValue_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, Value.VALUE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e ParserUtil.parseValue(\"A+\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 97
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/ThriftParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TransactionUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class ThriftParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final ThriftParser parser \u003d new ThriftParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseCommand_addExpense() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e (AddExpenseCommand) parser.parseCommand(TransactionUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .getAddExpenseCommand(new ExpenseBuilder().build())));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST_TRANSACTION.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + \" \" + TypicalIndexes.INDEX_FIRST_TRANSACTION.getOneBased() + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + TransactionUtil.getEditTransactionDescriptorDetails(descriptor)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(new FindCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 36,
      "lightz96": 2,
      "-": 65
    }
  },
  {
    "path": "src/test/java/thrift/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.ThriftBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(new Thrift(), new Thrift(modelManager.getThrift()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        userPrefs.setThriftFilePath(Paths.get(\"thrift/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        userPrefs.setThriftFilePath(Paths.get(\"new/thrift/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setThriftFilePath(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath_validPath_setsThriftFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Path path \u003d Paths.get(\"thrift/file/path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelManager.setThriftFilePath(path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(path, modelManager.getThriftFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift thrift \u003d new ThriftBuilder().withTransaction(TypicalTransactions.LAKSA).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift differentThrift \u003d new Thrift();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelManager \u003d new ModelManager(thrift, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(thrift, userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // different thrift -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentThrift, userPrefs)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String[] keywords \u003d TypicalTransactions.PENANG_LAKSA.getDescription().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        modelManager.updateFilteredTransactionList(new DescriptionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(thrift, userPrefs)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        modelManager.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        differentUserPrefs.setThriftFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(thrift, differentUserPrefs)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 10,
      "lightz96": 20,
      "-": 85
    }
  },
  {
    "path": "src/test/java/thrift/model/ThriftTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class ThriftTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final Thrift thrift \u003d new Thrift();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(Collections.emptyList(), thrift.getTransactionList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e thrift.resetData(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void resetData_withValidReadOnlyThrift_replacesData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift newData \u003d TypicalTransactions.getTypicalThrift();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.resetData(newData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(newData, thrift);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void hasTransaction_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e thrift.hasTransaction(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void hasTransaction_transactionNotInThrift_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(thrift.hasTransaction(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void hasTransaction_transactionInThrift_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(thrift.hasTransaction(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void getTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e thrift.getTransactionList().remove(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * A stub ReadOnlyThrift whose transaction list can violate interface constraints."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static class ThriftStub implements ReadOnlyThrift {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        private final ObservableList\u003cTransaction\u003e transactions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ThriftStub(Collection\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            this.transactions.setAll(transactions);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return transactions;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 76
    }
  },
  {
    "path": "src/test/java/thrift/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setThriftFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/thrift/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Keywords match value, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Hearing\", \"$999\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Airpods\").withValue(\"12345\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 79
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 14
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expense.getTags().remove(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(TypicalTransactions.LAKSA.isSameTransaction(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.isSameTransaction(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different description and value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.isSameTransaction(editedExpense));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.isSameTransaction(editedExpense));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same name, same value, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_BRUNCH).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(TypicalTransactions.LAKSA.isSameTransaction(editedExpense));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expenseCopy \u003d new ExpenseBuilder(TypicalTransactions.LAKSA).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(TypicalTransactions.LAKSA.equals(expenseCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(TypicalTransactions.LAKSA.equals(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(TypicalTransactions.PENANG_LAKSA));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(editedExpense));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different value -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(editedExpense));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(editedExpense));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 79
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/TransactionDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionDateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TransactionDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_invalidValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String invalidValue \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TransactionDate(invalidValue));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TransactionDate.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\"^\")); // only non-numeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\"35/01/2000\")); //invalid day"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\"10/13/2000\")); // invalid month"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // valid value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(TransactionDate.isValidDate(\"10/01/2000\")); //proper date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 38
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/TransactionListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void contains_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.contains(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void contains_transactionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(transactionList.contains(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void contains_transactionInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(transactionList.contains(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void add_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.add(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction_nullTargetTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e transactionList.setTransaction(null, TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction_nullEditedTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e transactionList.setTransaction(TypicalTransactions.LAKSA, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction_targetTransactionNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e transactionList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .setTransaction(TypicalTransactions.LAKSA, TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction_editedTransactionIsSameTransaction_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.setTransaction(TypicalTransactions.LAKSA, TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedTransactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction_editedTransactionHasSameIdentity_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.setTransaction(TypicalTransactions.LAKSA, editedExpense);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedTransactionList.add(editedExpense);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction_editedTransactionHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.setTransaction(TypicalTransactions.LAKSA, TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedTransactionList.add(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void remove_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.remove(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void remove_transactionDoesNotExist_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e transactionList.remove(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void remove_existingTransaction_removesTransaction() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.remove(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions_nullTransactionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransactions((TransactionList) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions_transactionList_replacesOwnListWithProvidedTransactionList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedTransactionList.add(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.setTransactions(expectedTransactionList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransactions((List\u003cTransaction\u003e) null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cTransaction\u003e transactionList \u003d Collections.singletonList(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.transactionList.setTransactions(transactionList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedTransactionList.add(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, this.transactionList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e transactionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 144
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/ValueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ValueTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Value(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_invalidValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String invalidValue \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Value(invalidValue));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_invalidValueInvalidCurrency_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String value \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String currency \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Value(value, currency));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_validValueInvalidCurrency_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String value \u003d \"100\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String currency \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Value(value, currency));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void isValidValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Value.isValidValue(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\"\")); // empty string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\" \")); // spaces only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\"^\")); // only non-numeric characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\"1a\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\"10.100\")); // contains more than 2 decimal digits"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\".10\")); // no decimal value"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(Value.isValidValue(\"100\")); // integer only"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(Value.isValidValue(\"100.1\")); // 1 decimal point"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(Value.isValidValue(\"100.10\")); // 2 decimal points"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 54
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonAdaptedTransactionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.storage.JsonAdaptedTransaction.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class JsonAdaptedTransactionTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String INVALID_VALUE \u003d \".00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String INVALID_TAG \u003d \"A+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_TYPE \u003d \"expense\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d TypicalTransactions.LAKSA.getDescription().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_VALUE \u003d TypicalTransactions.LAKSA.getValue().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_DATE \u003d \"10/10/2010\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TypicalTransactions.LAKSA.getTags().stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_validTransactionDetails_returnsTransaction() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d new JsonAdaptedTransaction(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(TypicalTransactions.PENANG_LAKSA.toString(), transaction.toModelType().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE, null, VALID_VALUE, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_invalidValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE, VALID_DESCRIPTION, INVALID_VALUE, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d Value.VALUE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_nullValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE, VALID_DESCRIPTION, null, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Value.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE, VALID_DESCRIPTION, VALID_VALUE, VALID_DATE, invalidTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, transaction::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 61,
      "lightz96": 9
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonSerializableThriftTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import thrift.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "//import thrift.model.Thrift;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class JsonSerializableThriftTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \"JsonSerializableThriftTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final Path TYPICAL_TRANSACTIONS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \"typicalTransactionThrift.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final Path INVALID_TRANSACTIONS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \"invalidTransactionThrift.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /* TODO: Fix the test case when it is possible to read and parse from json file correctly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_typicalTransactionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonSerializableThrift dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TRANSACTIONS_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                JsonSerializableThrift.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift thriftFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift typicalTransactionsThrift \u003d TypicalTransactions.getTypicalThrift();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(thriftFromFile, typicalTransactionsThrift);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /* TODO: Fix the test case when it is possible to read and parse from json file correctly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_invalidTransactionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonSerializableThrift dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TRANSACTIONS_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                JsonSerializableThrift.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 33,
      "lightz96": 12
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonThriftStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class JsonThriftStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \"JsonThriftStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void readThrift_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readThrift(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private java.util.Optional\u003cReadOnlyThrift\u003e readThrift(String filePath) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return new JsonThriftStorage(Paths.get(filePath)).readThrift(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(readThrift(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readThrift(\"notJsonFormatTransactionThrift.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void readThrift_invalidTransactionThrift_throwDataConversionException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readThrift(\"invalidTransactionThrift.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void readThrift_invalidAndValidTransactionThrift_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(DataConversionException.class, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            -\u003e readThrift(\"invalidAndValidTransactionThrift.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /* TODO: Fix the bug where saving the pre-built transaction list and reading the pre-built transaction list do"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    *        not pass the assertEquals() on line 73."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void readAndSaveThrift_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempThrift.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift original \u003d TypicalTransactions.getTypicalThrift();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonThriftStorage jsonThriftStorage \u003d new JsonThriftStorage(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        jsonThriftStorage.saveThrift(original, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ReadOnlyThrift readBack \u003d jsonThriftStorage.readThrift(filePath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(original, new Thrift(readBack));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        original.addTransaction(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        original.removeTransaction(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        jsonThriftStorage.saveThrift(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        readBack \u003d jsonThriftStorage.readThrift(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(original, new Thrift(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        original.addTransaction(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        jsonThriftStorage.saveThrift(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        readBack \u003d jsonThriftStorage.readThrift().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(original, new Thrift(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift_nullThrift_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveThrift(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Saves {@code thrift} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private void saveThrift(ReadOnlyThrift thrift, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            new JsonThriftStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    .saveThrift(thrift, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveThrift(new Thrift(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 110
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(DataConversionException.class, ()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        userPrefs.setThriftFilePath(Paths.get(\"thrift.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 11,
      "lightz96": 1,
      "-": 114
    }
  },
  {
    "path": "src/test/java/thrift/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "//import thrift.model.Thrift;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "//import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonThriftStorage thriftStorage \u003d new JsonThriftStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        storageManager \u003d new StorageManager(thriftStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /* TODO: Fix the test case when it is possible to read and parse from json file correctly."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void thriftReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         * {@link JsonThriftStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonThriftStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */ /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift original \u003d TypicalTransactions.getTypicalThrift();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        storageManager.saveThrift(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ReadOnlyThrift retrieved \u003d storageManager.readThrift().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(original, new Thrift(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void getThriftFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertNotNull(storageManager.getThriftFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "lightz96": 13,
      "-": 50
    }
  },
  {
    "path": "src/test/java/thrift/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/thrift/testutil/EditTransactionDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A utility class to help with building EditTransactionDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class EditTransactionDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private EditCommand.EditTransactionDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditTransactionDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditTransactionDescriptorBuilder(EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.descriptor \u003d new EditTransactionDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an {@code EditTransactionDescriptor} with fields containing {@code Transaction}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditTransactionDescriptorBuilder(Transaction transaction) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setDescription(transaction.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setValue(transaction.getValue());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setDate(transaction.getDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setTags(transaction.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditTransactionDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Value} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditTransactionDescriptorBuilder withValue(String value) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setValue(new Value(value));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code TransactionDate} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditTransactionDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setDate(new TransactionDate(date));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTransactionDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditTransactionDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public EditCommand.EditTransactionDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 78
    }
  },
  {
    "path": "src/test/java/thrift/testutil/ExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Laksa\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"3.50\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"13/03/1937\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Value value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private TransactionDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d new Value(DEFAULT_COST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d new TransactionDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d transactionToCopy.getDescription();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d transactionToCopy.getValue();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d transactionToCopy.getDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(transactionToCopy.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Description} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Value} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder withValue(String value) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d new Value(value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code TransactionDate} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d new TransactionDate(date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Expense(description, value, date, tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 81
    }
  },
  {
    "path": "src/test/java/thrift/testutil/IncomeBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class IncomeBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Bursary\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"500\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"13/03/1937\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Value value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private TransactionDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d new Value(DEFAULT_COST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d new TransactionDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d transactionToCopy.getDescription();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d transactionToCopy.getValue();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d transactionToCopy.getDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(transactionToCopy.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Description} of the {@code Income} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Income} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Value} of the {@code Income} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder withValue(String value) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d new Value(value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code TransactionDate} of the {@code Income} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder withDate(String date) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d new TransactionDate(date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Income build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Income(description, value, date, tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 81
    }
  },
  {
    "path": "src/test/java/thrift/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/thrift/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the middle index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the last index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the transaction in the {@code model}\u0027s transaction list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Transaction getTransaction(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return model.getFilteredTransactionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/thrift/testutil/ThriftBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * A utility class to help with building Thrift objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": " *     {@code Thrift ab \u003d new ThriftBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class ThriftBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Thrift thrift;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ThriftBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift \u003d new Thrift();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ThriftBuilder(Thrift thrift) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thrift \u003d thrift;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds a new {@code Transaction} to the {@code Thrift} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ThriftBuilder withTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(transaction);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Thrift build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 34
    }
  },
  {
    "path": "src/test/java/thrift/testutil/TransactionUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A utility class for Transaction."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an add command string for adding the {@code Expense}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static String getAddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return AddExpenseCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the part of command string for the given {@code transaction}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        sb.append(CliSyntax.PREFIX_NAME + expense.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        sb.append(CliSyntax.PREFIX_COST + expense.getValue().toString() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expense.getTags().stream().forEach("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            s -\u003e sb.append(CliSyntax.PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the part of command string for the given {@code EditTransactionDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static String getEditTransactionDescriptorDetails(EditCommand.EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(CliSyntax.PREFIX_NAME)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(description.toString()).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.getValue().ifPresent(value -\u003e sb.append(CliSyntax.PREFIX_COST).append(value.toString()).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                sb.append(CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                tags.forEach(s -\u003e sb.append(CliSyntax.PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 54
    }
  },
  {
    "path": "src/test/java/thrift/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Index INDEX_FIRST_TRANSACTION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Index INDEX_SECOND_TRANSACTION \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Index INDEX_THIRD_TRANSACTION \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 12
    }
  },
  {
    "path": "src/test/java/thrift/testutil/TypicalTransactions.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * A utility class containing a list of {@code Transaction} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TypicalTransactions {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Expense LAKSA \u003d new ExpenseBuilder().withDescription(\"Laksa\").withValue(\"3.50\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .withDate(\"13/03/1937\").withTags(\"Lunch\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Expense PENANG_LAKSA \u003d new ExpenseBuilder().withDescription(\"Penang Laksa1\").withValue(\"5\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .withDate(\"11/10/2010\").withTags(\"Brunch\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Income BURSARY \u003d new IncomeBuilder().withDescription(\"Bursary\").withValue(\"500\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .withDate(\"13/11/2011\").withTags(\"Award\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private TypicalTransactions() {} // prevents instantiation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns an {@code Thrift} with all the typical persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static Thrift getTypicalThrift() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift thrift \u003d new Thrift();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (Transaction transaction : getTypicalTransaction()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thrift.addTransaction(transaction);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static List\u003cTransaction\u003e getTypicalTransaction() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LAKSA, PENANG_LAKSA));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 33,
      "lightz96": 7
    }
  },
  {
    "path": "src/test/java/thrift/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/thrift/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import thrift.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003cfx:root type\u003d\"thrift.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 5
    }
  }
]
